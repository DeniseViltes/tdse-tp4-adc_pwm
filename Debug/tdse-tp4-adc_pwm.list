
tdse-tp4-adc_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004720  08004720  00006084  2**0
                  CONTENTS
  4 .ARM          00000008  08004720  08004720  00005720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004728  08004728  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004728  08004728  00005728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800472c  0800472c  0000572c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08004730  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000084  080047b4  00006084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  080047b4  000063e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e215  00000000  00000000  000060ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000258e  00000000  00000000  000142c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  00016850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a91  00000000  00000000  000175f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019391  00000000  00000000  00018089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f60  00000000  00000000  0003141a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ffe2  00000000  00000000  0004237a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d235c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004470  00000000  00000000  000d23a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d6810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08004598 	.word	0x08004598

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08004598 	.word	0x08004598

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f003 f864 	bl	800322c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fb2c 	bl	80007c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f80d 	bl	8000186 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f922 	bl	80003b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f8f6 	bl	8000360 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000174:	f000 f85c 	bl	8000230 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000178:	f000 f898 	bl	80002ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 800017c:	f002 fba4 	bl	80028c8 <app_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    app_update();
 8000180:	f002 fc40 	bl	8002a04 <app_update>
 8000184:	e7fc      	b.n	8000180 <main+0x24>

08000186 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000186:	b580      	push	{r7, lr}
 8000188:	b094      	sub	sp, #80	@ 0x50
 800018a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000190:	2228      	movs	r2, #40	@ 0x28
 8000192:	2100      	movs	r1, #0
 8000194:	4618      	mov	r0, r3
 8000196:	f003 face 	bl	8003736 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019a:	f107 0314 	add.w	r3, r7, #20
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2302      	movs	r3, #2
 80001b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001be:	2310      	movs	r3, #16
 80001c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c2:	2302      	movs	r3, #2
 80001c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001c6:	2300      	movs	r3, #0
 80001c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001ca:	2300      	movs	r3, #0
 80001cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 f944 	bl	8001460 <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80001de:	f000 f957 	bl	8000490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fbb0 	bl	8001964 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x88>
  {
    Error_Handler();
 800020a:	f000 f941 	bl	8000490 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020e:	2302      	movs	r3, #2
 8000210:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fd31 	bl	8001c80 <HAL_RCCEx_PeriphCLKConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000224:	f000 f934 	bl	8000490 <Error_Handler>
  }
}
 8000228:	bf00      	nop
 800022a:	3750      	adds	r7, #80	@ 0x50
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000242:	4a19      	ldr	r2, [pc, #100]	@ (80002a8 <MX_ADC1_Init+0x78>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800025a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800025e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000260:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026c:	480d      	ldr	r0, [pc, #52]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800026e:	f000 fb09 	bl	8000884 <HAL_ADC_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000278:	f000 f90a 	bl	8000490 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800028e:	f000 fc87 	bl	8000ba0 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000298:	f000 f8fa 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200000a0 	.word	0x200000a0
 80002a8:	40012400 	.word	0x40012400

080002ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	@ 0x28
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b2:	f107 0320 	add.w	r3, r7, #32
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]
 80002ca:	615a      	str	r2, [r3, #20]
 80002cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002ce:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002d0:	4a22      	ldr	r2, [pc, #136]	@ (800035c <MX_TIM3_Init+0xb0>)
 80002d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80002d4:	4b20      	ldr	r3, [pc, #128]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002da:	4b1f      	ldr	r3, [pc, #124]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80002e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002f4:	4818      	ldr	r0, [pc, #96]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002f6:	f001 fd79 	bl	8001dec <HAL_TIM_PWM_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000300:	f000 f8c6 	bl	8000490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000308:	2300      	movs	r3, #0
 800030a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800030c:	f107 0320 	add.w	r3, r7, #32
 8000310:	4619      	mov	r1, r3
 8000312:	4811      	ldr	r0, [pc, #68]	@ (8000358 <MX_TIM3_Init+0xac>)
 8000314:	f002 f99c 	bl	8002650 <HAL_TIMEx_MasterConfigSynchronization>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800031e:	f000 f8b7 	bl	8000490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000322:	2360      	movs	r3, #96	@ 0x60
 8000324:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	4619      	mov	r1, r3
 8000338:	4807      	ldr	r0, [pc, #28]	@ (8000358 <MX_TIM3_Init+0xac>)
 800033a:	f001 fead 	bl	8002098 <HAL_TIM_PWM_ConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000344:	f000 f8a4 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000348:	4803      	ldr	r0, [pc, #12]	@ (8000358 <MX_TIM3_Init+0xac>)
 800034a:	f000 f933 	bl	80005b4 <HAL_TIM_MspPostInit>

}
 800034e:	bf00      	nop
 8000350:	3728      	adds	r7, #40	@ 0x28
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000d0 	.word	0x200000d0
 800035c:	40000400 	.word	0x40000400

08000360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000366:	4a12      	ldr	r2, [pc, #72]	@ (80003b0 <MX_USART2_UART_Init+0x50>)
 8000368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800036a:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 800036c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000398:	f002 f9b8 	bl	800270c <HAL_UART_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003a2:	f000 f875 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000118 	.word	0x20000118
 80003b0:	40004400 	.word	0x40004400

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a2c      	ldr	r2, [pc, #176]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e0:	4b27      	ldr	r3, [pc, #156]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a26      	ldr	r2, [pc, #152]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b24      	ldr	r3, [pc, #144]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0320 	and.w	r3, r3, #32
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b21      	ldr	r3, [pc, #132]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a20      	ldr	r2, [pc, #128]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b1e      	ldr	r3, [pc, #120]	@ (8000480 <MX_GPIO_Init+0xcc>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <MX_GPIO_Init+0xcc>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1a      	ldr	r2, [pc, #104]	@ (8000480 <MX_GPIO_Init+0xcc>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <MX_GPIO_Init+0xcc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0308 	and.w	r3, r3, #8
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2120      	movs	r1, #32
 800042c:	4815      	ldr	r0, [pc, #84]	@ (8000484 <MX_GPIO_Init+0xd0>)
 800042e:	f000 ffdd 	bl	80013ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000432:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000438:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <MX_GPIO_Init+0xd4>)
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4811      	ldr	r0, [pc, #68]	@ (800048c <MX_GPIO_Init+0xd8>)
 8000448:	f000 fe4c 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800044c:	2320      	movs	r3, #32
 800044e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000450:	2301      	movs	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	2302      	movs	r3, #2
 800045a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	4808      	ldr	r0, [pc, #32]	@ (8000484 <MX_GPIO_Init+0xd0>)
 8000464:	f000 fe3e 	bl	80010e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2100      	movs	r1, #0
 800046c:	2028      	movs	r0, #40	@ 0x28
 800046e:	f000 fe02 	bl	8001076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000472:	2028      	movs	r0, #40	@ 0x28
 8000474:	f000 fe1b 	bl	80010ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000478:	bf00      	nop
 800047a:	3720      	adds	r7, #32
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800
 8000488:	10110000 	.word	0x10110000
 800048c:	40011000 	.word	0x40011000

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <Error_Handler+0x8>

0800049c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a2:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a14      	ldr	r2, [pc, #80]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a0e      	ldr	r2, [pc, #56]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d2:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <HAL_MspInit+0x60>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <HAL_MspInit+0x60>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000

08000500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a14      	ldr	r2, [pc, #80]	@ (800056c <HAL_ADC_MspInit+0x6c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d121      	bne.n	8000564 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000520:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <HAL_ADC_MspInit+0x70>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a12      	ldr	r2, [pc, #72]	@ (8000570 <HAL_ADC_MspInit+0x70>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b10      	ldr	r3, [pc, #64]	@ (8000570 <HAL_ADC_MspInit+0x70>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <HAL_ADC_MspInit+0x70>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a0c      	ldr	r2, [pc, #48]	@ (8000570 <HAL_ADC_MspInit+0x70>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b0a      	ldr	r3, [pc, #40]	@ (8000570 <HAL_ADC_MspInit+0x70>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000550:	2301      	movs	r3, #1
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000554:	2303      	movs	r3, #3
 8000556:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4805      	ldr	r0, [pc, #20]	@ (8000574 <HAL_ADC_MspInit+0x74>)
 8000560:	f000 fdc0 	bl	80010e4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40012400 	.word	0x40012400
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800

08000578 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a09      	ldr	r2, [pc, #36]	@ (80005ac <HAL_TIM_PWM_MspInit+0x34>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d10b      	bne.n	80005a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_TIM_PWM_MspInit+0x38>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a08      	ldr	r2, [pc, #32]	@ (80005b0 <HAL_TIM_PWM_MspInit+0x38>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <HAL_TIM_PWM_MspInit+0x38>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80005a2:	bf00      	nop
 80005a4:	3714      	adds	r7, #20
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr
 80005ac:	40000400 	.word	0x40000400
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a0f      	ldr	r2, [pc, #60]	@ (800060c <HAL_TIM_MspPostInit+0x58>)
 80005d0:	4293      	cmp	r3, r2
 80005d2:	d117      	bne.n	8000604 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <HAL_TIM_MspPostInit+0x5c>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000610 <HAL_TIM_MspPostInit+0x5c>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <HAL_TIM_MspPostInit+0x5c>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 80005ec:	2340      	movs	r3, #64	@ 0x40
 80005ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	4805      	ldr	r0, [pc, #20]	@ (8000614 <HAL_TIM_MspPostInit+0x60>)
 8000600:	f000 fd70 	bl	80010e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40000400 	.word	0x40000400
 8000610:	40021000 	.word	0x40021000
 8000614:	40010800 	.word	0x40010800

08000618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a15      	ldr	r2, [pc, #84]	@ (8000688 <HAL_UART_MspInit+0x70>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d123      	bne.n	8000680 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <HAL_UART_MspInit+0x74>)
 800063a:	69db      	ldr	r3, [r3, #28]
 800063c:	4a13      	ldr	r2, [pc, #76]	@ (800068c <HAL_UART_MspInit+0x74>)
 800063e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000642:	61d3      	str	r3, [r2, #28]
 8000644:	4b11      	ldr	r3, [pc, #68]	@ (800068c <HAL_UART_MspInit+0x74>)
 8000646:	69db      	ldr	r3, [r3, #28]
 8000648:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b0e      	ldr	r3, [pc, #56]	@ (800068c <HAL_UART_MspInit+0x74>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <HAL_UART_MspInit+0x74>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b0b      	ldr	r3, [pc, #44]	@ (800068c <HAL_UART_MspInit+0x74>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000668:	230c      	movs	r3, #12
 800066a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066c:	2302      	movs	r3, #2
 800066e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2302      	movs	r3, #2
 8000672:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <HAL_UART_MspInit+0x78>)
 800067c:	f000 fd32 	bl	80010e4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40004400 	.word	0x40004400
 800068c:	40021000 	.word	0x40021000
 8000690:	40010800 	.word	0x40010800

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <NMI_Handler+0x4>

0800069c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <HardFault_Handler+0x4>

080006a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <MemManage_Handler+0x4>

080006ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <UsageFault_Handler+0x4>

080006bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e4:	f000 f8b2 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}

080006ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006f4:	f000 fe92 	bl	800141c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000704:	4a14      	ldr	r2, [pc, #80]	@ (8000758 <_sbrk+0x5c>)
 8000706:	4b15      	ldr	r3, [pc, #84]	@ (800075c <_sbrk+0x60>)
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000710:	4b13      	ldr	r3, [pc, #76]	@ (8000760 <_sbrk+0x64>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000718:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <_sbrk+0x64>)
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <_sbrk+0x68>)
 800071c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800071e:	4b10      	ldr	r3, [pc, #64]	@ (8000760 <_sbrk+0x64>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	693a      	ldr	r2, [r7, #16]
 8000728:	429a      	cmp	r2, r3
 800072a:	d207      	bcs.n	800073c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800072c:	f003 f852 	bl	80037d4 <__errno>
 8000730:	4603      	mov	r3, r0
 8000732:	220c      	movs	r2, #12
 8000734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000736:	f04f 33ff 	mov.w	r3, #4294967295
 800073a:	e009      	b.n	8000750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <_sbrk+0x64>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000742:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <_sbrk+0x64>)
 8000744:	681a      	ldr	r2, [r3, #0]
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	4a05      	ldr	r2, [pc, #20]	@ (8000760 <_sbrk+0x64>)
 800074c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800074e:	68fb      	ldr	r3, [r7, #12]
}
 8000750:	4618      	mov	r0, r3
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20005000 	.word	0x20005000
 800075c:	00000400 	.word	0x00000400
 8000760:	20000160 	.word	0x20000160
 8000764:	200003e8 	.word	0x200003e8

08000768 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000774:	f7ff fff8 	bl	8000768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800077a:	490c      	ldr	r1, [pc, #48]	@ (80007ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800077c:	4a0c      	ldr	r2, [pc, #48]	@ (80007b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a09      	ldr	r2, [pc, #36]	@ (80007b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000790:	4c09      	ldr	r4, [pc, #36]	@ (80007b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079e:	f003 f81f 	bl	80037e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007a2:	f7ff fcdb 	bl	800015c <main>
  bx lr
 80007a6:	4770      	bx	lr
  ldr r0, =_sdata
 80007a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007ac:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80007b0:	08004730 	.word	0x08004730
  ldr r2, =_sbss
 80007b4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80007b8:	200003e4 	.word	0x200003e4

080007bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007bc:	e7fe      	b.n	80007bc <ADC1_2_IRQHandler>
	...

080007c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <HAL_Init+0x28>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <HAL_Init+0x28>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d0:	2003      	movs	r0, #3
 80007d2:	f000 fc45 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007d6:	2000      	movs	r0, #0
 80007d8:	f000 f808 	bl	80007ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007dc:	f7ff fe5e 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007e0:	2300      	movs	r3, #0
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40022000 	.word	0x40022000

080007ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007f4:	4b12      	ldr	r3, [pc, #72]	@ (8000840 <HAL_InitTick+0x54>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <HAL_InitTick+0x58>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4619      	mov	r1, r3
 80007fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000802:	fbb3 f3f1 	udiv	r3, r3, r1
 8000806:	fbb2 f3f3 	udiv	r3, r2, r3
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fc5d 	bl	80010ca <HAL_SYSTICK_Config>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000816:	2301      	movs	r3, #1
 8000818:	e00e      	b.n	8000838 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b0f      	cmp	r3, #15
 800081e:	d80a      	bhi.n	8000836 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000820:	2200      	movs	r2, #0
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f000 fc25 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800082c:	4a06      	ldr	r2, [pc, #24]	@ (8000848 <HAL_InitTick+0x5c>)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000004 	.word	0x20000004

0800084c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000850:	4b05      	ldr	r3, [pc, #20]	@ (8000868 <HAL_IncTick+0x1c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	461a      	mov	r2, r3
 8000856:	4b05      	ldr	r3, [pc, #20]	@ (800086c <HAL_IncTick+0x20>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a03      	ldr	r2, [pc, #12]	@ (800086c <HAL_IncTick+0x20>)
 800085e:	6013      	str	r3, [r2, #0]
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000008 	.word	0x20000008
 800086c:	20000164 	.word	0x20000164

08000870 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b02      	ldr	r3, [pc, #8]	@ (8000880 <HAL_GetTick+0x10>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000164 	.word	0x20000164

08000884 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800088c:	2300      	movs	r3, #0
 800088e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000890:	2300      	movs	r3, #0
 8000892:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d101      	bne.n	80008a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e0be      	b.n	8000a24 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d109      	bne.n	80008c8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2200      	movs	r2, #0
 80008b8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	f7ff fe1c 	bl	8000500 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f000 fabb 	bl	8000e44 <ADC_ConversionStop_Disable>
 80008ce:	4603      	mov	r3, r0
 80008d0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	2b00      	cmp	r3, #0
 80008dc:	f040 8099 	bne.w	8000a12 <HAL_ADC_Init+0x18e>
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8095 	bne.w	8000a12 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008ec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80008f0:	f023 0302 	bic.w	r3, r3, #2
 80008f4:	f043 0202 	orr.w	r2, r3, #2
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000904:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	7b1b      	ldrb	r3, [r3, #12]
 800090a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800090c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	4313      	orrs	r3, r2
 8000912:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800091c:	d003      	beq.n	8000926 <HAL_ADC_Init+0xa2>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d102      	bne.n	800092c <HAL_ADC_Init+0xa8>
 8000926:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800092a:	e000      	b.n	800092e <HAL_ADC_Init+0xaa>
 800092c:	2300      	movs	r3, #0
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4313      	orrs	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	7d1b      	ldrb	r3, [r3, #20]
 8000938:	2b01      	cmp	r3, #1
 800093a:	d119      	bne.n	8000970 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7b1b      	ldrb	r3, [r3, #12]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d109      	bne.n	8000958 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	3b01      	subs	r3, #1
 800094a:	035a      	lsls	r2, r3, #13
 800094c:	693b      	ldr	r3, [r7, #16]
 800094e:	4313      	orrs	r3, r2
 8000950:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	e00b      	b.n	8000970 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800095c:	f043 0220 	orr.w	r2, r3, #32
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000968:	f043 0201 	orr.w	r2, r3, #1
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	430a      	orrs	r2, r1
 8000982:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	4b28      	ldr	r3, [pc, #160]	@ (8000a2c <HAL_ADC_Init+0x1a8>)
 800098c:	4013      	ands	r3, r2
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	6812      	ldr	r2, [r2, #0]
 8000992:	68b9      	ldr	r1, [r7, #8]
 8000994:	430b      	orrs	r3, r1
 8000996:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009a0:	d003      	beq.n	80009aa <HAL_ADC_Init+0x126>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d104      	bne.n	80009b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	691b      	ldr	r3, [r3, #16]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	051b      	lsls	r3, r3, #20
 80009b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ba:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <HAL_ADC_Init+0x1ac>)
 80009d0:	4013      	ands	r3, r2
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d10b      	bne.n	80009f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009e2:	f023 0303 	bic.w	r3, r3, #3
 80009e6:	f043 0201 	orr.w	r2, r3, #1
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009ee:	e018      	b.n	8000a22 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f4:	f023 0312 	bic.w	r3, r3, #18
 80009f8:	f043 0210 	orr.w	r2, r3, #16
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a04:	f043 0201 	orr.w	r2, r3, #1
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a10:	e007      	b.n	8000a22 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a16:	f043 0210 	orr.w	r2, r3, #16
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	ffe1f7fd 	.word	0xffe1f7fd
 8000a30:	ff1f0efe 	.word	0xff1f0efe

08000a34 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b084      	sub	sp, #16
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d101      	bne.n	8000a4e <HAL_ADC_Start_IT+0x1a>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e0a0      	b.n	8000b90 <HAL_ADC_Start_IT+0x15c>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a56:	6878      	ldr	r0, [r7, #4]
 8000a58:	f000 f99a 	bl	8000d90 <ADC_Enable>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	f040 808f 	bne.w	8000b86 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a6c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000a70:	f023 0301 	bic.w	r3, r3, #1
 8000a74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a45      	ldr	r2, [pc, #276]	@ (8000b98 <HAL_ADC_Start_IT+0x164>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d105      	bne.n	8000a92 <HAL_ADC_Start_IT+0x5e>
 8000a86:	4b45      	ldr	r3, [pc, #276]	@ (8000b9c <HAL_ADC_Start_IT+0x168>)
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d115      	bne.n	8000abe <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a96:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d026      	beq.n	8000afa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ab4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000abc:	e01d      	b.n	8000afa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ac2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a33      	ldr	r2, [pc, #204]	@ (8000b9c <HAL_ADC_Start_IT+0x168>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d004      	beq.n	8000ade <HAL_ADC_Start_IT+0xaa>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a2f      	ldr	r2, [pc, #188]	@ (8000b98 <HAL_ADC_Start_IT+0x164>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d10d      	bne.n	8000afa <HAL_ADC_Start_IT+0xc6>
 8000ade:	4b2f      	ldr	r3, [pc, #188]	@ (8000b9c <HAL_ADC_Start_IT+0x168>)
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d007      	beq.n	8000afa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000af2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b0a:	f023 0206 	bic.w	r2, r3, #6
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b12:	e002      	b.n	8000b1a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f06f 0202 	mvn.w	r2, #2
 8000b2a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0220 	orr.w	r2, r2, #32
 8000b3a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b46:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b4a:	d113      	bne.n	8000b74 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b50:	4a11      	ldr	r2, [pc, #68]	@ (8000b98 <HAL_ADC_Start_IT+0x164>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d105      	bne.n	8000b62 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <HAL_ADC_Start_IT+0x168>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d108      	bne.n	8000b74 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689a      	ldr	r2, [r3, #8]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	e00c      	b.n	8000b8e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	e003      	b.n	8000b8e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40012800 	.word	0x40012800
 8000b9c:	40012400 	.word	0x40012400

08000ba0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d101      	bne.n	8000bc0 <HAL_ADC_ConfigChannel+0x20>
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	e0dc      	b.n	8000d7a <HAL_ADC_ConfigChannel+0x1da>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b06      	cmp	r3, #6
 8000bce:	d81c      	bhi.n	8000c0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	3b05      	subs	r3, #5
 8000be2:	221f      	movs	r2, #31
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4019      	ands	r1, r3
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	3b05      	subs	r3, #5
 8000bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	430a      	orrs	r2, r1
 8000c06:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c08:	e03c      	b.n	8000c84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	2b0c      	cmp	r3, #12
 8000c10:	d81c      	bhi.n	8000c4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	4413      	add	r3, r2
 8000c22:	3b23      	subs	r3, #35	@ 0x23
 8000c24:	221f      	movs	r2, #31
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	4019      	ands	r1, r3
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	6818      	ldr	r0, [r3, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	4613      	mov	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	3b23      	subs	r3, #35	@ 0x23
 8000c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	430a      	orrs	r2, r1
 8000c48:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c4a:	e01b      	b.n	8000c84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b41      	subs	r3, #65	@ 0x41
 8000c5e:	221f      	movs	r2, #31
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	4019      	ands	r1, r3
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685a      	ldr	r2, [r3, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	3b41      	subs	r3, #65	@ 0x41
 8000c78:	fa00 f203 	lsl.w	r2, r0, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b09      	cmp	r3, #9
 8000c8a:	d91c      	bls.n	8000cc6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68d9      	ldr	r1, [r3, #12]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4613      	mov	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3b1e      	subs	r3, #30
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4019      	ands	r1, r3
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	6898      	ldr	r0, [r3, #8]
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b1e      	subs	r3, #30
 8000cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	e019      	b.n	8000cfa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6919      	ldr	r1, [r3, #16]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	4413      	add	r3, r2
 8000cd6:	2207      	movs	r2, #7
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	4019      	ands	r1, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	6898      	ldr	r0, [r3, #8]
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	4413      	add	r3, r2
 8000cee:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2b10      	cmp	r3, #16
 8000d00:	d003      	beq.n	8000d0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d06:	2b11      	cmp	r3, #17
 8000d08:	d132      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a1d      	ldr	r2, [pc, #116]	@ (8000d84 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d125      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d126      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	689a      	ldr	r2, [r3, #8]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000d30:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b10      	cmp	r3, #16
 8000d38:	d11a      	bne.n	8000d70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_ADC_ConfigChannel+0x1e8>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a13      	ldr	r2, [pc, #76]	@ (8000d8c <HAL_ADC_ConfigChannel+0x1ec>)
 8000d40:	fba2 2303 	umull	r2, r3, r2, r3
 8000d44:	0c9a      	lsrs	r2, r3, #18
 8000d46:	4613      	mov	r3, r2
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d50:	e002      	b.n	8000d58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f9      	bne.n	8000d52 <HAL_ADC_ConfigChannel+0x1b2>
 8000d5e:	e007      	b.n	8000d70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d64:	f043 0220 	orr.w	r2, r3, #32
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40012400 	.word	0x40012400
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	431bde83 	.word	0x431bde83

08000d90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d040      	beq.n	8000e30 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f042 0201 	orr.w	r2, r2, #1
 8000dbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <ADC_Enable+0xac>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000e40 <ADC_Enable+0xb0>)
 8000dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc8:	0c9b      	lsrs	r3, r3, #18
 8000dca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dcc:	e002      	b.n	8000dd4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1f9      	bne.n	8000dce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000dda:	f7ff fd49 	bl	8000870 <HAL_GetTick>
 8000dde:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000de0:	e01f      	b.n	8000e22 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000de2:	f7ff fd45 	bl	8000870 <HAL_GetTick>
 8000de6:	4602      	mov	r2, r0
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d918      	bls.n	8000e22 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d011      	beq.n	8000e22 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e02:	f043 0210 	orr.w	r2, r3, #16
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e007      	b.n	8000e32 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d1d8      	bne.n	8000de2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	431bde83 	.word	0x431bde83

08000e44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d12e      	bne.n	8000ebc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0201 	bic.w	r2, r2, #1
 8000e6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e6e:	f7ff fcff 	bl	8000870 <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e74:	e01b      	b.n	8000eae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e76:	f7ff fcfb 	bl	8000870 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d914      	bls.n	8000eae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d10d      	bne.n	8000eae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e96:	f043 0210 	orr.w	r2, r3, #16
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea2:	f043 0201 	orr.w	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e007      	b.n	8000ebe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d0dc      	beq.n	8000e76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4906      	ldr	r1, [pc, #24]	@ (8000f60 <__NVIC_EnableIRQ+0x34>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff90 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	@ (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff2d 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff42 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff90 	bl	8000fb8 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5f 	bl	8000f64 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff35 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b08b      	sub	sp, #44	@ 0x2c
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f6:	e169      	b.n	80013cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f8:	2201      	movs	r2, #1
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8158 	bne.w	80013c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a9a      	ldr	r2, [pc, #616]	@ (8001384 <HAL_GPIO_Init+0x2a0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d05e      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001120:	4a98      	ldr	r2, [pc, #608]	@ (8001384 <HAL_GPIO_Init+0x2a0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d875      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001126:	4a98      	ldr	r2, [pc, #608]	@ (8001388 <HAL_GPIO_Init+0x2a4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d058      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 800112c:	4a96      	ldr	r2, [pc, #600]	@ (8001388 <HAL_GPIO_Init+0x2a4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d86f      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001132:	4a96      	ldr	r2, [pc, #600]	@ (800138c <HAL_GPIO_Init+0x2a8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d052      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001138:	4a94      	ldr	r2, [pc, #592]	@ (800138c <HAL_GPIO_Init+0x2a8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d869      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800113e:	4a94      	ldr	r2, [pc, #592]	@ (8001390 <HAL_GPIO_Init+0x2ac>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d04c      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001144:	4a92      	ldr	r2, [pc, #584]	@ (8001390 <HAL_GPIO_Init+0x2ac>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d863      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800114a:	4a92      	ldr	r2, [pc, #584]	@ (8001394 <HAL_GPIO_Init+0x2b0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d046      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001150:	4a90      	ldr	r2, [pc, #576]	@ (8001394 <HAL_GPIO_Init+0x2b0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d85d      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d82a      	bhi.n	80011b0 <HAL_GPIO_Init+0xcc>
 800115a:	2b12      	cmp	r3, #18
 800115c:	d859      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800115e:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <HAL_GPIO_Init+0x80>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	080011df 	.word	0x080011df
 8001168:	080011b9 	.word	0x080011b9
 800116c:	080011cb 	.word	0x080011cb
 8001170:	0800120d 	.word	0x0800120d
 8001174:	08001213 	.word	0x08001213
 8001178:	08001213 	.word	0x08001213
 800117c:	08001213 	.word	0x08001213
 8001180:	08001213 	.word	0x08001213
 8001184:	08001213 	.word	0x08001213
 8001188:	08001213 	.word	0x08001213
 800118c:	08001213 	.word	0x08001213
 8001190:	08001213 	.word	0x08001213
 8001194:	08001213 	.word	0x08001213
 8001198:	08001213 	.word	0x08001213
 800119c:	08001213 	.word	0x08001213
 80011a0:	08001213 	.word	0x08001213
 80011a4:	08001213 	.word	0x08001213
 80011a8:	080011c1 	.word	0x080011c1
 80011ac:	080011d5 	.word	0x080011d5
 80011b0:	4a79      	ldr	r2, [pc, #484]	@ (8001398 <HAL_GPIO_Init+0x2b4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011b6:	e02c      	b.n	8001212 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e029      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	3304      	adds	r3, #4
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e024      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	3308      	adds	r3, #8
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e01f      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	330c      	adds	r3, #12
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e01a      	b.n	8001214 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e6:	2304      	movs	r3, #4
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e013      	b.n	8001214 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	611a      	str	r2, [r3, #16]
          break;
 80011fe:	e009      	b.n	8001214 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001200:	2308      	movs	r3, #8
 8001202:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	615a      	str	r2, [r3, #20]
          break;
 800120a:	e003      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
          break;
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x130>
          break;
 8001212:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2bff      	cmp	r3, #255	@ 0xff
 8001218:	d801      	bhi.n	800121e <HAL_GPIO_Init+0x13a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	e001      	b.n	8001222 <HAL_GPIO_Init+0x13e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3304      	adds	r3, #4
 8001222:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2bff      	cmp	r3, #255	@ 0xff
 8001228:	d802      	bhi.n	8001230 <HAL_GPIO_Init+0x14c>
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x152>
 8001230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001232:	3b08      	subs	r3, #8
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	210f      	movs	r1, #15
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	401a      	ands	r2, r3
 8001248:	6a39      	ldr	r1, [r7, #32]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	431a      	orrs	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80b1 	beq.w	80013c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001264:	4b4d      	ldr	r3, [pc, #308]	@ (800139c <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a4c      	ldr	r2, [pc, #304]	@ (800139c <HAL_GPIO_Init+0x2b8>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b4a      	ldr	r3, [pc, #296]	@ (800139c <HAL_GPIO_Init+0x2b8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800127c:	4a48      	ldr	r2, [pc, #288]	@ (80013a0 <HAL_GPIO_Init+0x2bc>)
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a40      	ldr	r2, [pc, #256]	@ (80013a4 <HAL_GPIO_Init+0x2c0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d013      	beq.n	80012d0 <HAL_GPIO_Init+0x1ec>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a3f      	ldr	r2, [pc, #252]	@ (80013a8 <HAL_GPIO_Init+0x2c4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00d      	beq.n	80012cc <HAL_GPIO_Init+0x1e8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a3e      	ldr	r2, [pc, #248]	@ (80013ac <HAL_GPIO_Init+0x2c8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x1e4>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3d      	ldr	r2, [pc, #244]	@ (80013b0 <HAL_GPIO_Init+0x2cc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d101      	bne.n	80012c4 <HAL_GPIO_Init+0x1e0>
 80012c0:	2303      	movs	r3, #3
 80012c2:	e006      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012c4:	2304      	movs	r3, #4
 80012c6:	e004      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012d0:	2300      	movs	r3, #0
 80012d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012d4:	f002 0203 	and.w	r2, r2, #3
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	4093      	lsls	r3, r2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012e2:	492f      	ldr	r1, [pc, #188]	@ (80013a0 <HAL_GPIO_Init+0x2bc>)
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	492c      	ldr	r1, [pc, #176]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	608b      	str	r3, [r1, #8]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	4928      	ldr	r1, [pc, #160]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001324:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	4922      	ldr	r1, [pc, #136]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001332:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	43db      	mvns	r3, r3
 800133a:	491e      	ldr	r1, [pc, #120]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4918      	ldr	r1, [pc, #96]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4914      	ldr	r1, [pc, #80]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001364:	4013      	ands	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d021      	beq.n	80013b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	490e      	ldr	r1, [pc, #56]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e021      	b.n	80013c6 <HAL_GPIO_Init+0x2e2>
 8001382:	bf00      	nop
 8001384:	10320000 	.word	0x10320000
 8001388:	10310000 	.word	0x10310000
 800138c:	10220000 	.word	0x10220000
 8001390:	10210000 	.word	0x10210000
 8001394:	10120000 	.word	0x10120000
 8001398:	10110000 	.word	0x10110000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	43db      	mvns	r3, r3
 80013c0:	4909      	ldr	r1, [pc, #36]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	3301      	adds	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f47f ae8e 	bne.w	80010f8 <HAL_GPIO_Init+0x14>
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	372c      	adds	r7, #44	@ 0x2c
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001408:	e003      	b.n	8001412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800140a:	887b      	ldrh	r3, [r7, #2]
 800140c:	041a      	lsls	r2, r3, #16
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	611a      	str	r2, [r3, #16]
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001426:	4b08      	ldr	r3, [pc, #32]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001428:	695a      	ldr	r2, [r3, #20]
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	4013      	ands	r3, r2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d006      	beq.n	8001440 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001432:	4a05      	ldr	r2, [pc, #20]	@ (8001448 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	4618      	mov	r0, r3
 800143c:	f000 f806 	bl	800144c <HAL_GPIO_EXTI_Callback>
  }
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40010400 	.word	0x40010400

0800144c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr

08001460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e272      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8087 	beq.w	800158e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001480:	4b92      	ldr	r3, [pc, #584]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b04      	cmp	r3, #4
 800148a:	d00c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800148c:	4b8f      	ldr	r3, [pc, #572]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d112      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 8001498:	4b8c      	ldr	r3, [pc, #560]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a4:	d10b      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4b89      	ldr	r3, [pc, #548]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d06c      	beq.n	800158c <HAL_RCC_OscConfig+0x12c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d168      	bne.n	800158c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e24c      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x76>
 80014c8:	4b80      	ldr	r3, [pc, #512]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a7f      	ldr	r2, [pc, #508]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e02e      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x98>
 80014de:	4b7b      	ldr	r3, [pc, #492]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7a      	ldr	r2, [pc, #488]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b78      	ldr	r3, [pc, #480]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a77      	ldr	r2, [pc, #476]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0xbc>
 8001502:	4b72      	ldr	r3, [pc, #456]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a71      	ldr	r2, [pc, #452]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b6f      	ldr	r3, [pc, #444]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6e      	ldr	r2, [pc, #440]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 800151c:	4b6b      	ldr	r3, [pc, #428]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6a      	ldr	r2, [pc, #424]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b68      	ldr	r3, [pc, #416]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a67      	ldr	r2, [pc, #412]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001532:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff f998 	bl	8000870 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff f994 	bl	8000870 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	@ 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e200      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b5d      	ldr	r3, [pc, #372]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xe4>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff f984 	bl	8000870 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff f980 	bl	8000870 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	@ 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1ec      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	4b53      	ldr	r3, [pc, #332]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x10c>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d063      	beq.n	8001662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159a:	4b4c      	ldr	r3, [pc, #304]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015a6:	4b49      	ldr	r3, [pc, #292]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x18c>
 80015b2:	4b46      	ldr	r3, [pc, #280]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	4b43      	ldr	r3, [pc, #268]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x176>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1c0      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b3d      	ldr	r3, [pc, #244]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4939      	ldr	r1, [pc, #228]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e03a      	b.n	8001662 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f4:	4b36      	ldr	r3, [pc, #216]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff f939 	bl	8000870 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff f935 	bl	8000870 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e1a1      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	4b2d      	ldr	r3, [pc, #180]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b2a      	ldr	r3, [pc, #168]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4927      	ldr	r1, [pc, #156]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff f918 	bl	8000870 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff f914 	bl	8000870 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e180      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d03a      	beq.n	80016e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <HAL_RCC_OscConfig+0x274>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff f8f8 	bl	8000870 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff f8f4 	bl	8000870 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e160      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f000 face 	bl	8001c44 <RCC_Delay>
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <HAL_RCC_OscConfig+0x274>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff f8de 	bl	8000870 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b6:	e00f      	b.n	80016d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff f8da 	bl	8000870 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d908      	bls.n	80016d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e146      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	42420000 	.word	0x42420000
 80016d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	4b92      	ldr	r3, [pc, #584]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e9      	bne.n	80016b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80a6 	beq.w	800183e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10d      	bne.n	800171e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b88      	ldr	r3, [pc, #544]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a87      	ldr	r2, [pc, #540]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b85      	ldr	r3, [pc, #532]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b82      	ldr	r3, [pc, #520]	@ (8001928 <HAL_RCC_OscConfig+0x4c8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d118      	bne.n	800175c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b7f      	ldr	r3, [pc, #508]	@ (8001928 <HAL_RCC_OscConfig+0x4c8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a7e      	ldr	r2, [pc, #504]	@ (8001928 <HAL_RCC_OscConfig+0x4c8>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001736:	f7ff f89b 	bl	8000870 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173e:	f7ff f897 	bl	8000870 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	@ 0x64
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e103      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <HAL_RCC_OscConfig+0x4c8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x312>
 8001764:	4b6f      	ldr	r3, [pc, #444]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a6e      	ldr	r2, [pc, #440]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	e02d      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x334>
 800177a:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a69      	ldr	r2, [pc, #420]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	4b67      	ldr	r3, [pc, #412]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a66      	ldr	r2, [pc, #408]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	e01c      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b05      	cmp	r3, #5
 800179a:	d10c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x356>
 800179c:	4b61      	ldr	r3, [pc, #388]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a60      	ldr	r2, [pc, #384]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 80017b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4b58      	ldr	r3, [pc, #352]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a57      	ldr	r2, [pc, #348]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d015      	beq.n	8001802 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff f84b 	bl	8000870 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7ff f847 	bl	8000870 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0b1      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ee      	beq.n	80017de <HAL_RCC_OscConfig+0x37e>
 8001800:	e014      	b.n	800182c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7ff f835 	bl	8000870 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff f831 	bl	8000870 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e09b      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001820:	4b40      	ldr	r3, [pc, #256]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ee      	bne.n	800180a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d105      	bne.n	800183e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001832:	4b3c      	ldr	r3, [pc, #240]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a3b      	ldr	r2, [pc, #236]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8087 	beq.w	8001956 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001848:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d061      	beq.n	8001918 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d146      	bne.n	80018ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b33      	ldr	r3, [pc, #204]	@ (800192c <HAL_RCC_OscConfig+0x4cc>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff f805 	bl	8000870 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff f801 	bl	8000870 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e06d      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187c:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001890:	d108      	bne.n	80018a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001892:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	4921      	ldr	r1, [pc, #132]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a19      	ldr	r1, [r3, #32]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	430b      	orrs	r3, r1
 80018b6:	491b      	ldr	r1, [pc, #108]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x4cc>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7fe ffd5 	bl	8000870 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7fe ffd1 	bl	8000870 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e03d      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x46a>
 80018e8:	e035      	b.n	8001956 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_RCC_OscConfig+0x4cc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7fe ffbe 	bl	8000870 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7fe ffba 	bl	8000870 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e026      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x498>
 8001916:	e01e      	b.n	8001956 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e019      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
 8001924:	40021000 	.word	0x40021000
 8001928:	40007000 	.word	0x40007000
 800192c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_OscConfig+0x500>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	429a      	cmp	r2, r3
 8001942:	d106      	bne.n	8001952 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000

08001964 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0d0      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001978:	4b6a      	ldr	r3, [pc, #424]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d910      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001986:	4b67      	ldr	r3, [pc, #412]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 0207 	bic.w	r2, r3, #7
 800198e:	4965      	ldr	r1, [pc, #404]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4313      	orrs	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	4b63      	ldr	r3, [pc, #396]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0b8      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d020      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d005      	beq.n	80019cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019c0:	4b59      	ldr	r3, [pc, #356]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	4a58      	ldr	r2, [pc, #352]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d8:	4b53      	ldr	r3, [pc, #332]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	4a52      	ldr	r2, [pc, #328]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e4:	4b50      	ldr	r3, [pc, #320]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	494d      	ldr	r1, [pc, #308]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d040      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b47      	ldr	r3, [pc, #284]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d115      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e07f      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d107      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a22:	4b41      	ldr	r3, [pc, #260]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e073      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a32:	4b3d      	ldr	r3, [pc, #244]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e06b      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a42:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f023 0203 	bic.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4936      	ldr	r1, [pc, #216]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a54:	f7fe ff0c 	bl	8000870 <HAL_GetTick>
 8001a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5c:	f7fe ff08 	bl	8000870 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e053      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a72:	4b2d      	ldr	r3, [pc, #180]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 020c 	and.w	r2, r3, #12
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d1eb      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a84:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d210      	bcs.n	8001ab4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f023 0207 	bic.w	r2, r3, #7
 8001a9a:	4922      	ldr	r1, [pc, #136]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d001      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e032      	b.n	8001b1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d008      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	4916      	ldr	r1, [pc, #88]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	490e      	ldr	r1, [pc, #56]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001af2:	f000 f821 	bl	8001b38 <HAL_RCC_GetSysClockFreq>
 8001af6:	4602      	mov	r2, r0
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	091b      	lsrs	r3, r3, #4
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	490a      	ldr	r1, [pc, #40]	@ (8001b2c <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	5ccb      	ldrb	r3, [r1, r3]
 8001b06:	fa22 f303 	lsr.w	r3, r2, r3
 8001b0a:	4a09      	ldr	r2, [pc, #36]	@ (8001b30 <HAL_RCC_ClockConfig+0x1cc>)
 8001b0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_RCC_ClockConfig+0x1d0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fe6a 	bl	80007ec <HAL_InitTick>

  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08004688 	.word	0x08004688
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004

08001b38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b087      	sub	sp, #28
 8001b3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f003 030c 	and.w	r3, r3, #12
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	d002      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x30>
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d003      	beq.n	8001b6e <HAL_RCC_GetSysClockFreq+0x36>
 8001b66:	e027      	b.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6a:	613b      	str	r3, [r7, #16]
      break;
 8001b6c:	e027      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0c9b      	lsrs	r3, r3, #18
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	4a17      	ldr	r2, [pc, #92]	@ (8001bd4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b78:	5cd3      	ldrb	r3, [r2, r3]
 8001b7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d010      	beq.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b86:	4b11      	ldr	r3, [pc, #68]	@ (8001bcc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	0c5b      	lsrs	r3, r3, #17
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	4a11      	ldr	r2, [pc, #68]	@ (8001bd8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9a:	fb03 f202 	mul.w	r2, r3, r2
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	e004      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a0c      	ldr	r2, [pc, #48]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	613b      	str	r3, [r7, #16]
      break;
 8001bb6:	e002      	b.n	8001bbe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bba:	613b      	str	r3, [r7, #16]
      break;
 8001bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bbe:	693b      	ldr	r3, [r7, #16]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	007a1200 	.word	0x007a1200
 8001bd4:	080046a0 	.word	0x080046a0
 8001bd8:	080046b0 	.word	0x080046b0
 8001bdc:	003d0900 	.word	0x003d0900

08001be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be4:	4b02      	ldr	r3, [pc, #8]	@ (8001bf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	20000000 	.word	0x20000000

08001bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bf8:	f7ff fff2 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	0a1b      	lsrs	r3, r3, #8
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	4903      	ldr	r1, [pc, #12]	@ (8001c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c0a:	5ccb      	ldrb	r3, [r1, r3]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08004698 	.word	0x08004698

08001c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_RCC_GetHCLKFreq>
 8001c24:	4602      	mov	r2, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	0adb      	lsrs	r3, r3, #11
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4903      	ldr	r1, [pc, #12]	@ (8001c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c32:	5ccb      	ldrb	r3, [r1, r3]
 8001c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08004698 	.word	0x08004698

08001c44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <RCC_Delay+0x34>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <RCC_Delay+0x38>)
 8001c52:	fba2 2303 	umull	r2, r3, r2, r3
 8001c56:	0a5b      	lsrs	r3, r3, #9
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	fb02 f303 	mul.w	r3, r2, r3
 8001c5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c60:	bf00      	nop
  }
  while (Delay --);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1e5a      	subs	r2, r3, #1
 8001c66:	60fa      	str	r2, [r7, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f9      	bne.n	8001c60 <RCC_Delay+0x1c>
}
 8001c6c:	bf00      	nop
 8001c6e:	bf00      	nop
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	10624dd3 	.word	0x10624dd3

08001c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d07d      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca2:	69db      	ldr	r3, [r3, #28]
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10d      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cac:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cb6:	61d3      	str	r3, [r2, #28]
 8001cb8:	4b49      	ldr	r3, [pc, #292]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cba:	69db      	ldr	r3, [r3, #28]
 8001cbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b46      	ldr	r3, [pc, #280]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d118      	bne.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd4:	4b43      	ldr	r3, [pc, #268]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a42      	ldr	r2, [pc, #264]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce0:	f7fe fdc6 	bl	8000870 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	e008      	b.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ce8:	f7fe fdc2 	bl	8000870 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	@ 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e06d      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d06:	4b36      	ldr	r3, [pc, #216]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d02e      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d027      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d24:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d34:	4b2c      	ldr	r3, [pc, #176]	@ (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d3a:	4a29      	ldr	r2, [pc, #164]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d014      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4a:	f7fe fd91 	bl	8000870 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d50:	e00a      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d52:	f7fe fd8d 	bl	8000870 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e036      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d68:	4b1d      	ldr	r3, [pc, #116]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0ee      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d74:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4917      	ldr	r1, [pc, #92]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	4a13      	ldr	r2, [pc, #76]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001da4:	4b0e      	ldr	r3, [pc, #56]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	490b      	ldr	r1, [pc, #44]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	4904      	ldr	r1, [pc, #16]	@ (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40007000 	.word	0x40007000
 8001de8:	42420440 	.word	0x42420440

08001dec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e041      	b.n	8001e82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d106      	bne.n	8001e18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fbb0 	bl	8000578 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3304      	adds	r3, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	f000 f9f6 	bl	800221c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_TIM_PWM_Start+0x24>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e022      	b.n	8001ef6 <HAL_TIM_PWM_Start+0x6a>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d109      	bne.n	8001eca <HAL_TIM_PWM_Start+0x3e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	e015      	b.n	8001ef6 <HAL_TIM_PWM_Start+0x6a>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d109      	bne.n	8001ee4 <HAL_TIM_PWM_Start+0x58>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	bf14      	ite	ne
 8001edc:	2301      	movne	r3, #1
 8001ede:	2300      	moveq	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e008      	b.n	8001ef6 <HAL_TIM_PWM_Start+0x6a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e05e      	b.n	8001fbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d104      	bne.n	8001f0e <HAL_TIM_PWM_Start+0x82>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f0c:	e013      	b.n	8001f36 <HAL_TIM_PWM_Start+0xaa>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d104      	bne.n	8001f1e <HAL_TIM_PWM_Start+0x92>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f1c:	e00b      	b.n	8001f36 <HAL_TIM_PWM_Start+0xaa>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d104      	bne.n	8001f2e <HAL_TIM_PWM_Start+0xa2>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f2c:	e003      	b.n	8001f36 <HAL_TIM_PWM_Start+0xaa>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fb62 	bl	8002608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1e      	ldr	r2, [pc, #120]	@ (8001fc4 <HAL_TIM_PWM_Start+0x138>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d107      	bne.n	8001f5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a18      	ldr	r2, [pc, #96]	@ (8001fc4 <HAL_TIM_PWM_Start+0x138>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00e      	beq.n	8001f86 <HAL_TIM_PWM_Start+0xfa>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f70:	d009      	beq.n	8001f86 <HAL_TIM_PWM_Start+0xfa>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a14      	ldr	r2, [pc, #80]	@ (8001fc8 <HAL_TIM_PWM_Start+0x13c>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d004      	beq.n	8001f86 <HAL_TIM_PWM_Start+0xfa>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a12      	ldr	r2, [pc, #72]	@ (8001fcc <HAL_TIM_PWM_Start+0x140>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d111      	bne.n	8001faa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b06      	cmp	r3, #6
 8001f96:	d010      	beq.n	8001fba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa8:	e007      	b.n	8001fba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0201 	orr.w	r2, r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40012c00 	.word	0x40012c00
 8001fc8:	40000400 	.word	0x40000400
 8001fcc:	40000800 	.word	0x40000800

08001fd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	6839      	ldr	r1, [r7, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fb10 	bl	8002608 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a29      	ldr	r2, [pc, #164]	@ (8002094 <HAL_TIM_PWM_Stop+0xc4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d117      	bne.n	8002022 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <HAL_TIM_PWM_Stop+0x52>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6a1a      	ldr	r2, [r3, #32]
 8002008:	f240 4344 	movw	r3, #1092	@ 0x444
 800200c:	4013      	ands	r3, r2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <HAL_TIM_PWM_Stop+0x52>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002020:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	f241 1311 	movw	r3, #4369	@ 0x1111
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10f      	bne.n	8002052 <HAL_TIM_PWM_Stop+0x82>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a1a      	ldr	r2, [r3, #32]
 8002038:	f240 4344 	movw	r3, #1092	@ 0x444
 800203c:	4013      	ands	r3, r2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_TIM_PWM_Stop+0x82>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d104      	bne.n	8002062 <HAL_TIM_PWM_Stop+0x92>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002060:	e013      	b.n	800208a <HAL_TIM_PWM_Stop+0xba>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d104      	bne.n	8002072 <HAL_TIM_PWM_Stop+0xa2>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002070:	e00b      	b.n	800208a <HAL_TIM_PWM_Stop+0xba>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b08      	cmp	r3, #8
 8002076:	d104      	bne.n	8002082 <HAL_TIM_PWM_Stop+0xb2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002080:	e003      	b.n	800208a <HAL_TIM_PWM_Stop+0xba>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40012c00 	.word	0x40012c00

08002098 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0ae      	b.n	8002214 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	f200 809f 	bhi.w	8002204 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020c6:	a201      	add	r2, pc, #4	@ (adr r2, 80020cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	08002101 	.word	0x08002101
 80020d0:	08002205 	.word	0x08002205
 80020d4:	08002205 	.word	0x08002205
 80020d8:	08002205 	.word	0x08002205
 80020dc:	08002141 	.word	0x08002141
 80020e0:	08002205 	.word	0x08002205
 80020e4:	08002205 	.word	0x08002205
 80020e8:	08002205 	.word	0x08002205
 80020ec:	08002183 	.word	0x08002183
 80020f0:	08002205 	.word	0x08002205
 80020f4:	08002205 	.word	0x08002205
 80020f8:	08002205 	.word	0x08002205
 80020fc:	080021c3 	.word	0x080021c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f8f6 	bl	80022f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699a      	ldr	r2, [r3, #24]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0208 	orr.w	r2, r2, #8
 800211a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	699a      	ldr	r2, [r3, #24]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0204 	bic.w	r2, r2, #4
 800212a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6999      	ldr	r1, [r3, #24]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	619a      	str	r2, [r3, #24]
      break;
 800213e:	e064      	b.n	800220a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f93c 	bl	80023c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800215a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800216a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6999      	ldr	r1, [r3, #24]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	021a      	lsls	r2, r3, #8
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	430a      	orrs	r2, r1
 800217e:	619a      	str	r2, [r3, #24]
      break;
 8002180:	e043      	b.n	800220a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68b9      	ldr	r1, [r7, #8]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 f985 	bl	8002498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69da      	ldr	r2, [r3, #28]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0208 	orr.w	r2, r2, #8
 800219c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69da      	ldr	r2, [r3, #28]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0204 	bic.w	r2, r2, #4
 80021ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69d9      	ldr	r1, [r3, #28]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	61da      	str	r2, [r3, #28]
      break;
 80021c0:	e023      	b.n	800220a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 f9cf 	bl	800256c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	69da      	ldr	r2, [r3, #28]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	69da      	ldr	r2, [r3, #28]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	69d9      	ldr	r1, [r3, #28]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	021a      	lsls	r2, r3, #8
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	61da      	str	r2, [r3, #28]
      break;
 8002202:	e002      	b.n	800220a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	75fb      	strb	r3, [r7, #23]
      break;
 8002208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002212:	7dfb      	ldrb	r3, [r7, #23]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a2f      	ldr	r2, [pc, #188]	@ (80022ec <TIM_Base_SetConfig+0xd0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00b      	beq.n	800224c <TIM_Base_SetConfig+0x30>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800223a:	d007      	beq.n	800224c <TIM_Base_SetConfig+0x30>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a2c      	ldr	r2, [pc, #176]	@ (80022f0 <TIM_Base_SetConfig+0xd4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d003      	beq.n	800224c <TIM_Base_SetConfig+0x30>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a2b      	ldr	r2, [pc, #172]	@ (80022f4 <TIM_Base_SetConfig+0xd8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d108      	bne.n	800225e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	4313      	orrs	r3, r2
 800225c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a22      	ldr	r2, [pc, #136]	@ (80022ec <TIM_Base_SetConfig+0xd0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00b      	beq.n	800227e <TIM_Base_SetConfig+0x62>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800226c:	d007      	beq.n	800227e <TIM_Base_SetConfig+0x62>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1f      	ldr	r2, [pc, #124]	@ (80022f0 <TIM_Base_SetConfig+0xd4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d003      	beq.n	800227e <TIM_Base_SetConfig+0x62>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a1e      	ldr	r2, [pc, #120]	@ (80022f4 <TIM_Base_SetConfig+0xd8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d108      	bne.n	8002290 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4a0d      	ldr	r2, [pc, #52]	@ (80022ec <TIM_Base_SetConfig+0xd0>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d103      	bne.n	80022c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d005      	beq.n	80022e2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f023 0201 	bic.w	r2, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	611a      	str	r2, [r3, #16]
  }
}
 80022e2:	bf00      	nop
 80022e4:	3714      	adds	r7, #20
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800

080022f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f023 0201 	bic.w	r2, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f023 0303 	bic.w	r3, r3, #3
 800232e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f023 0302 	bic.w	r3, r3, #2
 8002340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a1c      	ldr	r2, [pc, #112]	@ (80023c0 <TIM_OC1_SetConfig+0xc8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d10c      	bne.n	800236e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f023 0308 	bic.w	r3, r3, #8
 800235a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a13      	ldr	r2, [pc, #76]	@ (80023c0 <TIM_OC1_SetConfig+0xc8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d111      	bne.n	800239a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800237c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	621a      	str	r2, [r3, #32]
}
 80023b4:	bf00      	nop
 80023b6:	371c      	adds	r7, #28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40012c00 	.word	0x40012c00

080023c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f023 0210 	bic.w	r2, r3, #16
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80023f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f023 0320 	bic.w	r3, r3, #32
 800240e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a1d      	ldr	r2, [pc, #116]	@ (8002494 <TIM_OC2_SetConfig+0xd0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d10d      	bne.n	8002440 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800242a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	011b      	lsls	r3, r3, #4
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800243e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a14      	ldr	r2, [pc, #80]	@ (8002494 <TIM_OC2_SetConfig+0xd0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d113      	bne.n	8002470 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800244e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68fa      	ldr	r2, [r7, #12]
 800247a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	621a      	str	r2, [r3, #32]
}
 800248a:	bf00      	nop
 800248c:	371c      	adds	r7, #28
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr
 8002494:	40012c00 	.word	0x40012c00

08002498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0303 	bic.w	r3, r3, #3
 80024ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80024e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002568 <TIM_OC3_SetConfig+0xd0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10d      	bne.n	8002512 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	4313      	orrs	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a14      	ldr	r2, [pc, #80]	@ (8002568 <TIM_OC3_SetConfig+0xd0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d113      	bne.n	8002542 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002520:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002528:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	4313      	orrs	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	621a      	str	r2, [r3, #32]
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40012c00 	.word	0x40012c00

0800256c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800259a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80025b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	031b      	lsls	r3, r3, #12
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002604 <TIM_OC4_SetConfig+0x98>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d109      	bne.n	80025e0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80025d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	695b      	ldr	r3, [r3, #20]
 80025d8:	019b      	lsls	r3, r3, #6
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	621a      	str	r2, [r3, #32]
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40012c00 	.word	0x40012c00

08002608 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002608:	b480      	push	{r7}
 800260a:	b087      	sub	sp, #28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	2201      	movs	r2, #1
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a1a      	ldr	r2, [r3, #32]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	43db      	mvns	r3, r3
 800262a:	401a      	ands	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 031f 	and.w	r3, r3, #31
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	fa01 f303 	lsl.w	r3, r1, r3
 8002640:	431a      	orrs	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	621a      	str	r2, [r3, #32]
}
 8002646:	bf00      	nop
 8002648:	371c      	adds	r7, #28
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002664:	2302      	movs	r3, #2
 8002666:	e046      	b.n	80026f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800268e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4313      	orrs	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a16      	ldr	r2, [pc, #88]	@ (8002700 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d00e      	beq.n	80026ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b4:	d009      	beq.n	80026ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a12      	ldr	r2, [pc, #72]	@ (8002704 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d004      	beq.n	80026ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a10      	ldr	r2, [pc, #64]	@ (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d10c      	bne.n	80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40000400 	.word	0x40000400
 8002708:	40000800 	.word	0x40000800

0800270c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e042      	b.n	80027a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fd ff70 	bl	8000618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2224      	movs	r2, #36	@ 0x24
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800274e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f82b 	bl	80027ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80027e6:	f023 030c 	bic.w	r3, r3, #12
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	6812      	ldr	r2, [r2, #0]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	430b      	orrs	r3, r1
 80027f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2c      	ldr	r2, [pc, #176]	@ (80028c0 <UART_SetConfig+0x114>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d103      	bne.n	800281c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002814:	f7ff fa02 	bl	8001c1c <HAL_RCC_GetPCLK2Freq>
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	e002      	b.n	8002822 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800281c:	f7ff f9ea 	bl	8001bf4 <HAL_RCC_GetPCLK1Freq>
 8002820:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	009a      	lsls	r2, r3, #2
 800282c:	441a      	add	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	fbb2 f3f3 	udiv	r3, r2, r3
 8002838:	4a22      	ldr	r2, [pc, #136]	@ (80028c4 <UART_SetConfig+0x118>)
 800283a:	fba2 2303 	umull	r2, r3, r2, r3
 800283e:	095b      	lsrs	r3, r3, #5
 8002840:	0119      	lsls	r1, r3, #4
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	009a      	lsls	r2, r3, #2
 800284c:	441a      	add	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	fbb2 f2f3 	udiv	r2, r2, r3
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <UART_SetConfig+0x118>)
 800285a:	fba3 0302 	umull	r0, r3, r3, r2
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2064      	movs	r0, #100	@ 0x64
 8002862:	fb00 f303 	mul.w	r3, r0, r3
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	3332      	adds	r3, #50	@ 0x32
 800286c:	4a15      	ldr	r2, [pc, #84]	@ (80028c4 <UART_SetConfig+0x118>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002878:	4419      	add	r1, r3
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009a      	lsls	r2, r3, #2
 8002884:	441a      	add	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <UART_SetConfig+0x118>)
 8002892:	fba3 0302 	umull	r0, r3, r3, r2
 8002896:	095b      	lsrs	r3, r3, #5
 8002898:	2064      	movs	r0, #100	@ 0x64
 800289a:	fb00 f303 	mul.w	r3, r0, r3
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	3332      	adds	r3, #50	@ 0x32
 80028a4:	4a07      	ldr	r2, [pc, #28]	@ (80028c4 <UART_SetConfig+0x118>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	f003 020f 	and.w	r2, r3, #15
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	440a      	add	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40013800 	.word	0x40013800
 80028c4:	51eb851f 	.word	0x51eb851f

080028c8 <app_init>:
 * The function definition consists of actual statements which are executed
 * when the function is called (i.e. when the program control comes to the
 * function).
 */
void app_init(void)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\n");
 80028ce:	b672      	cpsid	i
 80028d0:	4b40      	ldr	r3, [pc, #256]	@ (80029d4 <app_init+0x10c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a40      	ldr	r2, [pc, #256]	@ (80029d8 <app_init+0x110>)
 80028d6:	213f      	movs	r1, #63	@ 0x3f
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 feb5 	bl	8003648 <sniprintf>
 80028de:	4603      	mov	r3, r0
 80028e0:	4a3e      	ldr	r2, [pc, #248]	@ (80029dc <app_init+0x114>)
 80028e2:	6013      	str	r3, [r2, #0]
 80028e4:	4b3b      	ldr	r3, [pc, #236]	@ (80029d4 <app_init+0x10c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f8f3 	bl	8002ad4 <logger_log_print_>
 80028ee:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 80028f0:	b672      	cpsid	i
 80028f2:	4b38      	ldr	r3, [pc, #224]	@ (80029d4 <app_init+0x10c>)
 80028f4:	681c      	ldr	r4, [r3, #0]
 80028f6:	f7fd ffbb 	bl	8000870 <HAL_GetTick>
 80028fa:	4603      	mov	r3, r0
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4b38      	ldr	r3, [pc, #224]	@ (80029e0 <app_init+0x118>)
 8002900:	4a38      	ldr	r2, [pc, #224]	@ (80029e4 <app_init+0x11c>)
 8002902:	213f      	movs	r1, #63	@ 0x3f
 8002904:	4620      	mov	r0, r4
 8002906:	f000 fe9f 	bl	8003648 <sniprintf>
 800290a:	4603      	mov	r3, r0
 800290c:	4a33      	ldr	r2, [pc, #204]	@ (80029dc <app_init+0x114>)
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b30      	ldr	r3, [pc, #192]	@ (80029d4 <app_init+0x10c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f000 f8dd 	bl	8002ad4 <logger_log_print_>
 800291a:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 800291c:	b672      	cpsid	i
 800291e:	4b2d      	ldr	r3, [pc, #180]	@ (80029d4 <app_init+0x10c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a31      	ldr	r2, [pc, #196]	@ (80029e8 <app_init+0x120>)
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	213f      	movs	r1, #63	@ 0x3f
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fe8d 	bl	8003648 <sniprintf>
 800292e:	4603      	mov	r3, r0
 8002930:	4a2a      	ldr	r2, [pc, #168]	@ (80029dc <app_init+0x114>)
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b27      	ldr	r3, [pc, #156]	@ (80029d4 <app_init+0x10c>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f000 f8cb 	bl	8002ad4 <logger_log_print_>
 800293e:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8002940:	b672      	cpsid	i
 8002942:	4b24      	ldr	r3, [pc, #144]	@ (80029d4 <app_init+0x10c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a29      	ldr	r2, [pc, #164]	@ (80029ec <app_init+0x124>)
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	213f      	movs	r1, #63	@ 0x3f
 800294c:	4618      	mov	r0, r3
 800294e:	f000 fe7b 	bl	8003648 <sniprintf>
 8002952:	4603      	mov	r3, r0
 8002954:	4a21      	ldr	r2, [pc, #132]	@ (80029dc <app_init+0x114>)
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <app_init+0x10c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f8b9 	bl	8002ad4 <logger_log_print_>
 8002962:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8002964:	4b22      	ldr	r3, [pc, #136]	@ (80029f0 <app_init+0x128>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	//LOGGER_LOG(" %s = %lu\n", GET_NAME(g_app_cnt), g_app_cnt);

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	e01a      	b.n	80029a6 <app_init+0xde>
		 * A function call is a statement that instructs the compiler to execute
		 * the function.
		 * We use the function name and parameters in the function call.
		 */
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8002970:	4920      	ldr	r1, [pc, #128]	@ (80029f4 <app_init+0x12c>)
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	481c      	ldr	r0, [pc, #112]	@ (80029f4 <app_init+0x12c>)
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	4413      	add	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4403      	add	r3, r0
 800298e:	3308      	adds	r3, #8
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8002996:	4a18      	ldr	r2, [pc, #96]	@ (80029f8 <app_init+0x130>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2100      	movs	r1, #0
 800299c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3301      	adds	r3, #1
 80029a4:	607b      	str	r3, [r7, #4]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d9e1      	bls.n	8002970 <app_init+0xa8>
	}

	cycle_counter_init();
 80029ac:	4b13      	ldr	r3, [pc, #76]	@ (80029fc <app_init+0x134>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a12      	ldr	r2, [pc, #72]	@ (80029fc <app_init+0x134>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029b6:	60d3      	str	r3, [r2, #12]
 80029b8:	4b11      	ldr	r3, [pc, #68]	@ (8002a00 <app_init+0x138>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <app_init+0x138>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a00 <app_init+0x138>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	6013      	str	r3, [r2, #0]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd90      	pop	{r4, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	080046cc 	.word	0x080046cc
 80029d8:	080045ec 	.word	0x080045ec
 80029dc:	200001bc 	.word	0x200001bc
 80029e0:	080045f0 	.word	0x080045f0
 80029e4:	080045fc 	.word	0x080045fc
 80029e8:	2000000c 	.word	0x2000000c
 80029ec:	20000010 	.word	0x20000010
 80029f0:	20000168 	.word	0x20000168
 80029f4:	080046b4 	.word	0x080046b4
 80029f8:	20000174 	.word	0x20000174
 80029fc:	e000edf0 	.word	0xe000edf0
 8002a00:	e0001000 	.word	0xe0001000

08002a04 <app_update>:

void app_update(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8002a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ab4 <app_update+0xb0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d04c      	beq.n	8002aac <app_update+0xa8>
    {
    	g_app_tick_cnt--;
 8002a12:	4b28      	ldr	r3, [pc, #160]	@ (8002ab4 <app_update+0xb0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	4a26      	ldr	r2, [pc, #152]	@ (8002ab4 <app_update+0xb0>)
 8002a1a:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8002a1c:	4b26      	ldr	r3, [pc, #152]	@ (8002ab8 <app_update+0xb4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	4a25      	ldr	r2, [pc, #148]	@ (8002ab8 <app_update+0xb4>)
 8002a24:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8002a26:	4b25      	ldr	r3, [pc, #148]	@ (8002abc <app_update+0xb8>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

		/* Print out: Application execution counter */
		//LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);

		/* Go through the task arrays */
		for (index = 0; TASK_QTY > index; index++)
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e039      	b.n	8002aa6 <app_update+0xa2>
		{
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
			cycle_counter_reset();
 8002a32:	4b23      	ldr	r3, [pc, #140]	@ (8002ac0 <app_update+0xbc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	605a      	str	r2, [r3, #4]
			 * A function call is a statement that instructs the compiler to execute
			 * the function.
			 * We use the function name and parameters in the function call.
			 */
			/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8002a38:	4922      	ldr	r1, [pc, #136]	@ (8002ac4 <app_update+0xc0>)
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	3304      	adds	r3, #4
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	481e      	ldr	r0, [pc, #120]	@ (8002ac4 <app_update+0xc0>)
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4403      	add	r3, r0
 8002a58:	3308      	adds	r3, #8
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	4788      	blx	r1

			cycle_counter = cycle_counter_get();
 8002a60:	4b17      	ldr	r3, [pc, #92]	@ (8002ac0 <app_update+0xbc>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60bb      	str	r3, [r7, #8]
			cycle_counter_time_us = cycle_counter_time_us();
 8002a66:	4b16      	ldr	r3, [pc, #88]	@ (8002ac0 <app_update+0xbc>)
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4b17      	ldr	r3, [pc, #92]	@ (8002ac8 <app_update+0xc4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4917      	ldr	r1, [pc, #92]	@ (8002acc <app_update+0xc8>)
 8002a70:	fba1 1303 	umull	r1, r3, r1, r3
 8002a74:	0c9b      	lsrs	r3, r3, #18
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	607b      	str	r3, [r7, #4]
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);

			/* Update variables */
			g_app_time_us += cycle_counter_time_us;
 8002a7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002abc <app_update+0xb8>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a0d      	ldr	r2, [pc, #52]	@ (8002abc <app_update+0xb8>)
 8002a86:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8002a88:	4a11      	ldr	r2, [pc, #68]	@ (8002ad0 <app_update+0xcc>)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d904      	bls.n	8002aa0 <app_update+0x9c>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8002a96:	490e      	ldr	r1, [pc, #56]	@ (8002ad0 <app_update+0xcc>)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (index = 0; TASK_QTY > index; index++)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d9c2      	bls.n	8002a32 <app_update+0x2e>
			/* Print out: Cycle Counter */
			//LOGGER_LOG(" %s: %lu - %s: %lu uS\r\n", GET_NAME(cycle_counter), cycle_counter, GET_NAME(cycle_counter_time_us), cycle_counter_time_us);
			//LOGGER_LOG(" %s: %lu uS\r\n", GET_NAME(g_app_time_us), g_app_time_us);
		}
    }
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	20000170 	.word	0x20000170
 8002ab8:	20000168 	.word	0x20000168
 8002abc:	2000016c 	.word	0x2000016c
 8002ac0:	e0001000 	.word	0xe0001000
 8002ac4:	080046b4 	.word	0x080046b4
 8002ac8:	20000000 	.word	0x20000000
 8002acc:	431bde83 	.word	0x431bde83
 8002ad0:	20000174 	.word	0x20000174

08002ad4 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fda1 	bl	8003624 <iprintf>
	fflush(stdout);
 8002ae2:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <logger_log_print_+0x24>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f000 fcc5 	bl	8003478 <fflush>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000034 	.word	0x20000034

08002afc <task_adc_init>:


/********************** external functions definition ************************/

void task_adc_init(void *parameters)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_adc_init), p_task_adc);
 8002b04:	b672      	cpsid	i
 8002b06:	4b13      	ldr	r3, [pc, #76]	@ (8002b54 <task_adc_init+0x58>)
 8002b08:	6818      	ldr	r0, [r3, #0]
 8002b0a:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <task_adc_init+0x5c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <task_adc_init+0x60>)
 8002b12:	4a13      	ldr	r2, [pc, #76]	@ (8002b60 <task_adc_init+0x64>)
 8002b14:	213f      	movs	r1, #63	@ 0x3f
 8002b16:	f000 fd97 	bl	8003648 <sniprintf>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4a11      	ldr	r2, [pc, #68]	@ (8002b64 <task_adc_init+0x68>)
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <task_adc_init+0x58>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ffd5 	bl	8002ad4 <logger_log_print_>
 8002b2a:	b662      	cpsie	i
	HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2102      	movs	r1, #2
 8002b30:	2012      	movs	r0, #18
 8002b32:	f7fe faa0 	bl	8001076 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002b36:	2012      	movs	r0, #18
 8002b38:	f7fe fab9 	bl	80010ae <HAL_NVIC_EnableIRQ>
	sample_idx = 0;
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b68 <task_adc_init+0x6c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	801a      	strh	r2, [r3, #0]
	tickstart = HAL_GetTick();
 8002b42:	f7fd fe95 	bl	8000870 <HAL_GetTick>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4a08      	ldr	r2, [pc, #32]	@ (8002b6c <task_adc_init+0x70>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	080046cc 	.word	0x080046cc
 8002b58:	20000014 	.word	0x20000014
 8002b5c:	0800462c 	.word	0x0800462c
 8002b60:	0800463c 	.word	0x0800463c
 8002b64:	200001bc 	.word	0x200001bc
 8002b68:	200001c4 	.word	0x200001c4
 8002b6c:	200001c0 	.word	0x200001c0

08002b70 <task_adc_update>:

void task_adc_update(void *parameters)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	static bool b_test_done = false;
	if (!b_test_done){
 8002b78:	4b08      	ldr	r3, [pc, #32]	@ (8002b9c <task_adc_update+0x2c>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f083 0301 	eor.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d005      	beq.n	8002b92 <task_adc_update+0x22>
		b_test_done = test3_tick();
 8002b86:	f000 f80b 	bl	8002ba0 <test3_tick>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <task_adc_update+0x2c>)
 8002b90:	701a      	strb	r2, [r3, #0]
	}
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200001dd 	.word	0x200001dd

08002ba0 <test3_tick>:


bool test3_tick() {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0

	bool b_done = false;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	71fb      	strb	r3, [r7, #7]

	if (sample_idx>=SAMPLES_COUNTER) {
 8002baa:	4b15      	ldr	r3, [pc, #84]	@ (8002c00 <test3_tick+0x60>)
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	2b09      	cmp	r3, #9
 8002bb0:	d902      	bls.n	8002bb8 <test3_tick+0x18>
		b_done = true;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	71fb      	strb	r3, [r7, #7]
		goto test3_tick_end;
 8002bb6:	e012      	b.n	8002bde <test3_tick+0x3e>
	}

	/* start of first conversion */
	if (0==sample_idx) {
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <test3_tick+0x60>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <test3_tick+0x26>
		b_trig_new_conversion = true;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <test3_tick+0x64>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
	}


	if (b_trig_new_conversion) {
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c04 <test3_tick+0x64>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <test3_tick+0x3c>
		b_trig_new_conversion = false;
 8002bce:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <test3_tick+0x64>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8002bd4:	480c      	ldr	r0, [pc, #48]	@ (8002c08 <test3_tick+0x68>)
 8002bd6:	f7fd ff2d 	bl	8000a34 <HAL_ADC_Start_IT>
 8002bda:	e000      	b.n	8002bde <test3_tick+0x3e>
	}

test3_tick_end:
 8002bdc:	bf00      	nop
	if (b_done) {
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <test3_tick+0x56>
		/*for (sample_idx=0;sample_idx<SAMPLES_COUNTER;sample_idx++) {
			LOGGER_LOG("%u\n",sample_array[sample_idx] );
		}*/
		uint16_t prom = promedio(sample_array);
 8002be4:	4809      	ldr	r0, [pc, #36]	@ (8002c0c <test3_tick+0x6c>)
 8002be6:	f000 f813 	bl	8002c10 <promedio>
 8002bea:	4603      	mov	r3, r0
 8002bec:	80bb      	strh	r3, [r7, #4]
		cargar_valor_pote(prom);
 8002bee:	88bb      	ldrh	r3, [r7, #4]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f000 f833 	bl	8002c5c <cargar_valor_pote>
	}
	return b_done;
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	200001c4 	.word	0x200001c4
 8002c04:	200001dc 	.word	0x200001dc
 8002c08:	200000a0 	.word	0x200000a0
 8002c0c:	200001c8 	.word	0x200001c8

08002c10 <promedio>:
		}
	}
	return res;
}

uint16_t promedio(uint16_t sample_array[SAMPLES_COUNTER]){
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
	uint16_t averaged = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	81fb      	strh	r3, [r7, #14]
	for(uint16_t averager=0 ; averager<SAMPLES_COUNTER ; averager++){
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	81bb      	strh	r3, [r7, #12]
 8002c20:	e00a      	b.n	8002c38 <promedio+0x28>
		averaged += sample_array[averager];
 8002c22:	89bb      	ldrh	r3, [r7, #12]
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	89fb      	ldrh	r3, [r7, #14]
 8002c2e:	4413      	add	r3, r2
 8002c30:	81fb      	strh	r3, [r7, #14]
	for(uint16_t averager=0 ; averager<SAMPLES_COUNTER ; averager++){
 8002c32:	89bb      	ldrh	r3, [r7, #12]
 8002c34:	3301      	adds	r3, #1
 8002c36:	81bb      	strh	r3, [r7, #12]
 8002c38:	89bb      	ldrh	r3, [r7, #12]
 8002c3a:	2b09      	cmp	r3, #9
 8002c3c:	d9f1      	bls.n	8002c22 <promedio+0x12>
	}
	averaged = averaged / SAMPLES_COUNTER;
 8002c3e:	89fb      	ldrh	r3, [r7, #14]
 8002c40:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <promedio+0x48>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	08db      	lsrs	r3, r3, #3
 8002c48:	81fb      	strh	r3, [r7, #14]
	return averaged;
 8002c4a:	89fb      	ldrh	r3, [r7, #14]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	cccccccd 	.word	0xcccccccd

08002c5c <cargar_valor_pote>:
	valor_pote.flag = false;
	valor_pote.promedio = 0;

}

void cargar_valor_pote(uint16_t valor){
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
	if(valor != valor_pote.promedio){
 8002c66:	4b08      	ldr	r3, [pc, #32]	@ (8002c88 <cargar_valor_pote+0x2c>)
 8002c68:	885b      	ldrh	r3, [r3, #2]
 8002c6a:	88fa      	ldrh	r2, [r7, #6]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d005      	beq.n	8002c7c <cargar_valor_pote+0x20>
		valor_pote.flag = true;
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <cargar_valor_pote+0x2c>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
		valor_pote.promedio = valor;
 8002c76:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <cargar_valor_pote+0x2c>)
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	8053      	strh	r3, [r2, #2]
	}

}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	200001e0 	.word	0x200001e0

08002c8c <get_valor_pote>:

uint16_t get_valor_pote(){
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
	valor_pote.flag = false;
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <get_valor_pote+0x18>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	701a      	strb	r2, [r3, #0]
	return valor_pote.promedio;
 8002c96:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <get_valor_pote+0x18>)
 8002c98:	885b      	ldrh	r3, [r3, #2]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	200001e0 	.word	0x200001e0

08002ca8 <task_pwm_init>:
/********************** external data declaration *****************************/
extern TIM_HandleTypeDef htim3;

/********************** external functions definition ************************/
void task_pwm_init(void *parameters)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af02      	add	r7, sp, #8
 8002cae:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_pwm_init), p_task_pwm);
 8002cb0:	b672      	cpsid	i
 8002cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <task_pwm_init+0x38>)
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce4 <task_pwm_init+0x3c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <task_pwm_init+0x40>)
 8002cbe:	4a0b      	ldr	r2, [pc, #44]	@ (8002cec <task_pwm_init+0x44>)
 8002cc0:	213f      	movs	r1, #63	@ 0x3f
 8002cc2:	f000 fcc1 	bl	8003648 <sniprintf>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4a09      	ldr	r2, [pc, #36]	@ (8002cf0 <task_pwm_init+0x48>)
 8002cca:	6013      	str	r3, [r2, #0]
 8002ccc:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <task_pwm_init+0x38>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff feff 	bl	8002ad4 <logger_log_print_>
 8002cd6:	b662      	cpsie	i
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	080046cc 	.word	0x080046cc
 8002ce4:	20000018 	.word	0x20000018
 8002ce8:	08004660 	.word	0x08004660
 8002cec:	08004670 	.word	0x08004670
 8002cf0:	200001bc 	.word	0x200001bc

08002cf4 <task_pwm_update>:

void task_pwm_update(void *parameters)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
	test_tick();
 8002cfc:	f000 f804 	bl	8002d08 <test_tick>
}
 8002d00:	bf00      	nop
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <test_tick>:


void test_tick() {
 8002d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0a:	b093      	sub	sp, #76	@ 0x4c
 8002d0c:	af12      	add	r7, sp, #72	@ 0x48
	static uint16_t period=PERIOD;
	static bool first = true;
	static uint32_t tick;
	static int16_t step = STEP;

	if (first) {
 8002d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d88 <test_tick+0x80>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d008      	beq.n	8002d28 <test_tick+0x20>
		first = false;
 8002d16:	4b1c      	ldr	r3, [pc, #112]	@ (8002d88 <test_tick+0x80>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
		tick = HAL_GetTick() + DELAY_TICKS;
 8002d1c:	f7fd fda8 	bl	8000870 <HAL_GetTick>
 8002d20:	4603      	mov	r3, r0
 8002d22:	3304      	adds	r3, #4
 8002d24:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <test_tick+0x84>)
 8002d26:	6013      	str	r3, [r2, #0]
	}
	active = PERIOD - get_valor_pote() *PERIOD/MAX_POTE;
 8002d28:	f7ff ffb0 	bl	8002c8c <get_valor_pote>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4613      	mov	r3, r2
 8002d32:	041b      	lsls	r3, r3, #16
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	da01      	bge.n	8002d3e <test_tick+0x36>
 8002d3a:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8002d3e:	129b      	asrs	r3, r3, #10
 8002d40:	425b      	negs	r3, r3
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	4b11      	ldr	r3, [pc, #68]	@ (8002d90 <test_tick+0x88>)
 8002d4a:	801a      	strh	r2, [r3, #0]
	setPWM(htim3, TIM_CHANNEL_1, period, active);
 8002d4c:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <test_tick+0x8c>)
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	4a0f      	ldr	r2, [pc, #60]	@ (8002d90 <test_tick+0x88>)
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	4e10      	ldr	r6, [pc, #64]	@ (8002d98 <test_tick+0x90>)
 8002d56:	9210      	str	r2, [sp, #64]	@ 0x40
 8002d58:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	930e      	str	r3, [sp, #56]	@ 0x38
 8002d5e:	466d      	mov	r5, sp
 8002d60:	f106 0410 	add.w	r4, r6, #16
 8002d64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002d7c:	f000 f80e 	bl	8002d9c <setPWM>
}
 8002d80:	bf00      	nop
 8002d82:	3704      	adds	r7, #4
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d88:	2000001c 	.word	0x2000001c
 8002d8c:	200001e4 	.word	0x200001e4
 8002d90:	200001e8 	.word	0x200001e8
 8002d94:	2000001e 	.word	0x2000001e
 8002d98:	200000d0 	.word	0x200000d0

08002d9c <setPWM>:


void setPWM(TIM_HandleTypeDef timer,
            uint32_t channel,
            uint16_t period,
            uint16_t pulse) {
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b088      	sub	sp, #32
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8002da8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  HAL_TIM_PWM_Stop(&timer, channel);
 8002dac:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002dae:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002db2:	f7ff f90d 	bl	8001fd0 <HAL_TIM_PWM_Stop>
  TIM_OC_InitTypeDef sConfigOC;
  timer.Init.Period = period;
 8002db6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8002dba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_TIM_PWM_Init(&timer);
 8002dbc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002dc0:	f7ff f814 	bl	8001dec <HAL_TIM_PWM_Init>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dc4:	2360      	movs	r3, #96	@ 0x60
 8002dc6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = pulse;
 8002dc8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8002dcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
  HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002de0:	f7ff f95a 	bl	8002098 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_Start(&timer,channel);
 8002de4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8002de6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002dea:	f7ff f84f 	bl	8001e8c <HAL_TIM_PWM_Start>
}
 8002dee:	bf00      	nop
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002df8:	b004      	add	sp, #16
 8002dfa:	4770      	bx	lr

08002dfc <findslot>:
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8002e28 <findslot+0x2c>)
 8002dfe:	b510      	push	{r4, lr}
 8002e00:	4604      	mov	r4, r0
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	b118      	cbz	r0, 8002e0e <findslot+0x12>
 8002e06:	6a03      	ldr	r3, [r0, #32]
 8002e08:	b90b      	cbnz	r3, 8002e0e <findslot+0x12>
 8002e0a:	f000 fbd5 	bl	80035b8 <__sinit>
 8002e0e:	2c13      	cmp	r4, #19
 8002e10:	d807      	bhi.n	8002e22 <findslot+0x26>
 8002e12:	4806      	ldr	r0, [pc, #24]	@ (8002e2c <findslot+0x30>)
 8002e14:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002e18:	3201      	adds	r2, #1
 8002e1a:	d002      	beq.n	8002e22 <findslot+0x26>
 8002e1c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002e20:	bd10      	pop	{r4, pc}
 8002e22:	2000      	movs	r0, #0
 8002e24:	e7fc      	b.n	8002e20 <findslot+0x24>
 8002e26:	bf00      	nop
 8002e28:	20000034 	.word	0x20000034
 8002e2c:	200001f8 	.word	0x200001f8

08002e30 <error>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	4604      	mov	r4, r0
 8002e34:	f000 fcce 	bl	80037d4 <__errno>
 8002e38:	2613      	movs	r6, #19
 8002e3a:	4605      	mov	r5, r0
 8002e3c:	2700      	movs	r7, #0
 8002e3e:	4630      	mov	r0, r6
 8002e40:	4639      	mov	r1, r7
 8002e42:	beab      	bkpt	0x00ab
 8002e44:	4606      	mov	r6, r0
 8002e46:	4620      	mov	r0, r4
 8002e48:	602e      	str	r6, [r5, #0]
 8002e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002e4c <checkerror>:
 8002e4c:	1c43      	adds	r3, r0, #1
 8002e4e:	d101      	bne.n	8002e54 <checkerror+0x8>
 8002e50:	f7ff bfee 	b.w	8002e30 <error>
 8002e54:	4770      	bx	lr

08002e56 <_swiread>:
 8002e56:	b530      	push	{r4, r5, lr}
 8002e58:	b085      	sub	sp, #20
 8002e5a:	2406      	movs	r4, #6
 8002e5c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002e60:	9203      	str	r2, [sp, #12]
 8002e62:	ad01      	add	r5, sp, #4
 8002e64:	4620      	mov	r0, r4
 8002e66:	4629      	mov	r1, r5
 8002e68:	beab      	bkpt	0x00ab
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff ffed 	bl	8002e4c <checkerror>
 8002e72:	b005      	add	sp, #20
 8002e74:	bd30      	pop	{r4, r5, pc}

08002e76 <_read>:
 8002e76:	b570      	push	{r4, r5, r6, lr}
 8002e78:	460e      	mov	r6, r1
 8002e7a:	4614      	mov	r4, r2
 8002e7c:	f7ff ffbe 	bl	8002dfc <findslot>
 8002e80:	4605      	mov	r5, r0
 8002e82:	b930      	cbnz	r0, 8002e92 <_read+0x1c>
 8002e84:	f000 fca6 	bl	80037d4 <__errno>
 8002e88:	2309      	movs	r3, #9
 8002e8a:	6003      	str	r3, [r0, #0]
 8002e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
 8002e92:	4622      	mov	r2, r4
 8002e94:	4631      	mov	r1, r6
 8002e96:	6800      	ldr	r0, [r0, #0]
 8002e98:	f7ff ffdd 	bl	8002e56 <_swiread>
 8002e9c:	1c43      	adds	r3, r0, #1
 8002e9e:	d0f5      	beq.n	8002e8c <_read+0x16>
 8002ea0:	686b      	ldr	r3, [r5, #4]
 8002ea2:	1a20      	subs	r0, r4, r0
 8002ea4:	4403      	add	r3, r0
 8002ea6:	606b      	str	r3, [r5, #4]
 8002ea8:	e7f2      	b.n	8002e90 <_read+0x1a>

08002eaa <_swilseek>:
 8002eaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eac:	460c      	mov	r4, r1
 8002eae:	4616      	mov	r6, r2
 8002eb0:	f7ff ffa4 	bl	8002dfc <findslot>
 8002eb4:	4605      	mov	r5, r0
 8002eb6:	b940      	cbnz	r0, 8002eca <_swilseek+0x20>
 8002eb8:	f000 fc8c 	bl	80037d4 <__errno>
 8002ebc:	2309      	movs	r3, #9
 8002ebe:	6003      	str	r3, [r0, #0]
 8002ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	b003      	add	sp, #12
 8002ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eca:	2e02      	cmp	r6, #2
 8002ecc:	d903      	bls.n	8002ed6 <_swilseek+0x2c>
 8002ece:	f000 fc81 	bl	80037d4 <__errno>
 8002ed2:	2316      	movs	r3, #22
 8002ed4:	e7f3      	b.n	8002ebe <_swilseek+0x14>
 8002ed6:	2e01      	cmp	r6, #1
 8002ed8:	d112      	bne.n	8002f00 <_swilseek+0x56>
 8002eda:	6843      	ldr	r3, [r0, #4]
 8002edc:	18e4      	adds	r4, r4, r3
 8002ede:	d4f6      	bmi.n	8002ece <_swilseek+0x24>
 8002ee0:	682b      	ldr	r3, [r5, #0]
 8002ee2:	260a      	movs	r6, #10
 8002ee4:	466f      	mov	r7, sp
 8002ee6:	e9cd 3400 	strd	r3, r4, [sp]
 8002eea:	4630      	mov	r0, r6
 8002eec:	4639      	mov	r1, r7
 8002eee:	beab      	bkpt	0x00ab
 8002ef0:	4606      	mov	r6, r0
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f7ff ffaa 	bl	8002e4c <checkerror>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	dbe1      	blt.n	8002ec0 <_swilseek+0x16>
 8002efc:	606c      	str	r4, [r5, #4]
 8002efe:	e7e1      	b.n	8002ec4 <_swilseek+0x1a>
 8002f00:	2e02      	cmp	r6, #2
 8002f02:	6803      	ldr	r3, [r0, #0]
 8002f04:	d1ec      	bne.n	8002ee0 <_swilseek+0x36>
 8002f06:	260c      	movs	r6, #12
 8002f08:	466f      	mov	r7, sp
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	4639      	mov	r1, r7
 8002f10:	beab      	bkpt	0x00ab
 8002f12:	4606      	mov	r6, r0
 8002f14:	4630      	mov	r0, r6
 8002f16:	f7ff ff99 	bl	8002e4c <checkerror>
 8002f1a:	1c43      	adds	r3, r0, #1
 8002f1c:	d0d0      	beq.n	8002ec0 <_swilseek+0x16>
 8002f1e:	4404      	add	r4, r0
 8002f20:	e7de      	b.n	8002ee0 <_swilseek+0x36>

08002f22 <_lseek>:
 8002f22:	f7ff bfc2 	b.w	8002eaa <_swilseek>

08002f26 <_swiwrite>:
 8002f26:	b530      	push	{r4, r5, lr}
 8002f28:	b085      	sub	sp, #20
 8002f2a:	2405      	movs	r4, #5
 8002f2c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002f30:	9203      	str	r2, [sp, #12]
 8002f32:	ad01      	add	r5, sp, #4
 8002f34:	4620      	mov	r0, r4
 8002f36:	4629      	mov	r1, r5
 8002f38:	beab      	bkpt	0x00ab
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f7ff ff85 	bl	8002e4c <checkerror>
 8002f42:	b005      	add	sp, #20
 8002f44:	bd30      	pop	{r4, r5, pc}

08002f46 <_write>:
 8002f46:	b570      	push	{r4, r5, r6, lr}
 8002f48:	460e      	mov	r6, r1
 8002f4a:	4615      	mov	r5, r2
 8002f4c:	f7ff ff56 	bl	8002dfc <findslot>
 8002f50:	4604      	mov	r4, r0
 8002f52:	b930      	cbnz	r0, 8002f62 <_write+0x1c>
 8002f54:	f000 fc3e 	bl	80037d4 <__errno>
 8002f58:	2309      	movs	r3, #9
 8002f5a:	6003      	str	r3, [r0, #0]
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f60:	bd70      	pop	{r4, r5, r6, pc}
 8002f62:	462a      	mov	r2, r5
 8002f64:	4631      	mov	r1, r6
 8002f66:	6800      	ldr	r0, [r0, #0]
 8002f68:	f7ff ffdd 	bl	8002f26 <_swiwrite>
 8002f6c:	1e03      	subs	r3, r0, #0
 8002f6e:	dbf5      	blt.n	8002f5c <_write+0x16>
 8002f70:	6862      	ldr	r2, [r4, #4]
 8002f72:	1ae8      	subs	r0, r5, r3
 8002f74:	4402      	add	r2, r0
 8002f76:	42ab      	cmp	r3, r5
 8002f78:	6062      	str	r2, [r4, #4]
 8002f7a:	d1f1      	bne.n	8002f60 <_write+0x1a>
 8002f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7ff bf55 	b.w	8002e30 <error>

08002f86 <_swiclose>:
 8002f86:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f88:	2402      	movs	r4, #2
 8002f8a:	9001      	str	r0, [sp, #4]
 8002f8c:	ad01      	add	r5, sp, #4
 8002f8e:	4620      	mov	r0, r4
 8002f90:	4629      	mov	r1, r5
 8002f92:	beab      	bkpt	0x00ab
 8002f94:	4604      	mov	r4, r0
 8002f96:	4620      	mov	r0, r4
 8002f98:	f7ff ff58 	bl	8002e4c <checkerror>
 8002f9c:	b003      	add	sp, #12
 8002f9e:	bd30      	pop	{r4, r5, pc}

08002fa0 <_close>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	4605      	mov	r5, r0
 8002fa4:	f7ff ff2a 	bl	8002dfc <findslot>
 8002fa8:	4604      	mov	r4, r0
 8002faa:	b930      	cbnz	r0, 8002fba <_close+0x1a>
 8002fac:	f000 fc12 	bl	80037d4 <__errno>
 8002fb0:	2309      	movs	r3, #9
 8002fb2:	6003      	str	r3, [r0, #0]
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	bd38      	pop	{r3, r4, r5, pc}
 8002fba:	3d01      	subs	r5, #1
 8002fbc:	2d01      	cmp	r5, #1
 8002fbe:	d809      	bhi.n	8002fd4 <_close+0x34>
 8002fc0:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <_close+0x40>)
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d104      	bne.n	8002fd4 <_close+0x34>
 8002fca:	f04f 33ff 	mov.w	r3, #4294967295
 8002fce:	2000      	movs	r0, #0
 8002fd0:	6023      	str	r3, [r4, #0]
 8002fd2:	e7f1      	b.n	8002fb8 <_close+0x18>
 8002fd4:	6820      	ldr	r0, [r4, #0]
 8002fd6:	f7ff ffd6 	bl	8002f86 <_swiclose>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d0f5      	beq.n	8002fca <_close+0x2a>
 8002fde:	e7eb      	b.n	8002fb8 <_close+0x18>
 8002fe0:	200001f8 	.word	0x200001f8

08002fe4 <_swistat>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	460c      	mov	r4, r1
 8002fe8:	f7ff ff08 	bl	8002dfc <findslot>
 8002fec:	4605      	mov	r5, r0
 8002fee:	b930      	cbnz	r0, 8002ffe <_swistat+0x1a>
 8002ff0:	f000 fbf0 	bl	80037d4 <__errno>
 8002ff4:	2309      	movs	r3, #9
 8002ff6:	6003      	str	r3, [r0, #0]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	bd70      	pop	{r4, r5, r6, pc}
 8002ffe:	6863      	ldr	r3, [r4, #4]
 8003000:	260c      	movs	r6, #12
 8003002:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003006:	6063      	str	r3, [r4, #4]
 8003008:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800300c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800300e:	4630      	mov	r0, r6
 8003010:	4629      	mov	r1, r5
 8003012:	beab      	bkpt	0x00ab
 8003014:	4605      	mov	r5, r0
 8003016:	4628      	mov	r0, r5
 8003018:	f7ff ff18 	bl	8002e4c <checkerror>
 800301c:	1c43      	adds	r3, r0, #1
 800301e:	d0eb      	beq.n	8002ff8 <_swistat+0x14>
 8003020:	6120      	str	r0, [r4, #16]
 8003022:	2000      	movs	r0, #0
 8003024:	e7ea      	b.n	8002ffc <_swistat+0x18>

08003026 <_fstat>:
 8003026:	460b      	mov	r3, r1
 8003028:	b510      	push	{r4, lr}
 800302a:	2100      	movs	r1, #0
 800302c:	4604      	mov	r4, r0
 800302e:	2258      	movs	r2, #88	@ 0x58
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fb80 	bl	8003736 <memset>
 8003036:	4601      	mov	r1, r0
 8003038:	4620      	mov	r0, r4
 800303a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800303e:	f7ff bfd1 	b.w	8002fe4 <_swistat>

08003042 <_stat>:
 8003042:	b538      	push	{r3, r4, r5, lr}
 8003044:	460d      	mov	r5, r1
 8003046:	4604      	mov	r4, r0
 8003048:	2258      	movs	r2, #88	@ 0x58
 800304a:	2100      	movs	r1, #0
 800304c:	4628      	mov	r0, r5
 800304e:	f000 fb72 	bl	8003736 <memset>
 8003052:	4620      	mov	r0, r4
 8003054:	2100      	movs	r1, #0
 8003056:	f000 f811 	bl	800307c <_swiopen>
 800305a:	1c43      	adds	r3, r0, #1
 800305c:	4604      	mov	r4, r0
 800305e:	d00b      	beq.n	8003078 <_stat+0x36>
 8003060:	686b      	ldr	r3, [r5, #4]
 8003062:	4629      	mov	r1, r5
 8003064:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003068:	606b      	str	r3, [r5, #4]
 800306a:	f7ff ffbb 	bl	8002fe4 <_swistat>
 800306e:	4605      	mov	r5, r0
 8003070:	4620      	mov	r0, r4
 8003072:	f7ff ff95 	bl	8002fa0 <_close>
 8003076:	462c      	mov	r4, r5
 8003078:	4620      	mov	r0, r4
 800307a:	bd38      	pop	{r3, r4, r5, pc}

0800307c <_swiopen>:
 800307c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003080:	4682      	mov	sl, r0
 8003082:	460e      	mov	r6, r1
 8003084:	2400      	movs	r4, #0
 8003086:	4f28      	ldr	r7, [pc, #160]	@ (8003128 <_swiopen+0xac>)
 8003088:	b096      	sub	sp, #88	@ 0x58
 800308a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800308e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003092:	3301      	adds	r3, #1
 8003094:	d00c      	beq.n	80030b0 <_swiopen+0x34>
 8003096:	3401      	adds	r4, #1
 8003098:	2c14      	cmp	r4, #20
 800309a:	d1f6      	bne.n	800308a <_swiopen+0xe>
 800309c:	f000 fb9a 	bl	80037d4 <__errno>
 80030a0:	2318      	movs	r3, #24
 80030a2:	f04f 34ff 	mov.w	r4, #4294967295
 80030a6:	6003      	str	r3, [r0, #0]
 80030a8:	4620      	mov	r0, r4
 80030aa:	b016      	add	sp, #88	@ 0x58
 80030ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030b0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80030b4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80030b8:	46e9      	mov	r9, sp
 80030ba:	d109      	bne.n	80030d0 <_swiopen+0x54>
 80030bc:	4649      	mov	r1, r9
 80030be:	4650      	mov	r0, sl
 80030c0:	f7ff ffbf 	bl	8003042 <_stat>
 80030c4:	3001      	adds	r0, #1
 80030c6:	d003      	beq.n	80030d0 <_swiopen+0x54>
 80030c8:	f000 fb84 	bl	80037d4 <__errno>
 80030cc:	2311      	movs	r3, #17
 80030ce:	e7e8      	b.n	80030a2 <_swiopen+0x26>
 80030d0:	f240 6301 	movw	r3, #1537	@ 0x601
 80030d4:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80030d8:	07b2      	lsls	r2, r6, #30
 80030da:	bf48      	it	mi
 80030dc:	f045 0502 	orrmi.w	r5, r5, #2
 80030e0:	421e      	tst	r6, r3
 80030e2:	bf18      	it	ne
 80030e4:	f045 0504 	orrne.w	r5, r5, #4
 80030e8:	0733      	lsls	r3, r6, #28
 80030ea:	bf48      	it	mi
 80030ec:	f025 0504 	bicmi.w	r5, r5, #4
 80030f0:	4650      	mov	r0, sl
 80030f2:	bf48      	it	mi
 80030f4:	f045 0508 	orrmi.w	r5, r5, #8
 80030f8:	f8cd a000 	str.w	sl, [sp]
 80030fc:	f7fd f826 	bl	800014c <strlen>
 8003100:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003104:	2501      	movs	r5, #1
 8003106:	4628      	mov	r0, r5
 8003108:	4649      	mov	r1, r9
 800310a:	beab      	bkpt	0x00ab
 800310c:	4605      	mov	r5, r0
 800310e:	2d00      	cmp	r5, #0
 8003110:	db05      	blt.n	800311e <_swiopen+0xa2>
 8003112:	2300      	movs	r3, #0
 8003114:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8003118:	4447      	add	r7, r8
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	e7c4      	b.n	80030a8 <_swiopen+0x2c>
 800311e:	4628      	mov	r0, r5
 8003120:	f7ff fe86 	bl	8002e30 <error>
 8003124:	4604      	mov	r4, r0
 8003126:	e7bf      	b.n	80030a8 <_swiopen+0x2c>
 8003128:	200001f8 	.word	0x200001f8

0800312c <_get_semihosting_exts>:
 800312c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003130:	4606      	mov	r6, r0
 8003132:	460f      	mov	r7, r1
 8003134:	4829      	ldr	r0, [pc, #164]	@ (80031dc <_get_semihosting_exts+0xb0>)
 8003136:	2100      	movs	r1, #0
 8003138:	4615      	mov	r5, r2
 800313a:	f7ff ff9f 	bl	800307c <_swiopen>
 800313e:	4604      	mov	r4, r0
 8003140:	462a      	mov	r2, r5
 8003142:	2100      	movs	r1, #0
 8003144:	4630      	mov	r0, r6
 8003146:	f000 faf6 	bl	8003736 <memset>
 800314a:	1c63      	adds	r3, r4, #1
 800314c:	d014      	beq.n	8003178 <_get_semihosting_exts+0x4c>
 800314e:	4620      	mov	r0, r4
 8003150:	f7ff fe54 	bl	8002dfc <findslot>
 8003154:	f04f 080c 	mov.w	r8, #12
 8003158:	4681      	mov	r9, r0
 800315a:	4640      	mov	r0, r8
 800315c:	4649      	mov	r1, r9
 800315e:	beab      	bkpt	0x00ab
 8003160:	4680      	mov	r8, r0
 8003162:	4640      	mov	r0, r8
 8003164:	f7ff fe72 	bl	8002e4c <checkerror>
 8003168:	2803      	cmp	r0, #3
 800316a:	dd02      	ble.n	8003172 <_get_semihosting_exts+0x46>
 800316c:	1ec3      	subs	r3, r0, #3
 800316e:	42ab      	cmp	r3, r5
 8003170:	dc07      	bgt.n	8003182 <_get_semihosting_exts+0x56>
 8003172:	4620      	mov	r0, r4
 8003174:	f7ff ff14 	bl	8002fa0 <_close>
 8003178:	f04f 30ff 	mov.w	r0, #4294967295
 800317c:	b003      	add	sp, #12
 800317e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003182:	2204      	movs	r2, #4
 8003184:	4620      	mov	r0, r4
 8003186:	eb0d 0102 	add.w	r1, sp, r2
 800318a:	f7ff fe74 	bl	8002e76 <_read>
 800318e:	2803      	cmp	r0, #3
 8003190:	ddef      	ble.n	8003172 <_get_semihosting_exts+0x46>
 8003192:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003196:	2b53      	cmp	r3, #83	@ 0x53
 8003198:	d1eb      	bne.n	8003172 <_get_semihosting_exts+0x46>
 800319a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800319e:	2b48      	cmp	r3, #72	@ 0x48
 80031a0:	d1e7      	bne.n	8003172 <_get_semihosting_exts+0x46>
 80031a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80031a6:	2b46      	cmp	r3, #70	@ 0x46
 80031a8:	d1e3      	bne.n	8003172 <_get_semihosting_exts+0x46>
 80031aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80031ae:	2b42      	cmp	r3, #66	@ 0x42
 80031b0:	d1df      	bne.n	8003172 <_get_semihosting_exts+0x46>
 80031b2:	2201      	movs	r2, #1
 80031b4:	4639      	mov	r1, r7
 80031b6:	4620      	mov	r0, r4
 80031b8:	f7ff fe77 	bl	8002eaa <_swilseek>
 80031bc:	2800      	cmp	r0, #0
 80031be:	dbd8      	blt.n	8003172 <_get_semihosting_exts+0x46>
 80031c0:	462a      	mov	r2, r5
 80031c2:	4631      	mov	r1, r6
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7ff fe56 	bl	8002e76 <_read>
 80031ca:	4605      	mov	r5, r0
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff fee7 	bl	8002fa0 <_close>
 80031d2:	4628      	mov	r0, r5
 80031d4:	f7ff fe3a 	bl	8002e4c <checkerror>
 80031d8:	e7d0      	b.n	800317c <_get_semihosting_exts+0x50>
 80031da:	bf00      	nop
 80031dc:	080046d0 	.word	0x080046d0

080031e0 <initialise_semihosting_exts>:
 80031e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031e2:	2100      	movs	r1, #0
 80031e4:	2201      	movs	r2, #1
 80031e6:	4d09      	ldr	r5, [pc, #36]	@ (800320c <initialise_semihosting_exts+0x2c>)
 80031e8:	4c09      	ldr	r4, [pc, #36]	@ (8003210 <initialise_semihosting_exts+0x30>)
 80031ea:	a801      	add	r0, sp, #4
 80031ec:	6029      	str	r1, [r5, #0]
 80031ee:	6022      	str	r2, [r4, #0]
 80031f0:	f7ff ff9c 	bl	800312c <_get_semihosting_exts>
 80031f4:	2800      	cmp	r0, #0
 80031f6:	dd07      	ble.n	8003208 <initialise_semihosting_exts+0x28>
 80031f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80031fc:	f003 0201 	and.w	r2, r3, #1
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	602a      	str	r2, [r5, #0]
 8003206:	6023      	str	r3, [r4, #0]
 8003208:	b003      	add	sp, #12
 800320a:	bd30      	pop	{r4, r5, pc}
 800320c:	20000024 	.word	0x20000024
 8003210:	20000020 	.word	0x20000020

08003214 <_has_ext_stdout_stderr>:
 8003214:	b510      	push	{r4, lr}
 8003216:	4c04      	ldr	r4, [pc, #16]	@ (8003228 <_has_ext_stdout_stderr+0x14>)
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	da01      	bge.n	8003222 <_has_ext_stdout_stderr+0xe>
 800321e:	f7ff ffdf 	bl	80031e0 <initialise_semihosting_exts>
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	bd10      	pop	{r4, pc}
 8003226:	bf00      	nop
 8003228:	20000020 	.word	0x20000020

0800322c <initialise_monitor_handles>:
 800322c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003230:	2303      	movs	r3, #3
 8003232:	2400      	movs	r4, #0
 8003234:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 80032d8 <initialise_monitor_handles+0xac>
 8003238:	b085      	sub	sp, #20
 800323a:	f8cd 9004 	str.w	r9, [sp, #4]
 800323e:	af01      	add	r7, sp, #4
 8003240:	9303      	str	r3, [sp, #12]
 8003242:	2501      	movs	r5, #1
 8003244:	9402      	str	r4, [sp, #8]
 8003246:	4628      	mov	r0, r5
 8003248:	4639      	mov	r1, r7
 800324a:	beab      	bkpt	0x00ab
 800324c:	4605      	mov	r5, r0
 800324e:	f04f 32ff 	mov.w	r2, #4294967295
 8003252:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80032dc <initialise_monitor_handles+0xb0>
 8003256:	4623      	mov	r3, r4
 8003258:	4c21      	ldr	r4, [pc, #132]	@ (80032e0 <initialise_monitor_handles+0xb4>)
 800325a:	f8c8 5000 	str.w	r5, [r8]
 800325e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003262:	3301      	adds	r3, #1
 8003264:	2b14      	cmp	r3, #20
 8003266:	d1fa      	bne.n	800325e <initialise_monitor_handles+0x32>
 8003268:	f7ff ffd4 	bl	8003214 <_has_ext_stdout_stderr>
 800326c:	4d1d      	ldr	r5, [pc, #116]	@ (80032e4 <initialise_monitor_handles+0xb8>)
 800326e:	b1d0      	cbz	r0, 80032a6 <initialise_monitor_handles+0x7a>
 8003270:	f04f 0a03 	mov.w	sl, #3
 8003274:	2304      	movs	r3, #4
 8003276:	f8cd 9004 	str.w	r9, [sp, #4]
 800327a:	2601      	movs	r6, #1
 800327c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003280:	9302      	str	r3, [sp, #8]
 8003282:	4630      	mov	r0, r6
 8003284:	4639      	mov	r1, r7
 8003286:	beab      	bkpt	0x00ab
 8003288:	4683      	mov	fp, r0
 800328a:	4b17      	ldr	r3, [pc, #92]	@ (80032e8 <initialise_monitor_handles+0xbc>)
 800328c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003290:	f8c3 b000 	str.w	fp, [r3]
 8003294:	2308      	movs	r3, #8
 8003296:	f8cd a00c 	str.w	sl, [sp, #12]
 800329a:	9302      	str	r3, [sp, #8]
 800329c:	4630      	mov	r0, r6
 800329e:	4639      	mov	r1, r7
 80032a0:	beab      	bkpt	0x00ab
 80032a2:	4606      	mov	r6, r0
 80032a4:	602e      	str	r6, [r5, #0]
 80032a6:	2600      	movs	r6, #0
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	6066      	str	r6, [r4, #4]
 80032ac:	3301      	adds	r3, #1
 80032ae:	bf02      	ittt	eq
 80032b0:	4b0d      	ldreq	r3, [pc, #52]	@ (80032e8 <initialise_monitor_handles+0xbc>)
 80032b2:	681b      	ldreq	r3, [r3, #0]
 80032b4:	602b      	streq	r3, [r5, #0]
 80032b6:	f8d8 3000 	ldr.w	r3, [r8]
 80032ba:	6023      	str	r3, [r4, #0]
 80032bc:	f7ff ffaa 	bl	8003214 <_has_ext_stdout_stderr>
 80032c0:	b130      	cbz	r0, 80032d0 <initialise_monitor_handles+0xa4>
 80032c2:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <initialise_monitor_handles+0xbc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80032ca:	682b      	ldr	r3, [r5, #0]
 80032cc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80032d0:	b005      	add	sp, #20
 80032d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032d6:	bf00      	nop
 80032d8:	080046e6 	.word	0x080046e6
 80032dc:	200001f4 	.word	0x200001f4
 80032e0:	200001f8 	.word	0x200001f8
 80032e4:	200001ec 	.word	0x200001ec
 80032e8:	200001f0 	.word	0x200001f0

080032ec <_isatty>:
 80032ec:	b570      	push	{r4, r5, r6, lr}
 80032ee:	f7ff fd85 	bl	8002dfc <findslot>
 80032f2:	2409      	movs	r4, #9
 80032f4:	4605      	mov	r5, r0
 80032f6:	b920      	cbnz	r0, 8003302 <_isatty+0x16>
 80032f8:	f000 fa6c 	bl	80037d4 <__errno>
 80032fc:	6004      	str	r4, [r0, #0]
 80032fe:	2000      	movs	r0, #0
 8003300:	bd70      	pop	{r4, r5, r6, pc}
 8003302:	4620      	mov	r0, r4
 8003304:	4629      	mov	r1, r5
 8003306:	beab      	bkpt	0x00ab
 8003308:	4604      	mov	r4, r0
 800330a:	2c01      	cmp	r4, #1
 800330c:	4620      	mov	r0, r4
 800330e:	d0f7      	beq.n	8003300 <_isatty+0x14>
 8003310:	f000 fa60 	bl	80037d4 <__errno>
 8003314:	2513      	movs	r5, #19
 8003316:	4604      	mov	r4, r0
 8003318:	2600      	movs	r6, #0
 800331a:	4628      	mov	r0, r5
 800331c:	4631      	mov	r1, r6
 800331e:	beab      	bkpt	0x00ab
 8003320:	4605      	mov	r5, r0
 8003322:	6025      	str	r5, [r4, #0]
 8003324:	e7eb      	b.n	80032fe <_isatty+0x12>
	...

08003328 <__sflush_r>:
 8003328:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332e:	0716      	lsls	r6, r2, #28
 8003330:	4605      	mov	r5, r0
 8003332:	460c      	mov	r4, r1
 8003334:	d454      	bmi.n	80033e0 <__sflush_r+0xb8>
 8003336:	684b      	ldr	r3, [r1, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	dc02      	bgt.n	8003342 <__sflush_r+0x1a>
 800333c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	dd48      	ble.n	80033d4 <__sflush_r+0xac>
 8003342:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003344:	2e00      	cmp	r6, #0
 8003346:	d045      	beq.n	80033d4 <__sflush_r+0xac>
 8003348:	2300      	movs	r3, #0
 800334a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800334e:	682f      	ldr	r7, [r5, #0]
 8003350:	6a21      	ldr	r1, [r4, #32]
 8003352:	602b      	str	r3, [r5, #0]
 8003354:	d030      	beq.n	80033b8 <__sflush_r+0x90>
 8003356:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	0759      	lsls	r1, r3, #29
 800335c:	d505      	bpl.n	800336a <__sflush_r+0x42>
 800335e:	6863      	ldr	r3, [r4, #4]
 8003360:	1ad2      	subs	r2, r2, r3
 8003362:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003364:	b10b      	cbz	r3, 800336a <__sflush_r+0x42>
 8003366:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003368:	1ad2      	subs	r2, r2, r3
 800336a:	2300      	movs	r3, #0
 800336c:	4628      	mov	r0, r5
 800336e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003370:	6a21      	ldr	r1, [r4, #32]
 8003372:	47b0      	blx	r6
 8003374:	1c43      	adds	r3, r0, #1
 8003376:	89a3      	ldrh	r3, [r4, #12]
 8003378:	d106      	bne.n	8003388 <__sflush_r+0x60>
 800337a:	6829      	ldr	r1, [r5, #0]
 800337c:	291d      	cmp	r1, #29
 800337e:	d82b      	bhi.n	80033d8 <__sflush_r+0xb0>
 8003380:	4a28      	ldr	r2, [pc, #160]	@ (8003424 <__sflush_r+0xfc>)
 8003382:	410a      	asrs	r2, r1
 8003384:	07d6      	lsls	r6, r2, #31
 8003386:	d427      	bmi.n	80033d8 <__sflush_r+0xb0>
 8003388:	2200      	movs	r2, #0
 800338a:	6062      	str	r2, [r4, #4]
 800338c:	6922      	ldr	r2, [r4, #16]
 800338e:	04d9      	lsls	r1, r3, #19
 8003390:	6022      	str	r2, [r4, #0]
 8003392:	d504      	bpl.n	800339e <__sflush_r+0x76>
 8003394:	1c42      	adds	r2, r0, #1
 8003396:	d101      	bne.n	800339c <__sflush_r+0x74>
 8003398:	682b      	ldr	r3, [r5, #0]
 800339a:	b903      	cbnz	r3, 800339e <__sflush_r+0x76>
 800339c:	6560      	str	r0, [r4, #84]	@ 0x54
 800339e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80033a0:	602f      	str	r7, [r5, #0]
 80033a2:	b1b9      	cbz	r1, 80033d4 <__sflush_r+0xac>
 80033a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80033a8:	4299      	cmp	r1, r3
 80033aa:	d002      	beq.n	80033b2 <__sflush_r+0x8a>
 80033ac:	4628      	mov	r0, r5
 80033ae:	f000 fa3f 	bl	8003830 <_free_r>
 80033b2:	2300      	movs	r3, #0
 80033b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80033b6:	e00d      	b.n	80033d4 <__sflush_r+0xac>
 80033b8:	2301      	movs	r3, #1
 80033ba:	4628      	mov	r0, r5
 80033bc:	47b0      	blx	r6
 80033be:	4602      	mov	r2, r0
 80033c0:	1c50      	adds	r0, r2, #1
 80033c2:	d1c9      	bne.n	8003358 <__sflush_r+0x30>
 80033c4:	682b      	ldr	r3, [r5, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0c6      	beq.n	8003358 <__sflush_r+0x30>
 80033ca:	2b1d      	cmp	r3, #29
 80033cc:	d001      	beq.n	80033d2 <__sflush_r+0xaa>
 80033ce:	2b16      	cmp	r3, #22
 80033d0:	d11d      	bne.n	800340e <__sflush_r+0xe6>
 80033d2:	602f      	str	r7, [r5, #0]
 80033d4:	2000      	movs	r0, #0
 80033d6:	e021      	b.n	800341c <__sflush_r+0xf4>
 80033d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033dc:	b21b      	sxth	r3, r3
 80033de:	e01a      	b.n	8003416 <__sflush_r+0xee>
 80033e0:	690f      	ldr	r7, [r1, #16]
 80033e2:	2f00      	cmp	r7, #0
 80033e4:	d0f6      	beq.n	80033d4 <__sflush_r+0xac>
 80033e6:	0793      	lsls	r3, r2, #30
 80033e8:	bf18      	it	ne
 80033ea:	2300      	movne	r3, #0
 80033ec:	680e      	ldr	r6, [r1, #0]
 80033ee:	bf08      	it	eq
 80033f0:	694b      	ldreq	r3, [r1, #20]
 80033f2:	1bf6      	subs	r6, r6, r7
 80033f4:	600f      	str	r7, [r1, #0]
 80033f6:	608b      	str	r3, [r1, #8]
 80033f8:	2e00      	cmp	r6, #0
 80033fa:	ddeb      	ble.n	80033d4 <__sflush_r+0xac>
 80033fc:	4633      	mov	r3, r6
 80033fe:	463a      	mov	r2, r7
 8003400:	4628      	mov	r0, r5
 8003402:	6a21      	ldr	r1, [r4, #32]
 8003404:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003408:	47e0      	blx	ip
 800340a:	2800      	cmp	r0, #0
 800340c:	dc07      	bgt.n	800341e <__sflush_r+0xf6>
 800340e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003416:	f04f 30ff 	mov.w	r0, #4294967295
 800341a:	81a3      	strh	r3, [r4, #12]
 800341c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800341e:	4407      	add	r7, r0
 8003420:	1a36      	subs	r6, r6, r0
 8003422:	e7e9      	b.n	80033f8 <__sflush_r+0xd0>
 8003424:	dfbffffe 	.word	0xdfbffffe

08003428 <_fflush_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	690b      	ldr	r3, [r1, #16]
 800342c:	4605      	mov	r5, r0
 800342e:	460c      	mov	r4, r1
 8003430:	b913      	cbnz	r3, 8003438 <_fflush_r+0x10>
 8003432:	2500      	movs	r5, #0
 8003434:	4628      	mov	r0, r5
 8003436:	bd38      	pop	{r3, r4, r5, pc}
 8003438:	b118      	cbz	r0, 8003442 <_fflush_r+0x1a>
 800343a:	6a03      	ldr	r3, [r0, #32]
 800343c:	b90b      	cbnz	r3, 8003442 <_fflush_r+0x1a>
 800343e:	f000 f8bb 	bl	80035b8 <__sinit>
 8003442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f3      	beq.n	8003432 <_fflush_r+0xa>
 800344a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800344c:	07d0      	lsls	r0, r2, #31
 800344e:	d404      	bmi.n	800345a <_fflush_r+0x32>
 8003450:	0599      	lsls	r1, r3, #22
 8003452:	d402      	bmi.n	800345a <_fflush_r+0x32>
 8003454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003456:	f000 f9e8 	bl	800382a <__retarget_lock_acquire_recursive>
 800345a:	4628      	mov	r0, r5
 800345c:	4621      	mov	r1, r4
 800345e:	f7ff ff63 	bl	8003328 <__sflush_r>
 8003462:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003464:	4605      	mov	r5, r0
 8003466:	07da      	lsls	r2, r3, #31
 8003468:	d4e4      	bmi.n	8003434 <_fflush_r+0xc>
 800346a:	89a3      	ldrh	r3, [r4, #12]
 800346c:	059b      	lsls	r3, r3, #22
 800346e:	d4e1      	bmi.n	8003434 <_fflush_r+0xc>
 8003470:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003472:	f000 f9db 	bl	800382c <__retarget_lock_release_recursive>
 8003476:	e7dd      	b.n	8003434 <_fflush_r+0xc>

08003478 <fflush>:
 8003478:	4601      	mov	r1, r0
 800347a:	b920      	cbnz	r0, 8003486 <fflush+0xe>
 800347c:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <fflush+0x18>)
 800347e:	4905      	ldr	r1, [pc, #20]	@ (8003494 <fflush+0x1c>)
 8003480:	4805      	ldr	r0, [pc, #20]	@ (8003498 <fflush+0x20>)
 8003482:	f000 b8b1 	b.w	80035e8 <_fwalk_sglue>
 8003486:	4b05      	ldr	r3, [pc, #20]	@ (800349c <fflush+0x24>)
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	f7ff bfcd 	b.w	8003428 <_fflush_r>
 800348e:	bf00      	nop
 8003490:	20000028 	.word	0x20000028
 8003494:	08003429 	.word	0x08003429
 8003498:	20000038 	.word	0x20000038
 800349c:	20000034 	.word	0x20000034

080034a0 <std>:
 80034a0:	2300      	movs	r3, #0
 80034a2:	b510      	push	{r4, lr}
 80034a4:	4604      	mov	r4, r0
 80034a6:	e9c0 3300 	strd	r3, r3, [r0]
 80034aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034ae:	6083      	str	r3, [r0, #8]
 80034b0:	8181      	strh	r1, [r0, #12]
 80034b2:	6643      	str	r3, [r0, #100]	@ 0x64
 80034b4:	81c2      	strh	r2, [r0, #14]
 80034b6:	6183      	str	r3, [r0, #24]
 80034b8:	4619      	mov	r1, r3
 80034ba:	2208      	movs	r2, #8
 80034bc:	305c      	adds	r0, #92	@ 0x5c
 80034be:	f000 f93a 	bl	8003736 <memset>
 80034c2:	4b0d      	ldr	r3, [pc, #52]	@ (80034f8 <std+0x58>)
 80034c4:	6224      	str	r4, [r4, #32]
 80034c6:	6263      	str	r3, [r4, #36]	@ 0x24
 80034c8:	4b0c      	ldr	r3, [pc, #48]	@ (80034fc <std+0x5c>)
 80034ca:	62a3      	str	r3, [r4, #40]	@ 0x28
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <std+0x60>)
 80034ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80034d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003504 <std+0x64>)
 80034d2:	6323      	str	r3, [r4, #48]	@ 0x30
 80034d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003508 <std+0x68>)
 80034d6:	429c      	cmp	r4, r3
 80034d8:	d006      	beq.n	80034e8 <std+0x48>
 80034da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80034de:	4294      	cmp	r4, r2
 80034e0:	d002      	beq.n	80034e8 <std+0x48>
 80034e2:	33d0      	adds	r3, #208	@ 0xd0
 80034e4:	429c      	cmp	r4, r3
 80034e6:	d105      	bne.n	80034f4 <std+0x54>
 80034e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80034ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034f0:	f000 b99a 	b.w	8003828 <__retarget_lock_init_recursive>
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	bf00      	nop
 80034f8:	080036b1 	.word	0x080036b1
 80034fc:	080036d3 	.word	0x080036d3
 8003500:	0800370b 	.word	0x0800370b
 8003504:	0800372f 	.word	0x0800372f
 8003508:	20000298 	.word	0x20000298

0800350c <stdio_exit_handler>:
 800350c:	4a02      	ldr	r2, [pc, #8]	@ (8003518 <stdio_exit_handler+0xc>)
 800350e:	4903      	ldr	r1, [pc, #12]	@ (800351c <stdio_exit_handler+0x10>)
 8003510:	4803      	ldr	r0, [pc, #12]	@ (8003520 <stdio_exit_handler+0x14>)
 8003512:	f000 b869 	b.w	80035e8 <_fwalk_sglue>
 8003516:	bf00      	nop
 8003518:	20000028 	.word	0x20000028
 800351c:	08003429 	.word	0x08003429
 8003520:	20000038 	.word	0x20000038

08003524 <cleanup_stdio>:
 8003524:	6841      	ldr	r1, [r0, #4]
 8003526:	4b0c      	ldr	r3, [pc, #48]	@ (8003558 <cleanup_stdio+0x34>)
 8003528:	b510      	push	{r4, lr}
 800352a:	4299      	cmp	r1, r3
 800352c:	4604      	mov	r4, r0
 800352e:	d001      	beq.n	8003534 <cleanup_stdio+0x10>
 8003530:	f7ff ff7a 	bl	8003428 <_fflush_r>
 8003534:	68a1      	ldr	r1, [r4, #8]
 8003536:	4b09      	ldr	r3, [pc, #36]	@ (800355c <cleanup_stdio+0x38>)
 8003538:	4299      	cmp	r1, r3
 800353a:	d002      	beq.n	8003542 <cleanup_stdio+0x1e>
 800353c:	4620      	mov	r0, r4
 800353e:	f7ff ff73 	bl	8003428 <_fflush_r>
 8003542:	68e1      	ldr	r1, [r4, #12]
 8003544:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <cleanup_stdio+0x3c>)
 8003546:	4299      	cmp	r1, r3
 8003548:	d004      	beq.n	8003554 <cleanup_stdio+0x30>
 800354a:	4620      	mov	r0, r4
 800354c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003550:	f7ff bf6a 	b.w	8003428 <_fflush_r>
 8003554:	bd10      	pop	{r4, pc}
 8003556:	bf00      	nop
 8003558:	20000298 	.word	0x20000298
 800355c:	20000300 	.word	0x20000300
 8003560:	20000368 	.word	0x20000368

08003564 <global_stdio_init.part.0>:
 8003564:	b510      	push	{r4, lr}
 8003566:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <global_stdio_init.part.0+0x30>)
 8003568:	4c0b      	ldr	r4, [pc, #44]	@ (8003598 <global_stdio_init.part.0+0x34>)
 800356a:	4a0c      	ldr	r2, [pc, #48]	@ (800359c <global_stdio_init.part.0+0x38>)
 800356c:	4620      	mov	r0, r4
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	2104      	movs	r1, #4
 8003572:	2200      	movs	r2, #0
 8003574:	f7ff ff94 	bl	80034a0 <std>
 8003578:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800357c:	2201      	movs	r2, #1
 800357e:	2109      	movs	r1, #9
 8003580:	f7ff ff8e 	bl	80034a0 <std>
 8003584:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003588:	2202      	movs	r2, #2
 800358a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800358e:	2112      	movs	r1, #18
 8003590:	f7ff bf86 	b.w	80034a0 <std>
 8003594:	200003d0 	.word	0x200003d0
 8003598:	20000298 	.word	0x20000298
 800359c:	0800350d 	.word	0x0800350d

080035a0 <__sfp_lock_acquire>:
 80035a0:	4801      	ldr	r0, [pc, #4]	@ (80035a8 <__sfp_lock_acquire+0x8>)
 80035a2:	f000 b942 	b.w	800382a <__retarget_lock_acquire_recursive>
 80035a6:	bf00      	nop
 80035a8:	200003d9 	.word	0x200003d9

080035ac <__sfp_lock_release>:
 80035ac:	4801      	ldr	r0, [pc, #4]	@ (80035b4 <__sfp_lock_release+0x8>)
 80035ae:	f000 b93d 	b.w	800382c <__retarget_lock_release_recursive>
 80035b2:	bf00      	nop
 80035b4:	200003d9 	.word	0x200003d9

080035b8 <__sinit>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	4604      	mov	r4, r0
 80035bc:	f7ff fff0 	bl	80035a0 <__sfp_lock_acquire>
 80035c0:	6a23      	ldr	r3, [r4, #32]
 80035c2:	b11b      	cbz	r3, 80035cc <__sinit+0x14>
 80035c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035c8:	f7ff bff0 	b.w	80035ac <__sfp_lock_release>
 80035cc:	4b04      	ldr	r3, [pc, #16]	@ (80035e0 <__sinit+0x28>)
 80035ce:	6223      	str	r3, [r4, #32]
 80035d0:	4b04      	ldr	r3, [pc, #16]	@ (80035e4 <__sinit+0x2c>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f5      	bne.n	80035c4 <__sinit+0xc>
 80035d8:	f7ff ffc4 	bl	8003564 <global_stdio_init.part.0>
 80035dc:	e7f2      	b.n	80035c4 <__sinit+0xc>
 80035de:	bf00      	nop
 80035e0:	08003525 	.word	0x08003525
 80035e4:	200003d0 	.word	0x200003d0

080035e8 <_fwalk_sglue>:
 80035e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035ec:	4607      	mov	r7, r0
 80035ee:	4688      	mov	r8, r1
 80035f0:	4614      	mov	r4, r2
 80035f2:	2600      	movs	r6, #0
 80035f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80035f8:	f1b9 0901 	subs.w	r9, r9, #1
 80035fc:	d505      	bpl.n	800360a <_fwalk_sglue+0x22>
 80035fe:	6824      	ldr	r4, [r4, #0]
 8003600:	2c00      	cmp	r4, #0
 8003602:	d1f7      	bne.n	80035f4 <_fwalk_sglue+0xc>
 8003604:	4630      	mov	r0, r6
 8003606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800360a:	89ab      	ldrh	r3, [r5, #12]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d907      	bls.n	8003620 <_fwalk_sglue+0x38>
 8003610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003614:	3301      	adds	r3, #1
 8003616:	d003      	beq.n	8003620 <_fwalk_sglue+0x38>
 8003618:	4629      	mov	r1, r5
 800361a:	4638      	mov	r0, r7
 800361c:	47c0      	blx	r8
 800361e:	4306      	orrs	r6, r0
 8003620:	3568      	adds	r5, #104	@ 0x68
 8003622:	e7e9      	b.n	80035f8 <_fwalk_sglue+0x10>

08003624 <iprintf>:
 8003624:	b40f      	push	{r0, r1, r2, r3}
 8003626:	b507      	push	{r0, r1, r2, lr}
 8003628:	4906      	ldr	r1, [pc, #24]	@ (8003644 <iprintf+0x20>)
 800362a:	ab04      	add	r3, sp, #16
 800362c:	6808      	ldr	r0, [r1, #0]
 800362e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003632:	6881      	ldr	r1, [r0, #8]
 8003634:	9301      	str	r3, [sp, #4]
 8003636:	f000 fb71 	bl	8003d1c <_vfiprintf_r>
 800363a:	b003      	add	sp, #12
 800363c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003640:	b004      	add	sp, #16
 8003642:	4770      	bx	lr
 8003644:	20000034 	.word	0x20000034

08003648 <sniprintf>:
 8003648:	b40c      	push	{r2, r3}
 800364a:	b530      	push	{r4, r5, lr}
 800364c:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <sniprintf+0x64>)
 800364e:	1e0c      	subs	r4, r1, #0
 8003650:	681d      	ldr	r5, [r3, #0]
 8003652:	b09d      	sub	sp, #116	@ 0x74
 8003654:	da08      	bge.n	8003668 <sniprintf+0x20>
 8003656:	238b      	movs	r3, #139	@ 0x8b
 8003658:	f04f 30ff 	mov.w	r0, #4294967295
 800365c:	602b      	str	r3, [r5, #0]
 800365e:	b01d      	add	sp, #116	@ 0x74
 8003660:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003664:	b002      	add	sp, #8
 8003666:	4770      	bx	lr
 8003668:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800366c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003670:	bf0c      	ite	eq
 8003672:	4623      	moveq	r3, r4
 8003674:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003678:	9304      	str	r3, [sp, #16]
 800367a:	9307      	str	r3, [sp, #28]
 800367c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003680:	9002      	str	r0, [sp, #8]
 8003682:	9006      	str	r0, [sp, #24]
 8003684:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003688:	4628      	mov	r0, r5
 800368a:	ab21      	add	r3, sp, #132	@ 0x84
 800368c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800368e:	a902      	add	r1, sp, #8
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	f000 fa1f 	bl	8003ad4 <_svfiprintf_r>
 8003696:	1c43      	adds	r3, r0, #1
 8003698:	bfbc      	itt	lt
 800369a:	238b      	movlt	r3, #139	@ 0x8b
 800369c:	602b      	strlt	r3, [r5, #0]
 800369e:	2c00      	cmp	r4, #0
 80036a0:	d0dd      	beq.n	800365e <sniprintf+0x16>
 80036a2:	2200      	movs	r2, #0
 80036a4:	9b02      	ldr	r3, [sp, #8]
 80036a6:	701a      	strb	r2, [r3, #0]
 80036a8:	e7d9      	b.n	800365e <sniprintf+0x16>
 80036aa:	bf00      	nop
 80036ac:	20000034 	.word	0x20000034

080036b0 <__sread>:
 80036b0:	b510      	push	{r4, lr}
 80036b2:	460c      	mov	r4, r1
 80036b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b8:	f000 f868 	bl	800378c <_read_r>
 80036bc:	2800      	cmp	r0, #0
 80036be:	bfab      	itete	ge
 80036c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80036c2:	89a3      	ldrhlt	r3, [r4, #12]
 80036c4:	181b      	addge	r3, r3, r0
 80036c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80036ca:	bfac      	ite	ge
 80036cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80036ce:	81a3      	strhlt	r3, [r4, #12]
 80036d0:	bd10      	pop	{r4, pc}

080036d2 <__swrite>:
 80036d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d6:	461f      	mov	r7, r3
 80036d8:	898b      	ldrh	r3, [r1, #12]
 80036da:	4605      	mov	r5, r0
 80036dc:	05db      	lsls	r3, r3, #23
 80036de:	460c      	mov	r4, r1
 80036e0:	4616      	mov	r6, r2
 80036e2:	d505      	bpl.n	80036f0 <__swrite+0x1e>
 80036e4:	2302      	movs	r3, #2
 80036e6:	2200      	movs	r2, #0
 80036e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036ec:	f000 f83c 	bl	8003768 <_lseek_r>
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	4632      	mov	r2, r6
 80036f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80036f8:	81a3      	strh	r3, [r4, #12]
 80036fa:	4628      	mov	r0, r5
 80036fc:	463b      	mov	r3, r7
 80036fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003706:	f000 b853 	b.w	80037b0 <_write_r>

0800370a <__sseek>:
 800370a:	b510      	push	{r4, lr}
 800370c:	460c      	mov	r4, r1
 800370e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003712:	f000 f829 	bl	8003768 <_lseek_r>
 8003716:	1c43      	adds	r3, r0, #1
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	bf15      	itete	ne
 800371c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800371e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003722:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003726:	81a3      	strheq	r3, [r4, #12]
 8003728:	bf18      	it	ne
 800372a:	81a3      	strhne	r3, [r4, #12]
 800372c:	bd10      	pop	{r4, pc}

0800372e <__sclose>:
 800372e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003732:	f000 b809 	b.w	8003748 <_close_r>

08003736 <memset>:
 8003736:	4603      	mov	r3, r0
 8003738:	4402      	add	r2, r0
 800373a:	4293      	cmp	r3, r2
 800373c:	d100      	bne.n	8003740 <memset+0xa>
 800373e:	4770      	bx	lr
 8003740:	f803 1b01 	strb.w	r1, [r3], #1
 8003744:	e7f9      	b.n	800373a <memset+0x4>
	...

08003748 <_close_r>:
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	2300      	movs	r3, #0
 800374c:	4d05      	ldr	r5, [pc, #20]	@ (8003764 <_close_r+0x1c>)
 800374e:	4604      	mov	r4, r0
 8003750:	4608      	mov	r0, r1
 8003752:	602b      	str	r3, [r5, #0]
 8003754:	f7ff fc24 	bl	8002fa0 <_close>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d102      	bne.n	8003762 <_close_r+0x1a>
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	b103      	cbz	r3, 8003762 <_close_r+0x1a>
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	bd38      	pop	{r3, r4, r5, pc}
 8003764:	200003d4 	.word	0x200003d4

08003768 <_lseek_r>:
 8003768:	b538      	push	{r3, r4, r5, lr}
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	4611      	mov	r1, r2
 8003770:	2200      	movs	r2, #0
 8003772:	4d05      	ldr	r5, [pc, #20]	@ (8003788 <_lseek_r+0x20>)
 8003774:	602a      	str	r2, [r5, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	f7ff fbd3 	bl	8002f22 <_lseek>
 800377c:	1c43      	adds	r3, r0, #1
 800377e:	d102      	bne.n	8003786 <_lseek_r+0x1e>
 8003780:	682b      	ldr	r3, [r5, #0]
 8003782:	b103      	cbz	r3, 8003786 <_lseek_r+0x1e>
 8003784:	6023      	str	r3, [r4, #0]
 8003786:	bd38      	pop	{r3, r4, r5, pc}
 8003788:	200003d4 	.word	0x200003d4

0800378c <_read_r>:
 800378c:	b538      	push	{r3, r4, r5, lr}
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	2200      	movs	r2, #0
 8003796:	4d05      	ldr	r5, [pc, #20]	@ (80037ac <_read_r+0x20>)
 8003798:	602a      	str	r2, [r5, #0]
 800379a:	461a      	mov	r2, r3
 800379c:	f7ff fb6b 	bl	8002e76 <_read>
 80037a0:	1c43      	adds	r3, r0, #1
 80037a2:	d102      	bne.n	80037aa <_read_r+0x1e>
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	b103      	cbz	r3, 80037aa <_read_r+0x1e>
 80037a8:	6023      	str	r3, [r4, #0]
 80037aa:	bd38      	pop	{r3, r4, r5, pc}
 80037ac:	200003d4 	.word	0x200003d4

080037b0 <_write_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	4608      	mov	r0, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	2200      	movs	r2, #0
 80037ba:	4d05      	ldr	r5, [pc, #20]	@ (80037d0 <_write_r+0x20>)
 80037bc:	602a      	str	r2, [r5, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	f7ff fbc1 	bl	8002f46 <_write>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d102      	bne.n	80037ce <_write_r+0x1e>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	b103      	cbz	r3, 80037ce <_write_r+0x1e>
 80037cc:	6023      	str	r3, [r4, #0]
 80037ce:	bd38      	pop	{r3, r4, r5, pc}
 80037d0:	200003d4 	.word	0x200003d4

080037d4 <__errno>:
 80037d4:	4b01      	ldr	r3, [pc, #4]	@ (80037dc <__errno+0x8>)
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	20000034 	.word	0x20000034

080037e0 <__libc_init_array>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	2600      	movs	r6, #0
 80037e4:	4d0c      	ldr	r5, [pc, #48]	@ (8003818 <__libc_init_array+0x38>)
 80037e6:	4c0d      	ldr	r4, [pc, #52]	@ (800381c <__libc_init_array+0x3c>)
 80037e8:	1b64      	subs	r4, r4, r5
 80037ea:	10a4      	asrs	r4, r4, #2
 80037ec:	42a6      	cmp	r6, r4
 80037ee:	d109      	bne.n	8003804 <__libc_init_array+0x24>
 80037f0:	f000 fed2 	bl	8004598 <_init>
 80037f4:	2600      	movs	r6, #0
 80037f6:	4d0a      	ldr	r5, [pc, #40]	@ (8003820 <__libc_init_array+0x40>)
 80037f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003824 <__libc_init_array+0x44>)
 80037fa:	1b64      	subs	r4, r4, r5
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	42a6      	cmp	r6, r4
 8003800:	d105      	bne.n	800380e <__libc_init_array+0x2e>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	f855 3b04 	ldr.w	r3, [r5], #4
 8003808:	4798      	blx	r3
 800380a:	3601      	adds	r6, #1
 800380c:	e7ee      	b.n	80037ec <__libc_init_array+0xc>
 800380e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003812:	4798      	blx	r3
 8003814:	3601      	adds	r6, #1
 8003816:	e7f2      	b.n	80037fe <__libc_init_array+0x1e>
 8003818:	08004728 	.word	0x08004728
 800381c:	08004728 	.word	0x08004728
 8003820:	08004728 	.word	0x08004728
 8003824:	0800472c 	.word	0x0800472c

08003828 <__retarget_lock_init_recursive>:
 8003828:	4770      	bx	lr

0800382a <__retarget_lock_acquire_recursive>:
 800382a:	4770      	bx	lr

0800382c <__retarget_lock_release_recursive>:
 800382c:	4770      	bx	lr
	...

08003830 <_free_r>:
 8003830:	b538      	push	{r3, r4, r5, lr}
 8003832:	4605      	mov	r5, r0
 8003834:	2900      	cmp	r1, #0
 8003836:	d040      	beq.n	80038ba <_free_r+0x8a>
 8003838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800383c:	1f0c      	subs	r4, r1, #4
 800383e:	2b00      	cmp	r3, #0
 8003840:	bfb8      	it	lt
 8003842:	18e4      	addlt	r4, r4, r3
 8003844:	f000 f8de 	bl	8003a04 <__malloc_lock>
 8003848:	4a1c      	ldr	r2, [pc, #112]	@ (80038bc <_free_r+0x8c>)
 800384a:	6813      	ldr	r3, [r2, #0]
 800384c:	b933      	cbnz	r3, 800385c <_free_r+0x2c>
 800384e:	6063      	str	r3, [r4, #4]
 8003850:	6014      	str	r4, [r2, #0]
 8003852:	4628      	mov	r0, r5
 8003854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003858:	f000 b8da 	b.w	8003a10 <__malloc_unlock>
 800385c:	42a3      	cmp	r3, r4
 800385e:	d908      	bls.n	8003872 <_free_r+0x42>
 8003860:	6820      	ldr	r0, [r4, #0]
 8003862:	1821      	adds	r1, r4, r0
 8003864:	428b      	cmp	r3, r1
 8003866:	bf01      	itttt	eq
 8003868:	6819      	ldreq	r1, [r3, #0]
 800386a:	685b      	ldreq	r3, [r3, #4]
 800386c:	1809      	addeq	r1, r1, r0
 800386e:	6021      	streq	r1, [r4, #0]
 8003870:	e7ed      	b.n	800384e <_free_r+0x1e>
 8003872:	461a      	mov	r2, r3
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	b10b      	cbz	r3, 800387c <_free_r+0x4c>
 8003878:	42a3      	cmp	r3, r4
 800387a:	d9fa      	bls.n	8003872 <_free_r+0x42>
 800387c:	6811      	ldr	r1, [r2, #0]
 800387e:	1850      	adds	r0, r2, r1
 8003880:	42a0      	cmp	r0, r4
 8003882:	d10b      	bne.n	800389c <_free_r+0x6c>
 8003884:	6820      	ldr	r0, [r4, #0]
 8003886:	4401      	add	r1, r0
 8003888:	1850      	adds	r0, r2, r1
 800388a:	4283      	cmp	r3, r0
 800388c:	6011      	str	r1, [r2, #0]
 800388e:	d1e0      	bne.n	8003852 <_free_r+0x22>
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4408      	add	r0, r1
 8003896:	6010      	str	r0, [r2, #0]
 8003898:	6053      	str	r3, [r2, #4]
 800389a:	e7da      	b.n	8003852 <_free_r+0x22>
 800389c:	d902      	bls.n	80038a4 <_free_r+0x74>
 800389e:	230c      	movs	r3, #12
 80038a0:	602b      	str	r3, [r5, #0]
 80038a2:	e7d6      	b.n	8003852 <_free_r+0x22>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	1821      	adds	r1, r4, r0
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1809      	addeq	r1, r1, r0
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	6063      	str	r3, [r4, #4]
 80038b6:	6054      	str	r4, [r2, #4]
 80038b8:	e7cb      	b.n	8003852 <_free_r+0x22>
 80038ba:	bd38      	pop	{r3, r4, r5, pc}
 80038bc:	200003e0 	.word	0x200003e0

080038c0 <sbrk_aligned>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	4e0f      	ldr	r6, [pc, #60]	@ (8003900 <sbrk_aligned+0x40>)
 80038c4:	460c      	mov	r4, r1
 80038c6:	6831      	ldr	r1, [r6, #0]
 80038c8:	4605      	mov	r5, r0
 80038ca:	b911      	cbnz	r1, 80038d2 <sbrk_aligned+0x12>
 80038cc:	f000 fd7e 	bl	80043cc <_sbrk_r>
 80038d0:	6030      	str	r0, [r6, #0]
 80038d2:	4621      	mov	r1, r4
 80038d4:	4628      	mov	r0, r5
 80038d6:	f000 fd79 	bl	80043cc <_sbrk_r>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	d103      	bne.n	80038e6 <sbrk_aligned+0x26>
 80038de:	f04f 34ff 	mov.w	r4, #4294967295
 80038e2:	4620      	mov	r0, r4
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
 80038e6:	1cc4      	adds	r4, r0, #3
 80038e8:	f024 0403 	bic.w	r4, r4, #3
 80038ec:	42a0      	cmp	r0, r4
 80038ee:	d0f8      	beq.n	80038e2 <sbrk_aligned+0x22>
 80038f0:	1a21      	subs	r1, r4, r0
 80038f2:	4628      	mov	r0, r5
 80038f4:	f000 fd6a 	bl	80043cc <_sbrk_r>
 80038f8:	3001      	adds	r0, #1
 80038fa:	d1f2      	bne.n	80038e2 <sbrk_aligned+0x22>
 80038fc:	e7ef      	b.n	80038de <sbrk_aligned+0x1e>
 80038fe:	bf00      	nop
 8003900:	200003dc 	.word	0x200003dc

08003904 <_malloc_r>:
 8003904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003908:	1ccd      	adds	r5, r1, #3
 800390a:	f025 0503 	bic.w	r5, r5, #3
 800390e:	3508      	adds	r5, #8
 8003910:	2d0c      	cmp	r5, #12
 8003912:	bf38      	it	cc
 8003914:	250c      	movcc	r5, #12
 8003916:	2d00      	cmp	r5, #0
 8003918:	4606      	mov	r6, r0
 800391a:	db01      	blt.n	8003920 <_malloc_r+0x1c>
 800391c:	42a9      	cmp	r1, r5
 800391e:	d904      	bls.n	800392a <_malloc_r+0x26>
 8003920:	230c      	movs	r3, #12
 8003922:	6033      	str	r3, [r6, #0]
 8003924:	2000      	movs	r0, #0
 8003926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800392a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a00 <_malloc_r+0xfc>
 800392e:	f000 f869 	bl	8003a04 <__malloc_lock>
 8003932:	f8d8 3000 	ldr.w	r3, [r8]
 8003936:	461c      	mov	r4, r3
 8003938:	bb44      	cbnz	r4, 800398c <_malloc_r+0x88>
 800393a:	4629      	mov	r1, r5
 800393c:	4630      	mov	r0, r6
 800393e:	f7ff ffbf 	bl	80038c0 <sbrk_aligned>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	4604      	mov	r4, r0
 8003946:	d158      	bne.n	80039fa <_malloc_r+0xf6>
 8003948:	f8d8 4000 	ldr.w	r4, [r8]
 800394c:	4627      	mov	r7, r4
 800394e:	2f00      	cmp	r7, #0
 8003950:	d143      	bne.n	80039da <_malloc_r+0xd6>
 8003952:	2c00      	cmp	r4, #0
 8003954:	d04b      	beq.n	80039ee <_malloc_r+0xea>
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	4639      	mov	r1, r7
 800395a:	4630      	mov	r0, r6
 800395c:	eb04 0903 	add.w	r9, r4, r3
 8003960:	f000 fd34 	bl	80043cc <_sbrk_r>
 8003964:	4581      	cmp	r9, r0
 8003966:	d142      	bne.n	80039ee <_malloc_r+0xea>
 8003968:	6821      	ldr	r1, [r4, #0]
 800396a:	4630      	mov	r0, r6
 800396c:	1a6d      	subs	r5, r5, r1
 800396e:	4629      	mov	r1, r5
 8003970:	f7ff ffa6 	bl	80038c0 <sbrk_aligned>
 8003974:	3001      	adds	r0, #1
 8003976:	d03a      	beq.n	80039ee <_malloc_r+0xea>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	442b      	add	r3, r5
 800397c:	6023      	str	r3, [r4, #0]
 800397e:	f8d8 3000 	ldr.w	r3, [r8]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	bb62      	cbnz	r2, 80039e0 <_malloc_r+0xdc>
 8003986:	f8c8 7000 	str.w	r7, [r8]
 800398a:	e00f      	b.n	80039ac <_malloc_r+0xa8>
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	1b52      	subs	r2, r2, r5
 8003990:	d420      	bmi.n	80039d4 <_malloc_r+0xd0>
 8003992:	2a0b      	cmp	r2, #11
 8003994:	d917      	bls.n	80039c6 <_malloc_r+0xc2>
 8003996:	1961      	adds	r1, r4, r5
 8003998:	42a3      	cmp	r3, r4
 800399a:	6025      	str	r5, [r4, #0]
 800399c:	bf18      	it	ne
 800399e:	6059      	strne	r1, [r3, #4]
 80039a0:	6863      	ldr	r3, [r4, #4]
 80039a2:	bf08      	it	eq
 80039a4:	f8c8 1000 	streq.w	r1, [r8]
 80039a8:	5162      	str	r2, [r4, r5]
 80039aa:	604b      	str	r3, [r1, #4]
 80039ac:	4630      	mov	r0, r6
 80039ae:	f000 f82f 	bl	8003a10 <__malloc_unlock>
 80039b2:	f104 000b 	add.w	r0, r4, #11
 80039b6:	1d23      	adds	r3, r4, #4
 80039b8:	f020 0007 	bic.w	r0, r0, #7
 80039bc:	1ac2      	subs	r2, r0, r3
 80039be:	bf1c      	itt	ne
 80039c0:	1a1b      	subne	r3, r3, r0
 80039c2:	50a3      	strne	r3, [r4, r2]
 80039c4:	e7af      	b.n	8003926 <_malloc_r+0x22>
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	42a3      	cmp	r3, r4
 80039ca:	bf0c      	ite	eq
 80039cc:	f8c8 2000 	streq.w	r2, [r8]
 80039d0:	605a      	strne	r2, [r3, #4]
 80039d2:	e7eb      	b.n	80039ac <_malloc_r+0xa8>
 80039d4:	4623      	mov	r3, r4
 80039d6:	6864      	ldr	r4, [r4, #4]
 80039d8:	e7ae      	b.n	8003938 <_malloc_r+0x34>
 80039da:	463c      	mov	r4, r7
 80039dc:	687f      	ldr	r7, [r7, #4]
 80039de:	e7b6      	b.n	800394e <_malloc_r+0x4a>
 80039e0:	461a      	mov	r2, r3
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	42a3      	cmp	r3, r4
 80039e6:	d1fb      	bne.n	80039e0 <_malloc_r+0xdc>
 80039e8:	2300      	movs	r3, #0
 80039ea:	6053      	str	r3, [r2, #4]
 80039ec:	e7de      	b.n	80039ac <_malloc_r+0xa8>
 80039ee:	230c      	movs	r3, #12
 80039f0:	4630      	mov	r0, r6
 80039f2:	6033      	str	r3, [r6, #0]
 80039f4:	f000 f80c 	bl	8003a10 <__malloc_unlock>
 80039f8:	e794      	b.n	8003924 <_malloc_r+0x20>
 80039fa:	6005      	str	r5, [r0, #0]
 80039fc:	e7d6      	b.n	80039ac <_malloc_r+0xa8>
 80039fe:	bf00      	nop
 8003a00:	200003e0 	.word	0x200003e0

08003a04 <__malloc_lock>:
 8003a04:	4801      	ldr	r0, [pc, #4]	@ (8003a0c <__malloc_lock+0x8>)
 8003a06:	f7ff bf10 	b.w	800382a <__retarget_lock_acquire_recursive>
 8003a0a:	bf00      	nop
 8003a0c:	200003d8 	.word	0x200003d8

08003a10 <__malloc_unlock>:
 8003a10:	4801      	ldr	r0, [pc, #4]	@ (8003a18 <__malloc_unlock+0x8>)
 8003a12:	f7ff bf0b 	b.w	800382c <__retarget_lock_release_recursive>
 8003a16:	bf00      	nop
 8003a18:	200003d8 	.word	0x200003d8

08003a1c <__ssputs_r>:
 8003a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a20:	461f      	mov	r7, r3
 8003a22:	688e      	ldr	r6, [r1, #8]
 8003a24:	4682      	mov	sl, r0
 8003a26:	42be      	cmp	r6, r7
 8003a28:	460c      	mov	r4, r1
 8003a2a:	4690      	mov	r8, r2
 8003a2c:	680b      	ldr	r3, [r1, #0]
 8003a2e:	d82d      	bhi.n	8003a8c <__ssputs_r+0x70>
 8003a30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a38:	d026      	beq.n	8003a88 <__ssputs_r+0x6c>
 8003a3a:	6965      	ldr	r5, [r4, #20]
 8003a3c:	6909      	ldr	r1, [r1, #16]
 8003a3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a42:	eba3 0901 	sub.w	r9, r3, r1
 8003a46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a4a:	1c7b      	adds	r3, r7, #1
 8003a4c:	444b      	add	r3, r9
 8003a4e:	106d      	asrs	r5, r5, #1
 8003a50:	429d      	cmp	r5, r3
 8003a52:	bf38      	it	cc
 8003a54:	461d      	movcc	r5, r3
 8003a56:	0553      	lsls	r3, r2, #21
 8003a58:	d527      	bpl.n	8003aaa <__ssputs_r+0x8e>
 8003a5a:	4629      	mov	r1, r5
 8003a5c:	f7ff ff52 	bl	8003904 <_malloc_r>
 8003a60:	4606      	mov	r6, r0
 8003a62:	b360      	cbz	r0, 8003abe <__ssputs_r+0xa2>
 8003a64:	464a      	mov	r2, r9
 8003a66:	6921      	ldr	r1, [r4, #16]
 8003a68:	f000 fcce 	bl	8004408 <memcpy>
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a76:	81a3      	strh	r3, [r4, #12]
 8003a78:	6126      	str	r6, [r4, #16]
 8003a7a:	444e      	add	r6, r9
 8003a7c:	6026      	str	r6, [r4, #0]
 8003a7e:	463e      	mov	r6, r7
 8003a80:	6165      	str	r5, [r4, #20]
 8003a82:	eba5 0509 	sub.w	r5, r5, r9
 8003a86:	60a5      	str	r5, [r4, #8]
 8003a88:	42be      	cmp	r6, r7
 8003a8a:	d900      	bls.n	8003a8e <__ssputs_r+0x72>
 8003a8c:	463e      	mov	r6, r7
 8003a8e:	4632      	mov	r2, r6
 8003a90:	4641      	mov	r1, r8
 8003a92:	6820      	ldr	r0, [r4, #0]
 8003a94:	f000 fc80 	bl	8004398 <memmove>
 8003a98:	2000      	movs	r0, #0
 8003a9a:	68a3      	ldr	r3, [r4, #8]
 8003a9c:	1b9b      	subs	r3, r3, r6
 8003a9e:	60a3      	str	r3, [r4, #8]
 8003aa0:	6823      	ldr	r3, [r4, #0]
 8003aa2:	4433      	add	r3, r6
 8003aa4:	6023      	str	r3, [r4, #0]
 8003aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aaa:	462a      	mov	r2, r5
 8003aac:	f000 fcba 	bl	8004424 <_realloc_r>
 8003ab0:	4606      	mov	r6, r0
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	d1e0      	bne.n	8003a78 <__ssputs_r+0x5c>
 8003ab6:	4650      	mov	r0, sl
 8003ab8:	6921      	ldr	r1, [r4, #16]
 8003aba:	f7ff feb9 	bl	8003830 <_free_r>
 8003abe:	230c      	movs	r3, #12
 8003ac0:	f8ca 3000 	str.w	r3, [sl]
 8003ac4:	89a3      	ldrh	r3, [r4, #12]
 8003ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8003aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	e7e9      	b.n	8003aa6 <__ssputs_r+0x8a>
	...

08003ad4 <_svfiprintf_r>:
 8003ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad8:	4698      	mov	r8, r3
 8003ada:	898b      	ldrh	r3, [r1, #12]
 8003adc:	4607      	mov	r7, r0
 8003ade:	061b      	lsls	r3, r3, #24
 8003ae0:	460d      	mov	r5, r1
 8003ae2:	4614      	mov	r4, r2
 8003ae4:	b09d      	sub	sp, #116	@ 0x74
 8003ae6:	d510      	bpl.n	8003b0a <_svfiprintf_r+0x36>
 8003ae8:	690b      	ldr	r3, [r1, #16]
 8003aea:	b973      	cbnz	r3, 8003b0a <_svfiprintf_r+0x36>
 8003aec:	2140      	movs	r1, #64	@ 0x40
 8003aee:	f7ff ff09 	bl	8003904 <_malloc_r>
 8003af2:	6028      	str	r0, [r5, #0]
 8003af4:	6128      	str	r0, [r5, #16]
 8003af6:	b930      	cbnz	r0, 8003b06 <_svfiprintf_r+0x32>
 8003af8:	230c      	movs	r3, #12
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	f04f 30ff 	mov.w	r0, #4294967295
 8003b00:	b01d      	add	sp, #116	@ 0x74
 8003b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b06:	2340      	movs	r3, #64	@ 0x40
 8003b08:	616b      	str	r3, [r5, #20]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b0e:	2320      	movs	r3, #32
 8003b10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b14:	2330      	movs	r3, #48	@ 0x30
 8003b16:	f04f 0901 	mov.w	r9, #1
 8003b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b1e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003cb8 <_svfiprintf_r+0x1e4>
 8003b22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b26:	4623      	mov	r3, r4
 8003b28:	469a      	mov	sl, r3
 8003b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b2e:	b10a      	cbz	r2, 8003b34 <_svfiprintf_r+0x60>
 8003b30:	2a25      	cmp	r2, #37	@ 0x25
 8003b32:	d1f9      	bne.n	8003b28 <_svfiprintf_r+0x54>
 8003b34:	ebba 0b04 	subs.w	fp, sl, r4
 8003b38:	d00b      	beq.n	8003b52 <_svfiprintf_r+0x7e>
 8003b3a:	465b      	mov	r3, fp
 8003b3c:	4622      	mov	r2, r4
 8003b3e:	4629      	mov	r1, r5
 8003b40:	4638      	mov	r0, r7
 8003b42:	f7ff ff6b 	bl	8003a1c <__ssputs_r>
 8003b46:	3001      	adds	r0, #1
 8003b48:	f000 80a7 	beq.w	8003c9a <_svfiprintf_r+0x1c6>
 8003b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b4e:	445a      	add	r2, fp
 8003b50:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b52:	f89a 3000 	ldrb.w	r3, [sl]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 809f 	beq.w	8003c9a <_svfiprintf_r+0x1c6>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b66:	f10a 0a01 	add.w	sl, sl, #1
 8003b6a:	9304      	str	r3, [sp, #16]
 8003b6c:	9307      	str	r3, [sp, #28]
 8003b6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b72:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b74:	4654      	mov	r4, sl
 8003b76:	2205      	movs	r2, #5
 8003b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b7c:	484e      	ldr	r0, [pc, #312]	@ (8003cb8 <_svfiprintf_r+0x1e4>)
 8003b7e:	f000 fc35 	bl	80043ec <memchr>
 8003b82:	9a04      	ldr	r2, [sp, #16]
 8003b84:	b9d8      	cbnz	r0, 8003bbe <_svfiprintf_r+0xea>
 8003b86:	06d0      	lsls	r0, r2, #27
 8003b88:	bf44      	itt	mi
 8003b8a:	2320      	movmi	r3, #32
 8003b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b90:	0711      	lsls	r1, r2, #28
 8003b92:	bf44      	itt	mi
 8003b94:	232b      	movmi	r3, #43	@ 0x2b
 8003b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ba0:	d015      	beq.n	8003bce <_svfiprintf_r+0xfa>
 8003ba2:	4654      	mov	r4, sl
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f04f 0c0a 	mov.w	ip, #10
 8003baa:	9a07      	ldr	r2, [sp, #28]
 8003bac:	4621      	mov	r1, r4
 8003bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bb2:	3b30      	subs	r3, #48	@ 0x30
 8003bb4:	2b09      	cmp	r3, #9
 8003bb6:	d94b      	bls.n	8003c50 <_svfiprintf_r+0x17c>
 8003bb8:	b1b0      	cbz	r0, 8003be8 <_svfiprintf_r+0x114>
 8003bba:	9207      	str	r2, [sp, #28]
 8003bbc:	e014      	b.n	8003be8 <_svfiprintf_r+0x114>
 8003bbe:	eba0 0308 	sub.w	r3, r0, r8
 8003bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	46a2      	mov	sl, r4
 8003bca:	9304      	str	r3, [sp, #16]
 8003bcc:	e7d2      	b.n	8003b74 <_svfiprintf_r+0xa0>
 8003bce:	9b03      	ldr	r3, [sp, #12]
 8003bd0:	1d19      	adds	r1, r3, #4
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	9103      	str	r1, [sp, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	bfbb      	ittet	lt
 8003bda:	425b      	neglt	r3, r3
 8003bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8003be0:	9307      	strge	r3, [sp, #28]
 8003be2:	9307      	strlt	r3, [sp, #28]
 8003be4:	bfb8      	it	lt
 8003be6:	9204      	strlt	r2, [sp, #16]
 8003be8:	7823      	ldrb	r3, [r4, #0]
 8003bea:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bec:	d10a      	bne.n	8003c04 <_svfiprintf_r+0x130>
 8003bee:	7863      	ldrb	r3, [r4, #1]
 8003bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bf2:	d132      	bne.n	8003c5a <_svfiprintf_r+0x186>
 8003bf4:	9b03      	ldr	r3, [sp, #12]
 8003bf6:	3402      	adds	r4, #2
 8003bf8:	1d1a      	adds	r2, r3, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	9203      	str	r2, [sp, #12]
 8003bfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c02:	9305      	str	r3, [sp, #20]
 8003c04:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003cbc <_svfiprintf_r+0x1e8>
 8003c08:	2203      	movs	r2, #3
 8003c0a:	4650      	mov	r0, sl
 8003c0c:	7821      	ldrb	r1, [r4, #0]
 8003c0e:	f000 fbed 	bl	80043ec <memchr>
 8003c12:	b138      	cbz	r0, 8003c24 <_svfiprintf_r+0x150>
 8003c14:	2240      	movs	r2, #64	@ 0x40
 8003c16:	9b04      	ldr	r3, [sp, #16]
 8003c18:	eba0 000a 	sub.w	r0, r0, sl
 8003c1c:	4082      	lsls	r2, r0
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	3401      	adds	r4, #1
 8003c22:	9304      	str	r3, [sp, #16]
 8003c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c28:	2206      	movs	r2, #6
 8003c2a:	4825      	ldr	r0, [pc, #148]	@ (8003cc0 <_svfiprintf_r+0x1ec>)
 8003c2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c30:	f000 fbdc 	bl	80043ec <memchr>
 8003c34:	2800      	cmp	r0, #0
 8003c36:	d036      	beq.n	8003ca6 <_svfiprintf_r+0x1d2>
 8003c38:	4b22      	ldr	r3, [pc, #136]	@ (8003cc4 <_svfiprintf_r+0x1f0>)
 8003c3a:	bb1b      	cbnz	r3, 8003c84 <_svfiprintf_r+0x1b0>
 8003c3c:	9b03      	ldr	r3, [sp, #12]
 8003c3e:	3307      	adds	r3, #7
 8003c40:	f023 0307 	bic.w	r3, r3, #7
 8003c44:	3308      	adds	r3, #8
 8003c46:	9303      	str	r3, [sp, #12]
 8003c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c4a:	4433      	add	r3, r6
 8003c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c4e:	e76a      	b.n	8003b26 <_svfiprintf_r+0x52>
 8003c50:	460c      	mov	r4, r1
 8003c52:	2001      	movs	r0, #1
 8003c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c58:	e7a8      	b.n	8003bac <_svfiprintf_r+0xd8>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f04f 0c0a 	mov.w	ip, #10
 8003c60:	4619      	mov	r1, r3
 8003c62:	3401      	adds	r4, #1
 8003c64:	9305      	str	r3, [sp, #20]
 8003c66:	4620      	mov	r0, r4
 8003c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c6c:	3a30      	subs	r2, #48	@ 0x30
 8003c6e:	2a09      	cmp	r2, #9
 8003c70:	d903      	bls.n	8003c7a <_svfiprintf_r+0x1a6>
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0c6      	beq.n	8003c04 <_svfiprintf_r+0x130>
 8003c76:	9105      	str	r1, [sp, #20]
 8003c78:	e7c4      	b.n	8003c04 <_svfiprintf_r+0x130>
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c82:	e7f0      	b.n	8003c66 <_svfiprintf_r+0x192>
 8003c84:	ab03      	add	r3, sp, #12
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	462a      	mov	r2, r5
 8003c8a:	4638      	mov	r0, r7
 8003c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cc8 <_svfiprintf_r+0x1f4>)
 8003c8e:	a904      	add	r1, sp, #16
 8003c90:	f3af 8000 	nop.w
 8003c94:	1c42      	adds	r2, r0, #1
 8003c96:	4606      	mov	r6, r0
 8003c98:	d1d6      	bne.n	8003c48 <_svfiprintf_r+0x174>
 8003c9a:	89ab      	ldrh	r3, [r5, #12]
 8003c9c:	065b      	lsls	r3, r3, #25
 8003c9e:	f53f af2d 	bmi.w	8003afc <_svfiprintf_r+0x28>
 8003ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ca4:	e72c      	b.n	8003b00 <_svfiprintf_r+0x2c>
 8003ca6:	ab03      	add	r3, sp, #12
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	462a      	mov	r2, r5
 8003cac:	4638      	mov	r0, r7
 8003cae:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <_svfiprintf_r+0x1f4>)
 8003cb0:	a904      	add	r1, sp, #16
 8003cb2:	f000 f9bd 	bl	8004030 <_printf_i>
 8003cb6:	e7ed      	b.n	8003c94 <_svfiprintf_r+0x1c0>
 8003cb8:	080046ea 	.word	0x080046ea
 8003cbc:	080046f0 	.word	0x080046f0
 8003cc0:	080046f4 	.word	0x080046f4
 8003cc4:	00000000 	.word	0x00000000
 8003cc8:	08003a1d 	.word	0x08003a1d

08003ccc <__sfputc_r>:
 8003ccc:	6893      	ldr	r3, [r2, #8]
 8003cce:	b410      	push	{r4}
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	6093      	str	r3, [r2, #8]
 8003cd6:	da07      	bge.n	8003ce8 <__sfputc_r+0x1c>
 8003cd8:	6994      	ldr	r4, [r2, #24]
 8003cda:	42a3      	cmp	r3, r4
 8003cdc:	db01      	blt.n	8003ce2 <__sfputc_r+0x16>
 8003cde:	290a      	cmp	r1, #10
 8003ce0:	d102      	bne.n	8003ce8 <__sfputc_r+0x1c>
 8003ce2:	bc10      	pop	{r4}
 8003ce4:	f000 bac4 	b.w	8004270 <__swbuf_r>
 8003ce8:	6813      	ldr	r3, [r2, #0]
 8003cea:	1c58      	adds	r0, r3, #1
 8003cec:	6010      	str	r0, [r2, #0]
 8003cee:	7019      	strb	r1, [r3, #0]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	bc10      	pop	{r4}
 8003cf4:	4770      	bx	lr

08003cf6 <__sfputs_r>:
 8003cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf8:	4606      	mov	r6, r0
 8003cfa:	460f      	mov	r7, r1
 8003cfc:	4614      	mov	r4, r2
 8003cfe:	18d5      	adds	r5, r2, r3
 8003d00:	42ac      	cmp	r4, r5
 8003d02:	d101      	bne.n	8003d08 <__sfputs_r+0x12>
 8003d04:	2000      	movs	r0, #0
 8003d06:	e007      	b.n	8003d18 <__sfputs_r+0x22>
 8003d08:	463a      	mov	r2, r7
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d10:	f7ff ffdc 	bl	8003ccc <__sfputc_r>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d1f3      	bne.n	8003d00 <__sfputs_r+0xa>
 8003d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d1c <_vfiprintf_r>:
 8003d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d20:	460d      	mov	r5, r1
 8003d22:	4614      	mov	r4, r2
 8003d24:	4698      	mov	r8, r3
 8003d26:	4606      	mov	r6, r0
 8003d28:	b09d      	sub	sp, #116	@ 0x74
 8003d2a:	b118      	cbz	r0, 8003d34 <_vfiprintf_r+0x18>
 8003d2c:	6a03      	ldr	r3, [r0, #32]
 8003d2e:	b90b      	cbnz	r3, 8003d34 <_vfiprintf_r+0x18>
 8003d30:	f7ff fc42 	bl	80035b8 <__sinit>
 8003d34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d36:	07d9      	lsls	r1, r3, #31
 8003d38:	d405      	bmi.n	8003d46 <_vfiprintf_r+0x2a>
 8003d3a:	89ab      	ldrh	r3, [r5, #12]
 8003d3c:	059a      	lsls	r2, r3, #22
 8003d3e:	d402      	bmi.n	8003d46 <_vfiprintf_r+0x2a>
 8003d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d42:	f7ff fd72 	bl	800382a <__retarget_lock_acquire_recursive>
 8003d46:	89ab      	ldrh	r3, [r5, #12]
 8003d48:	071b      	lsls	r3, r3, #28
 8003d4a:	d501      	bpl.n	8003d50 <_vfiprintf_r+0x34>
 8003d4c:	692b      	ldr	r3, [r5, #16]
 8003d4e:	b99b      	cbnz	r3, 8003d78 <_vfiprintf_r+0x5c>
 8003d50:	4629      	mov	r1, r5
 8003d52:	4630      	mov	r0, r6
 8003d54:	f000 faca 	bl	80042ec <__swsetup_r>
 8003d58:	b170      	cbz	r0, 8003d78 <_vfiprintf_r+0x5c>
 8003d5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d5c:	07dc      	lsls	r4, r3, #31
 8003d5e:	d504      	bpl.n	8003d6a <_vfiprintf_r+0x4e>
 8003d60:	f04f 30ff 	mov.w	r0, #4294967295
 8003d64:	b01d      	add	sp, #116	@ 0x74
 8003d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d6a:	89ab      	ldrh	r3, [r5, #12]
 8003d6c:	0598      	lsls	r0, r3, #22
 8003d6e:	d4f7      	bmi.n	8003d60 <_vfiprintf_r+0x44>
 8003d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003d72:	f7ff fd5b 	bl	800382c <__retarget_lock_release_recursive>
 8003d76:	e7f3      	b.n	8003d60 <_vfiprintf_r+0x44>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d7c:	2320      	movs	r3, #32
 8003d7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d82:	2330      	movs	r3, #48	@ 0x30
 8003d84:	f04f 0901 	mov.w	r9, #1
 8003d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d8c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003f38 <_vfiprintf_r+0x21c>
 8003d90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d94:	4623      	mov	r3, r4
 8003d96:	469a      	mov	sl, r3
 8003d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d9c:	b10a      	cbz	r2, 8003da2 <_vfiprintf_r+0x86>
 8003d9e:	2a25      	cmp	r2, #37	@ 0x25
 8003da0:	d1f9      	bne.n	8003d96 <_vfiprintf_r+0x7a>
 8003da2:	ebba 0b04 	subs.w	fp, sl, r4
 8003da6:	d00b      	beq.n	8003dc0 <_vfiprintf_r+0xa4>
 8003da8:	465b      	mov	r3, fp
 8003daa:	4622      	mov	r2, r4
 8003dac:	4629      	mov	r1, r5
 8003dae:	4630      	mov	r0, r6
 8003db0:	f7ff ffa1 	bl	8003cf6 <__sfputs_r>
 8003db4:	3001      	adds	r0, #1
 8003db6:	f000 80a7 	beq.w	8003f08 <_vfiprintf_r+0x1ec>
 8003dba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003dbc:	445a      	add	r2, fp
 8003dbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 809f 	beq.w	8003f08 <_vfiprintf_r+0x1ec>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dd4:	f10a 0a01 	add.w	sl, sl, #1
 8003dd8:	9304      	str	r3, [sp, #16]
 8003dda:	9307      	str	r3, [sp, #28]
 8003ddc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003de0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003de2:	4654      	mov	r4, sl
 8003de4:	2205      	movs	r2, #5
 8003de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dea:	4853      	ldr	r0, [pc, #332]	@ (8003f38 <_vfiprintf_r+0x21c>)
 8003dec:	f000 fafe 	bl	80043ec <memchr>
 8003df0:	9a04      	ldr	r2, [sp, #16]
 8003df2:	b9d8      	cbnz	r0, 8003e2c <_vfiprintf_r+0x110>
 8003df4:	06d1      	lsls	r1, r2, #27
 8003df6:	bf44      	itt	mi
 8003df8:	2320      	movmi	r3, #32
 8003dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dfe:	0713      	lsls	r3, r2, #28
 8003e00:	bf44      	itt	mi
 8003e02:	232b      	movmi	r3, #43	@ 0x2b
 8003e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e08:	f89a 3000 	ldrb.w	r3, [sl]
 8003e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e0e:	d015      	beq.n	8003e3c <_vfiprintf_r+0x120>
 8003e10:	4654      	mov	r4, sl
 8003e12:	2000      	movs	r0, #0
 8003e14:	f04f 0c0a 	mov.w	ip, #10
 8003e18:	9a07      	ldr	r2, [sp, #28]
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e20:	3b30      	subs	r3, #48	@ 0x30
 8003e22:	2b09      	cmp	r3, #9
 8003e24:	d94b      	bls.n	8003ebe <_vfiprintf_r+0x1a2>
 8003e26:	b1b0      	cbz	r0, 8003e56 <_vfiprintf_r+0x13a>
 8003e28:	9207      	str	r2, [sp, #28]
 8003e2a:	e014      	b.n	8003e56 <_vfiprintf_r+0x13a>
 8003e2c:	eba0 0308 	sub.w	r3, r0, r8
 8003e30:	fa09 f303 	lsl.w	r3, r9, r3
 8003e34:	4313      	orrs	r3, r2
 8003e36:	46a2      	mov	sl, r4
 8003e38:	9304      	str	r3, [sp, #16]
 8003e3a:	e7d2      	b.n	8003de2 <_vfiprintf_r+0xc6>
 8003e3c:	9b03      	ldr	r3, [sp, #12]
 8003e3e:	1d19      	adds	r1, r3, #4
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	9103      	str	r1, [sp, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bfbb      	ittet	lt
 8003e48:	425b      	neglt	r3, r3
 8003e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8003e4e:	9307      	strge	r3, [sp, #28]
 8003e50:	9307      	strlt	r3, [sp, #28]
 8003e52:	bfb8      	it	lt
 8003e54:	9204      	strlt	r2, [sp, #16]
 8003e56:	7823      	ldrb	r3, [r4, #0]
 8003e58:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e5a:	d10a      	bne.n	8003e72 <_vfiprintf_r+0x156>
 8003e5c:	7863      	ldrb	r3, [r4, #1]
 8003e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e60:	d132      	bne.n	8003ec8 <_vfiprintf_r+0x1ac>
 8003e62:	9b03      	ldr	r3, [sp, #12]
 8003e64:	3402      	adds	r4, #2
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	9203      	str	r2, [sp, #12]
 8003e6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e70:	9305      	str	r3, [sp, #20]
 8003e72:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003f3c <_vfiprintf_r+0x220>
 8003e76:	2203      	movs	r2, #3
 8003e78:	4650      	mov	r0, sl
 8003e7a:	7821      	ldrb	r1, [r4, #0]
 8003e7c:	f000 fab6 	bl	80043ec <memchr>
 8003e80:	b138      	cbz	r0, 8003e92 <_vfiprintf_r+0x176>
 8003e82:	2240      	movs	r2, #64	@ 0x40
 8003e84:	9b04      	ldr	r3, [sp, #16]
 8003e86:	eba0 000a 	sub.w	r0, r0, sl
 8003e8a:	4082      	lsls	r2, r0
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	3401      	adds	r4, #1
 8003e90:	9304      	str	r3, [sp, #16]
 8003e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e96:	2206      	movs	r2, #6
 8003e98:	4829      	ldr	r0, [pc, #164]	@ (8003f40 <_vfiprintf_r+0x224>)
 8003e9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e9e:	f000 faa5 	bl	80043ec <memchr>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	d03f      	beq.n	8003f26 <_vfiprintf_r+0x20a>
 8003ea6:	4b27      	ldr	r3, [pc, #156]	@ (8003f44 <_vfiprintf_r+0x228>)
 8003ea8:	bb1b      	cbnz	r3, 8003ef2 <_vfiprintf_r+0x1d6>
 8003eaa:	9b03      	ldr	r3, [sp, #12]
 8003eac:	3307      	adds	r3, #7
 8003eae:	f023 0307 	bic.w	r3, r3, #7
 8003eb2:	3308      	adds	r3, #8
 8003eb4:	9303      	str	r3, [sp, #12]
 8003eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eb8:	443b      	add	r3, r7
 8003eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ebc:	e76a      	b.n	8003d94 <_vfiprintf_r+0x78>
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ec6:	e7a8      	b.n	8003e1a <_vfiprintf_r+0xfe>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f04f 0c0a 	mov.w	ip, #10
 8003ece:	4619      	mov	r1, r3
 8003ed0:	3401      	adds	r4, #1
 8003ed2:	9305      	str	r3, [sp, #20]
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003eda:	3a30      	subs	r2, #48	@ 0x30
 8003edc:	2a09      	cmp	r2, #9
 8003ede:	d903      	bls.n	8003ee8 <_vfiprintf_r+0x1cc>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0c6      	beq.n	8003e72 <_vfiprintf_r+0x156>
 8003ee4:	9105      	str	r1, [sp, #20]
 8003ee6:	e7c4      	b.n	8003e72 <_vfiprintf_r+0x156>
 8003ee8:	4604      	mov	r4, r0
 8003eea:	2301      	movs	r3, #1
 8003eec:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ef0:	e7f0      	b.n	8003ed4 <_vfiprintf_r+0x1b8>
 8003ef2:	ab03      	add	r3, sp, #12
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	4630      	mov	r0, r6
 8003efa:	4b13      	ldr	r3, [pc, #76]	@ (8003f48 <_vfiprintf_r+0x22c>)
 8003efc:	a904      	add	r1, sp, #16
 8003efe:	f3af 8000 	nop.w
 8003f02:	4607      	mov	r7, r0
 8003f04:	1c78      	adds	r0, r7, #1
 8003f06:	d1d6      	bne.n	8003eb6 <_vfiprintf_r+0x19a>
 8003f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f0a:	07d9      	lsls	r1, r3, #31
 8003f0c:	d405      	bmi.n	8003f1a <_vfiprintf_r+0x1fe>
 8003f0e:	89ab      	ldrh	r3, [r5, #12]
 8003f10:	059a      	lsls	r2, r3, #22
 8003f12:	d402      	bmi.n	8003f1a <_vfiprintf_r+0x1fe>
 8003f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f16:	f7ff fc89 	bl	800382c <__retarget_lock_release_recursive>
 8003f1a:	89ab      	ldrh	r3, [r5, #12]
 8003f1c:	065b      	lsls	r3, r3, #25
 8003f1e:	f53f af1f 	bmi.w	8003d60 <_vfiprintf_r+0x44>
 8003f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f24:	e71e      	b.n	8003d64 <_vfiprintf_r+0x48>
 8003f26:	ab03      	add	r3, sp, #12
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	462a      	mov	r2, r5
 8003f2c:	4630      	mov	r0, r6
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <_vfiprintf_r+0x22c>)
 8003f30:	a904      	add	r1, sp, #16
 8003f32:	f000 f87d 	bl	8004030 <_printf_i>
 8003f36:	e7e4      	b.n	8003f02 <_vfiprintf_r+0x1e6>
 8003f38:	080046ea 	.word	0x080046ea
 8003f3c:	080046f0 	.word	0x080046f0
 8003f40:	080046f4 	.word	0x080046f4
 8003f44:	00000000 	.word	0x00000000
 8003f48:	08003cf7 	.word	0x08003cf7

08003f4c <_printf_common>:
 8003f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	4616      	mov	r6, r2
 8003f52:	4698      	mov	r8, r3
 8003f54:	688a      	ldr	r2, [r1, #8]
 8003f56:	690b      	ldr	r3, [r1, #16]
 8003f58:	4607      	mov	r7, r0
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	bfb8      	it	lt
 8003f5e:	4613      	movlt	r3, r2
 8003f60:	6033      	str	r3, [r6, #0]
 8003f62:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003f66:	460c      	mov	r4, r1
 8003f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f6c:	b10a      	cbz	r2, 8003f72 <_printf_common+0x26>
 8003f6e:	3301      	adds	r3, #1
 8003f70:	6033      	str	r3, [r6, #0]
 8003f72:	6823      	ldr	r3, [r4, #0]
 8003f74:	0699      	lsls	r1, r3, #26
 8003f76:	bf42      	ittt	mi
 8003f78:	6833      	ldrmi	r3, [r6, #0]
 8003f7a:	3302      	addmi	r3, #2
 8003f7c:	6033      	strmi	r3, [r6, #0]
 8003f7e:	6825      	ldr	r5, [r4, #0]
 8003f80:	f015 0506 	ands.w	r5, r5, #6
 8003f84:	d106      	bne.n	8003f94 <_printf_common+0x48>
 8003f86:	f104 0a19 	add.w	sl, r4, #25
 8003f8a:	68e3      	ldr	r3, [r4, #12]
 8003f8c:	6832      	ldr	r2, [r6, #0]
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	42ab      	cmp	r3, r5
 8003f92:	dc2b      	bgt.n	8003fec <_printf_common+0xa0>
 8003f94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f98:	6822      	ldr	r2, [r4, #0]
 8003f9a:	3b00      	subs	r3, #0
 8003f9c:	bf18      	it	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	0692      	lsls	r2, r2, #26
 8003fa2:	d430      	bmi.n	8004006 <_printf_common+0xba>
 8003fa4:	4641      	mov	r1, r8
 8003fa6:	4638      	mov	r0, r7
 8003fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003fac:	47c8      	blx	r9
 8003fae:	3001      	adds	r0, #1
 8003fb0:	d023      	beq.n	8003ffa <_printf_common+0xae>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	6922      	ldr	r2, [r4, #16]
 8003fb6:	f003 0306 	and.w	r3, r3, #6
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	bf14      	ite	ne
 8003fbe:	2500      	movne	r5, #0
 8003fc0:	6833      	ldreq	r3, [r6, #0]
 8003fc2:	f04f 0600 	mov.w	r6, #0
 8003fc6:	bf08      	it	eq
 8003fc8:	68e5      	ldreq	r5, [r4, #12]
 8003fca:	f104 041a 	add.w	r4, r4, #26
 8003fce:	bf08      	it	eq
 8003fd0:	1aed      	subeq	r5, r5, r3
 8003fd2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003fd6:	bf08      	it	eq
 8003fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	bfc4      	itt	gt
 8003fe0:	1a9b      	subgt	r3, r3, r2
 8003fe2:	18ed      	addgt	r5, r5, r3
 8003fe4:	42b5      	cmp	r5, r6
 8003fe6:	d11a      	bne.n	800401e <_printf_common+0xd2>
 8003fe8:	2000      	movs	r0, #0
 8003fea:	e008      	b.n	8003ffe <_printf_common+0xb2>
 8003fec:	2301      	movs	r3, #1
 8003fee:	4652      	mov	r2, sl
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	4638      	mov	r0, r7
 8003ff4:	47c8      	blx	r9
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d103      	bne.n	8004002 <_printf_common+0xb6>
 8003ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004002:	3501      	adds	r5, #1
 8004004:	e7c1      	b.n	8003f8a <_printf_common+0x3e>
 8004006:	2030      	movs	r0, #48	@ 0x30
 8004008:	18e1      	adds	r1, r4, r3
 800400a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004014:	4422      	add	r2, r4
 8004016:	3302      	adds	r3, #2
 8004018:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800401c:	e7c2      	b.n	8003fa4 <_printf_common+0x58>
 800401e:	2301      	movs	r3, #1
 8004020:	4622      	mov	r2, r4
 8004022:	4641      	mov	r1, r8
 8004024:	4638      	mov	r0, r7
 8004026:	47c8      	blx	r9
 8004028:	3001      	adds	r0, #1
 800402a:	d0e6      	beq.n	8003ffa <_printf_common+0xae>
 800402c:	3601      	adds	r6, #1
 800402e:	e7d9      	b.n	8003fe4 <_printf_common+0x98>

08004030 <_printf_i>:
 8004030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004034:	7e0f      	ldrb	r7, [r1, #24]
 8004036:	4691      	mov	r9, r2
 8004038:	2f78      	cmp	r7, #120	@ 0x78
 800403a:	4680      	mov	r8, r0
 800403c:	460c      	mov	r4, r1
 800403e:	469a      	mov	sl, r3
 8004040:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004042:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004046:	d807      	bhi.n	8004058 <_printf_i+0x28>
 8004048:	2f62      	cmp	r7, #98	@ 0x62
 800404a:	d80a      	bhi.n	8004062 <_printf_i+0x32>
 800404c:	2f00      	cmp	r7, #0
 800404e:	f000 80d3 	beq.w	80041f8 <_printf_i+0x1c8>
 8004052:	2f58      	cmp	r7, #88	@ 0x58
 8004054:	f000 80ba 	beq.w	80041cc <_printf_i+0x19c>
 8004058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800405c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004060:	e03a      	b.n	80040d8 <_printf_i+0xa8>
 8004062:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004066:	2b15      	cmp	r3, #21
 8004068:	d8f6      	bhi.n	8004058 <_printf_i+0x28>
 800406a:	a101      	add	r1, pc, #4	@ (adr r1, 8004070 <_printf_i+0x40>)
 800406c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004070:	080040c9 	.word	0x080040c9
 8004074:	080040dd 	.word	0x080040dd
 8004078:	08004059 	.word	0x08004059
 800407c:	08004059 	.word	0x08004059
 8004080:	08004059 	.word	0x08004059
 8004084:	08004059 	.word	0x08004059
 8004088:	080040dd 	.word	0x080040dd
 800408c:	08004059 	.word	0x08004059
 8004090:	08004059 	.word	0x08004059
 8004094:	08004059 	.word	0x08004059
 8004098:	08004059 	.word	0x08004059
 800409c:	080041df 	.word	0x080041df
 80040a0:	08004107 	.word	0x08004107
 80040a4:	08004199 	.word	0x08004199
 80040a8:	08004059 	.word	0x08004059
 80040ac:	08004059 	.word	0x08004059
 80040b0:	08004201 	.word	0x08004201
 80040b4:	08004059 	.word	0x08004059
 80040b8:	08004107 	.word	0x08004107
 80040bc:	08004059 	.word	0x08004059
 80040c0:	08004059 	.word	0x08004059
 80040c4:	080041a1 	.word	0x080041a1
 80040c8:	6833      	ldr	r3, [r6, #0]
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6032      	str	r2, [r6, #0]
 80040d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80040d8:	2301      	movs	r3, #1
 80040da:	e09e      	b.n	800421a <_printf_i+0x1ea>
 80040dc:	6833      	ldr	r3, [r6, #0]
 80040de:	6820      	ldr	r0, [r4, #0]
 80040e0:	1d19      	adds	r1, r3, #4
 80040e2:	6031      	str	r1, [r6, #0]
 80040e4:	0606      	lsls	r6, r0, #24
 80040e6:	d501      	bpl.n	80040ec <_printf_i+0xbc>
 80040e8:	681d      	ldr	r5, [r3, #0]
 80040ea:	e003      	b.n	80040f4 <_printf_i+0xc4>
 80040ec:	0645      	lsls	r5, r0, #25
 80040ee:	d5fb      	bpl.n	80040e8 <_printf_i+0xb8>
 80040f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80040f4:	2d00      	cmp	r5, #0
 80040f6:	da03      	bge.n	8004100 <_printf_i+0xd0>
 80040f8:	232d      	movs	r3, #45	@ 0x2d
 80040fa:	426d      	negs	r5, r5
 80040fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004100:	230a      	movs	r3, #10
 8004102:	4859      	ldr	r0, [pc, #356]	@ (8004268 <_printf_i+0x238>)
 8004104:	e011      	b.n	800412a <_printf_i+0xfa>
 8004106:	6821      	ldr	r1, [r4, #0]
 8004108:	6833      	ldr	r3, [r6, #0]
 800410a:	0608      	lsls	r0, r1, #24
 800410c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004110:	d402      	bmi.n	8004118 <_printf_i+0xe8>
 8004112:	0649      	lsls	r1, r1, #25
 8004114:	bf48      	it	mi
 8004116:	b2ad      	uxthmi	r5, r5
 8004118:	2f6f      	cmp	r7, #111	@ 0x6f
 800411a:	6033      	str	r3, [r6, #0]
 800411c:	bf14      	ite	ne
 800411e:	230a      	movne	r3, #10
 8004120:	2308      	moveq	r3, #8
 8004122:	4851      	ldr	r0, [pc, #324]	@ (8004268 <_printf_i+0x238>)
 8004124:	2100      	movs	r1, #0
 8004126:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800412a:	6866      	ldr	r6, [r4, #4]
 800412c:	2e00      	cmp	r6, #0
 800412e:	bfa8      	it	ge
 8004130:	6821      	ldrge	r1, [r4, #0]
 8004132:	60a6      	str	r6, [r4, #8]
 8004134:	bfa4      	itt	ge
 8004136:	f021 0104 	bicge.w	r1, r1, #4
 800413a:	6021      	strge	r1, [r4, #0]
 800413c:	b90d      	cbnz	r5, 8004142 <_printf_i+0x112>
 800413e:	2e00      	cmp	r6, #0
 8004140:	d04b      	beq.n	80041da <_printf_i+0x1aa>
 8004142:	4616      	mov	r6, r2
 8004144:	fbb5 f1f3 	udiv	r1, r5, r3
 8004148:	fb03 5711 	mls	r7, r3, r1, r5
 800414c:	5dc7      	ldrb	r7, [r0, r7]
 800414e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004152:	462f      	mov	r7, r5
 8004154:	42bb      	cmp	r3, r7
 8004156:	460d      	mov	r5, r1
 8004158:	d9f4      	bls.n	8004144 <_printf_i+0x114>
 800415a:	2b08      	cmp	r3, #8
 800415c:	d10b      	bne.n	8004176 <_printf_i+0x146>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	07df      	lsls	r7, r3, #31
 8004162:	d508      	bpl.n	8004176 <_printf_i+0x146>
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	6861      	ldr	r1, [r4, #4]
 8004168:	4299      	cmp	r1, r3
 800416a:	bfde      	ittt	le
 800416c:	2330      	movle	r3, #48	@ 0x30
 800416e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004172:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004176:	1b92      	subs	r2, r2, r6
 8004178:	6122      	str	r2, [r4, #16]
 800417a:	464b      	mov	r3, r9
 800417c:	4621      	mov	r1, r4
 800417e:	4640      	mov	r0, r8
 8004180:	f8cd a000 	str.w	sl, [sp]
 8004184:	aa03      	add	r2, sp, #12
 8004186:	f7ff fee1 	bl	8003f4c <_printf_common>
 800418a:	3001      	adds	r0, #1
 800418c:	d14a      	bne.n	8004224 <_printf_i+0x1f4>
 800418e:	f04f 30ff 	mov.w	r0, #4294967295
 8004192:	b004      	add	sp, #16
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	f043 0320 	orr.w	r3, r3, #32
 800419e:	6023      	str	r3, [r4, #0]
 80041a0:	2778      	movs	r7, #120	@ 0x78
 80041a2:	4832      	ldr	r0, [pc, #200]	@ (800426c <_printf_i+0x23c>)
 80041a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	6831      	ldr	r1, [r6, #0]
 80041ac:	061f      	lsls	r7, r3, #24
 80041ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80041b2:	d402      	bmi.n	80041ba <_printf_i+0x18a>
 80041b4:	065f      	lsls	r7, r3, #25
 80041b6:	bf48      	it	mi
 80041b8:	b2ad      	uxthmi	r5, r5
 80041ba:	6031      	str	r1, [r6, #0]
 80041bc:	07d9      	lsls	r1, r3, #31
 80041be:	bf44      	itt	mi
 80041c0:	f043 0320 	orrmi.w	r3, r3, #32
 80041c4:	6023      	strmi	r3, [r4, #0]
 80041c6:	b11d      	cbz	r5, 80041d0 <_printf_i+0x1a0>
 80041c8:	2310      	movs	r3, #16
 80041ca:	e7ab      	b.n	8004124 <_printf_i+0xf4>
 80041cc:	4826      	ldr	r0, [pc, #152]	@ (8004268 <_printf_i+0x238>)
 80041ce:	e7e9      	b.n	80041a4 <_printf_i+0x174>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	f023 0320 	bic.w	r3, r3, #32
 80041d6:	6023      	str	r3, [r4, #0]
 80041d8:	e7f6      	b.n	80041c8 <_printf_i+0x198>
 80041da:	4616      	mov	r6, r2
 80041dc:	e7bd      	b.n	800415a <_printf_i+0x12a>
 80041de:	6833      	ldr	r3, [r6, #0]
 80041e0:	6825      	ldr	r5, [r4, #0]
 80041e2:	1d18      	adds	r0, r3, #4
 80041e4:	6961      	ldr	r1, [r4, #20]
 80041e6:	6030      	str	r0, [r6, #0]
 80041e8:	062e      	lsls	r6, r5, #24
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	d501      	bpl.n	80041f2 <_printf_i+0x1c2>
 80041ee:	6019      	str	r1, [r3, #0]
 80041f0:	e002      	b.n	80041f8 <_printf_i+0x1c8>
 80041f2:	0668      	lsls	r0, r5, #25
 80041f4:	d5fb      	bpl.n	80041ee <_printf_i+0x1be>
 80041f6:	8019      	strh	r1, [r3, #0]
 80041f8:	2300      	movs	r3, #0
 80041fa:	4616      	mov	r6, r2
 80041fc:	6123      	str	r3, [r4, #16]
 80041fe:	e7bc      	b.n	800417a <_printf_i+0x14a>
 8004200:	6833      	ldr	r3, [r6, #0]
 8004202:	2100      	movs	r1, #0
 8004204:	1d1a      	adds	r2, r3, #4
 8004206:	6032      	str	r2, [r6, #0]
 8004208:	681e      	ldr	r6, [r3, #0]
 800420a:	6862      	ldr	r2, [r4, #4]
 800420c:	4630      	mov	r0, r6
 800420e:	f000 f8ed 	bl	80043ec <memchr>
 8004212:	b108      	cbz	r0, 8004218 <_printf_i+0x1e8>
 8004214:	1b80      	subs	r0, r0, r6
 8004216:	6060      	str	r0, [r4, #4]
 8004218:	6863      	ldr	r3, [r4, #4]
 800421a:	6123      	str	r3, [r4, #16]
 800421c:	2300      	movs	r3, #0
 800421e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004222:	e7aa      	b.n	800417a <_printf_i+0x14a>
 8004224:	4632      	mov	r2, r6
 8004226:	4649      	mov	r1, r9
 8004228:	4640      	mov	r0, r8
 800422a:	6923      	ldr	r3, [r4, #16]
 800422c:	47d0      	blx	sl
 800422e:	3001      	adds	r0, #1
 8004230:	d0ad      	beq.n	800418e <_printf_i+0x15e>
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	079b      	lsls	r3, r3, #30
 8004236:	d413      	bmi.n	8004260 <_printf_i+0x230>
 8004238:	68e0      	ldr	r0, [r4, #12]
 800423a:	9b03      	ldr	r3, [sp, #12]
 800423c:	4298      	cmp	r0, r3
 800423e:	bfb8      	it	lt
 8004240:	4618      	movlt	r0, r3
 8004242:	e7a6      	b.n	8004192 <_printf_i+0x162>
 8004244:	2301      	movs	r3, #1
 8004246:	4632      	mov	r2, r6
 8004248:	4649      	mov	r1, r9
 800424a:	4640      	mov	r0, r8
 800424c:	47d0      	blx	sl
 800424e:	3001      	adds	r0, #1
 8004250:	d09d      	beq.n	800418e <_printf_i+0x15e>
 8004252:	3501      	adds	r5, #1
 8004254:	68e3      	ldr	r3, [r4, #12]
 8004256:	9903      	ldr	r1, [sp, #12]
 8004258:	1a5b      	subs	r3, r3, r1
 800425a:	42ab      	cmp	r3, r5
 800425c:	dcf2      	bgt.n	8004244 <_printf_i+0x214>
 800425e:	e7eb      	b.n	8004238 <_printf_i+0x208>
 8004260:	2500      	movs	r5, #0
 8004262:	f104 0619 	add.w	r6, r4, #25
 8004266:	e7f5      	b.n	8004254 <_printf_i+0x224>
 8004268:	080046fb 	.word	0x080046fb
 800426c:	0800470c 	.word	0x0800470c

08004270 <__swbuf_r>:
 8004270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004272:	460e      	mov	r6, r1
 8004274:	4614      	mov	r4, r2
 8004276:	4605      	mov	r5, r0
 8004278:	b118      	cbz	r0, 8004282 <__swbuf_r+0x12>
 800427a:	6a03      	ldr	r3, [r0, #32]
 800427c:	b90b      	cbnz	r3, 8004282 <__swbuf_r+0x12>
 800427e:	f7ff f99b 	bl	80035b8 <__sinit>
 8004282:	69a3      	ldr	r3, [r4, #24]
 8004284:	60a3      	str	r3, [r4, #8]
 8004286:	89a3      	ldrh	r3, [r4, #12]
 8004288:	071a      	lsls	r2, r3, #28
 800428a:	d501      	bpl.n	8004290 <__swbuf_r+0x20>
 800428c:	6923      	ldr	r3, [r4, #16]
 800428e:	b943      	cbnz	r3, 80042a2 <__swbuf_r+0x32>
 8004290:	4621      	mov	r1, r4
 8004292:	4628      	mov	r0, r5
 8004294:	f000 f82a 	bl	80042ec <__swsetup_r>
 8004298:	b118      	cbz	r0, 80042a2 <__swbuf_r+0x32>
 800429a:	f04f 37ff 	mov.w	r7, #4294967295
 800429e:	4638      	mov	r0, r7
 80042a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	6922      	ldr	r2, [r4, #16]
 80042a6:	b2f6      	uxtb	r6, r6
 80042a8:	1a98      	subs	r0, r3, r2
 80042aa:	6963      	ldr	r3, [r4, #20]
 80042ac:	4637      	mov	r7, r6
 80042ae:	4283      	cmp	r3, r0
 80042b0:	dc05      	bgt.n	80042be <__swbuf_r+0x4e>
 80042b2:	4621      	mov	r1, r4
 80042b4:	4628      	mov	r0, r5
 80042b6:	f7ff f8b7 	bl	8003428 <_fflush_r>
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d1ed      	bne.n	800429a <__swbuf_r+0x2a>
 80042be:	68a3      	ldr	r3, [r4, #8]
 80042c0:	3b01      	subs	r3, #1
 80042c2:	60a3      	str	r3, [r4, #8]
 80042c4:	6823      	ldr	r3, [r4, #0]
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	6022      	str	r2, [r4, #0]
 80042ca:	701e      	strb	r6, [r3, #0]
 80042cc:	6962      	ldr	r2, [r4, #20]
 80042ce:	1c43      	adds	r3, r0, #1
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d004      	beq.n	80042de <__swbuf_r+0x6e>
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	07db      	lsls	r3, r3, #31
 80042d8:	d5e1      	bpl.n	800429e <__swbuf_r+0x2e>
 80042da:	2e0a      	cmp	r6, #10
 80042dc:	d1df      	bne.n	800429e <__swbuf_r+0x2e>
 80042de:	4621      	mov	r1, r4
 80042e0:	4628      	mov	r0, r5
 80042e2:	f7ff f8a1 	bl	8003428 <_fflush_r>
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d0d9      	beq.n	800429e <__swbuf_r+0x2e>
 80042ea:	e7d6      	b.n	800429a <__swbuf_r+0x2a>

080042ec <__swsetup_r>:
 80042ec:	b538      	push	{r3, r4, r5, lr}
 80042ee:	4b29      	ldr	r3, [pc, #164]	@ (8004394 <__swsetup_r+0xa8>)
 80042f0:	4605      	mov	r5, r0
 80042f2:	6818      	ldr	r0, [r3, #0]
 80042f4:	460c      	mov	r4, r1
 80042f6:	b118      	cbz	r0, 8004300 <__swsetup_r+0x14>
 80042f8:	6a03      	ldr	r3, [r0, #32]
 80042fa:	b90b      	cbnz	r3, 8004300 <__swsetup_r+0x14>
 80042fc:	f7ff f95c 	bl	80035b8 <__sinit>
 8004300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004304:	0719      	lsls	r1, r3, #28
 8004306:	d422      	bmi.n	800434e <__swsetup_r+0x62>
 8004308:	06da      	lsls	r2, r3, #27
 800430a:	d407      	bmi.n	800431c <__swsetup_r+0x30>
 800430c:	2209      	movs	r2, #9
 800430e:	602a      	str	r2, [r5, #0]
 8004310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004314:	f04f 30ff 	mov.w	r0, #4294967295
 8004318:	81a3      	strh	r3, [r4, #12]
 800431a:	e033      	b.n	8004384 <__swsetup_r+0x98>
 800431c:	0758      	lsls	r0, r3, #29
 800431e:	d512      	bpl.n	8004346 <__swsetup_r+0x5a>
 8004320:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004322:	b141      	cbz	r1, 8004336 <__swsetup_r+0x4a>
 8004324:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004328:	4299      	cmp	r1, r3
 800432a:	d002      	beq.n	8004332 <__swsetup_r+0x46>
 800432c:	4628      	mov	r0, r5
 800432e:	f7ff fa7f 	bl	8003830 <_free_r>
 8004332:	2300      	movs	r3, #0
 8004334:	6363      	str	r3, [r4, #52]	@ 0x34
 8004336:	89a3      	ldrh	r3, [r4, #12]
 8004338:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800433c:	81a3      	strh	r3, [r4, #12]
 800433e:	2300      	movs	r3, #0
 8004340:	6063      	str	r3, [r4, #4]
 8004342:	6923      	ldr	r3, [r4, #16]
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	f043 0308 	orr.w	r3, r3, #8
 800434c:	81a3      	strh	r3, [r4, #12]
 800434e:	6923      	ldr	r3, [r4, #16]
 8004350:	b94b      	cbnz	r3, 8004366 <__swsetup_r+0x7a>
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800435c:	d003      	beq.n	8004366 <__swsetup_r+0x7a>
 800435e:	4621      	mov	r1, r4
 8004360:	4628      	mov	r0, r5
 8004362:	f000 f8b2 	bl	80044ca <__smakebuf_r>
 8004366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800436a:	f013 0201 	ands.w	r2, r3, #1
 800436e:	d00a      	beq.n	8004386 <__swsetup_r+0x9a>
 8004370:	2200      	movs	r2, #0
 8004372:	60a2      	str	r2, [r4, #8]
 8004374:	6962      	ldr	r2, [r4, #20]
 8004376:	4252      	negs	r2, r2
 8004378:	61a2      	str	r2, [r4, #24]
 800437a:	6922      	ldr	r2, [r4, #16]
 800437c:	b942      	cbnz	r2, 8004390 <__swsetup_r+0xa4>
 800437e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004382:	d1c5      	bne.n	8004310 <__swsetup_r+0x24>
 8004384:	bd38      	pop	{r3, r4, r5, pc}
 8004386:	0799      	lsls	r1, r3, #30
 8004388:	bf58      	it	pl
 800438a:	6962      	ldrpl	r2, [r4, #20]
 800438c:	60a2      	str	r2, [r4, #8]
 800438e:	e7f4      	b.n	800437a <__swsetup_r+0x8e>
 8004390:	2000      	movs	r0, #0
 8004392:	e7f7      	b.n	8004384 <__swsetup_r+0x98>
 8004394:	20000034 	.word	0x20000034

08004398 <memmove>:
 8004398:	4288      	cmp	r0, r1
 800439a:	b510      	push	{r4, lr}
 800439c:	eb01 0402 	add.w	r4, r1, r2
 80043a0:	d902      	bls.n	80043a8 <memmove+0x10>
 80043a2:	4284      	cmp	r4, r0
 80043a4:	4623      	mov	r3, r4
 80043a6:	d807      	bhi.n	80043b8 <memmove+0x20>
 80043a8:	1e43      	subs	r3, r0, #1
 80043aa:	42a1      	cmp	r1, r4
 80043ac:	d008      	beq.n	80043c0 <memmove+0x28>
 80043ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80043b6:	e7f8      	b.n	80043aa <memmove+0x12>
 80043b8:	4601      	mov	r1, r0
 80043ba:	4402      	add	r2, r0
 80043bc:	428a      	cmp	r2, r1
 80043be:	d100      	bne.n	80043c2 <memmove+0x2a>
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80043ca:	e7f7      	b.n	80043bc <memmove+0x24>

080043cc <_sbrk_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	2300      	movs	r3, #0
 80043d0:	4d05      	ldr	r5, [pc, #20]	@ (80043e8 <_sbrk_r+0x1c>)
 80043d2:	4604      	mov	r4, r0
 80043d4:	4608      	mov	r0, r1
 80043d6:	602b      	str	r3, [r5, #0]
 80043d8:	f7fc f990 	bl	80006fc <_sbrk>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_sbrk_r+0x1a>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_sbrk_r+0x1a>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	200003d4 	.word	0x200003d4

080043ec <memchr>:
 80043ec:	4603      	mov	r3, r0
 80043ee:	b510      	push	{r4, lr}
 80043f0:	b2c9      	uxtb	r1, r1
 80043f2:	4402      	add	r2, r0
 80043f4:	4293      	cmp	r3, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	d101      	bne.n	80043fe <memchr+0x12>
 80043fa:	2000      	movs	r0, #0
 80043fc:	e003      	b.n	8004406 <memchr+0x1a>
 80043fe:	7804      	ldrb	r4, [r0, #0]
 8004400:	3301      	adds	r3, #1
 8004402:	428c      	cmp	r4, r1
 8004404:	d1f6      	bne.n	80043f4 <memchr+0x8>
 8004406:	bd10      	pop	{r4, pc}

08004408 <memcpy>:
 8004408:	440a      	add	r2, r1
 800440a:	4291      	cmp	r1, r2
 800440c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004410:	d100      	bne.n	8004414 <memcpy+0xc>
 8004412:	4770      	bx	lr
 8004414:	b510      	push	{r4, lr}
 8004416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800441a:	4291      	cmp	r1, r2
 800441c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004420:	d1f9      	bne.n	8004416 <memcpy+0xe>
 8004422:	bd10      	pop	{r4, pc}

08004424 <_realloc_r>:
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004428:	4680      	mov	r8, r0
 800442a:	4615      	mov	r5, r2
 800442c:	460c      	mov	r4, r1
 800442e:	b921      	cbnz	r1, 800443a <_realloc_r+0x16>
 8004430:	4611      	mov	r1, r2
 8004432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004436:	f7ff ba65 	b.w	8003904 <_malloc_r>
 800443a:	b92a      	cbnz	r2, 8004448 <_realloc_r+0x24>
 800443c:	f7ff f9f8 	bl	8003830 <_free_r>
 8004440:	2400      	movs	r4, #0
 8004442:	4620      	mov	r0, r4
 8004444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004448:	f000 f89e 	bl	8004588 <_malloc_usable_size_r>
 800444c:	4285      	cmp	r5, r0
 800444e:	4606      	mov	r6, r0
 8004450:	d802      	bhi.n	8004458 <_realloc_r+0x34>
 8004452:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004456:	d8f4      	bhi.n	8004442 <_realloc_r+0x1e>
 8004458:	4629      	mov	r1, r5
 800445a:	4640      	mov	r0, r8
 800445c:	f7ff fa52 	bl	8003904 <_malloc_r>
 8004460:	4607      	mov	r7, r0
 8004462:	2800      	cmp	r0, #0
 8004464:	d0ec      	beq.n	8004440 <_realloc_r+0x1c>
 8004466:	42b5      	cmp	r5, r6
 8004468:	462a      	mov	r2, r5
 800446a:	4621      	mov	r1, r4
 800446c:	bf28      	it	cs
 800446e:	4632      	movcs	r2, r6
 8004470:	f7ff ffca 	bl	8004408 <memcpy>
 8004474:	4621      	mov	r1, r4
 8004476:	4640      	mov	r0, r8
 8004478:	f7ff f9da 	bl	8003830 <_free_r>
 800447c:	463c      	mov	r4, r7
 800447e:	e7e0      	b.n	8004442 <_realloc_r+0x1e>

08004480 <__swhatbuf_r>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	460c      	mov	r4, r1
 8004484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004488:	4615      	mov	r5, r2
 800448a:	2900      	cmp	r1, #0
 800448c:	461e      	mov	r6, r3
 800448e:	b096      	sub	sp, #88	@ 0x58
 8004490:	da0c      	bge.n	80044ac <__swhatbuf_r+0x2c>
 8004492:	89a3      	ldrh	r3, [r4, #12]
 8004494:	2100      	movs	r1, #0
 8004496:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800449a:	bf14      	ite	ne
 800449c:	2340      	movne	r3, #64	@ 0x40
 800449e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80044a2:	2000      	movs	r0, #0
 80044a4:	6031      	str	r1, [r6, #0]
 80044a6:	602b      	str	r3, [r5, #0]
 80044a8:	b016      	add	sp, #88	@ 0x58
 80044aa:	bd70      	pop	{r4, r5, r6, pc}
 80044ac:	466a      	mov	r2, sp
 80044ae:	f000 f849 	bl	8004544 <_fstat_r>
 80044b2:	2800      	cmp	r0, #0
 80044b4:	dbed      	blt.n	8004492 <__swhatbuf_r+0x12>
 80044b6:	9901      	ldr	r1, [sp, #4]
 80044b8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80044bc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80044c0:	4259      	negs	r1, r3
 80044c2:	4159      	adcs	r1, r3
 80044c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044c8:	e7eb      	b.n	80044a2 <__swhatbuf_r+0x22>

080044ca <__smakebuf_r>:
 80044ca:	898b      	ldrh	r3, [r1, #12]
 80044cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044ce:	079d      	lsls	r5, r3, #30
 80044d0:	4606      	mov	r6, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	d507      	bpl.n	80044e6 <__smakebuf_r+0x1c>
 80044d6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	2301      	movs	r3, #1
 80044e0:	6163      	str	r3, [r4, #20]
 80044e2:	b003      	add	sp, #12
 80044e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044e6:	466a      	mov	r2, sp
 80044e8:	ab01      	add	r3, sp, #4
 80044ea:	f7ff ffc9 	bl	8004480 <__swhatbuf_r>
 80044ee:	9f00      	ldr	r7, [sp, #0]
 80044f0:	4605      	mov	r5, r0
 80044f2:	4639      	mov	r1, r7
 80044f4:	4630      	mov	r0, r6
 80044f6:	f7ff fa05 	bl	8003904 <_malloc_r>
 80044fa:	b948      	cbnz	r0, 8004510 <__smakebuf_r+0x46>
 80044fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004500:	059a      	lsls	r2, r3, #22
 8004502:	d4ee      	bmi.n	80044e2 <__smakebuf_r+0x18>
 8004504:	f023 0303 	bic.w	r3, r3, #3
 8004508:	f043 0302 	orr.w	r3, r3, #2
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	e7e2      	b.n	80044d6 <__smakebuf_r+0xc>
 8004510:	89a3      	ldrh	r3, [r4, #12]
 8004512:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800451a:	81a3      	strh	r3, [r4, #12]
 800451c:	9b01      	ldr	r3, [sp, #4]
 800451e:	6020      	str	r0, [r4, #0]
 8004520:	b15b      	cbz	r3, 800453a <__smakebuf_r+0x70>
 8004522:	4630      	mov	r0, r6
 8004524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004528:	f000 f81e 	bl	8004568 <_isatty_r>
 800452c:	b128      	cbz	r0, 800453a <__smakebuf_r+0x70>
 800452e:	89a3      	ldrh	r3, [r4, #12]
 8004530:	f023 0303 	bic.w	r3, r3, #3
 8004534:	f043 0301 	orr.w	r3, r3, #1
 8004538:	81a3      	strh	r3, [r4, #12]
 800453a:	89a3      	ldrh	r3, [r4, #12]
 800453c:	431d      	orrs	r5, r3
 800453e:	81a5      	strh	r5, [r4, #12]
 8004540:	e7cf      	b.n	80044e2 <__smakebuf_r+0x18>
	...

08004544 <_fstat_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	2300      	movs	r3, #0
 8004548:	4d06      	ldr	r5, [pc, #24]	@ (8004564 <_fstat_r+0x20>)
 800454a:	4604      	mov	r4, r0
 800454c:	4608      	mov	r0, r1
 800454e:	4611      	mov	r1, r2
 8004550:	602b      	str	r3, [r5, #0]
 8004552:	f7fe fd68 	bl	8003026 <_fstat>
 8004556:	1c43      	adds	r3, r0, #1
 8004558:	d102      	bne.n	8004560 <_fstat_r+0x1c>
 800455a:	682b      	ldr	r3, [r5, #0]
 800455c:	b103      	cbz	r3, 8004560 <_fstat_r+0x1c>
 800455e:	6023      	str	r3, [r4, #0]
 8004560:	bd38      	pop	{r3, r4, r5, pc}
 8004562:	bf00      	nop
 8004564:	200003d4 	.word	0x200003d4

08004568 <_isatty_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	2300      	movs	r3, #0
 800456c:	4d05      	ldr	r5, [pc, #20]	@ (8004584 <_isatty_r+0x1c>)
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	602b      	str	r3, [r5, #0]
 8004574:	f7fe feba 	bl	80032ec <_isatty>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_isatty_r+0x1a>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_isatty_r+0x1a>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	200003d4 	.word	0x200003d4

08004588 <_malloc_usable_size_r>:
 8004588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800458c:	1f18      	subs	r0, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	bfbc      	itt	lt
 8004592:	580b      	ldrlt	r3, [r1, r0]
 8004594:	18c0      	addlt	r0, r0, r3
 8004596:	4770      	bx	lr

08004598 <_init>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr

080045a4 <_fini>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	bf00      	nop
 80045a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045aa:	bc08      	pop	{r3}
 80045ac:	469e      	mov	lr, r3
 80045ae:	4770      	bx	lr
