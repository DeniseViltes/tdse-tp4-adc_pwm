
tdse-tp4-adc_pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08004804  08004804  00005804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004974  08004974  00006084  2**0
                  CONTENTS
  4 .ARM          00000008  08004974  08004974  00005974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800497c  0800497c  00006084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800497c  0800497c  0000597c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004980  08004980  00005980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08004984  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000084  08004a08  00006084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08004a08  000063e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f229  00000000  00000000  000060ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ee  00000000  00000000  000152d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  00017bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afd  00000000  00000000  000189f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001954e  00000000  00000000  000194f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d11  00000000  00000000  00032a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009025e  00000000  00000000  00044754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d49b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  000d49f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d9084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	080047ec 	.word	0x080047ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	080047ec 	.word	0x080047ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f003 f98e 	bl	8003480 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fb40 	bl	80007e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f80d 	bl	8000186 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f922 	bl	80003b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f8f6 	bl	8000360 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000174:	f000 f85c 	bl	8000230 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000178:	f000 f898 	bl	80002ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  app_init();
 800017c:	f002 fc9a 	bl	8002ab4 <app_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    app_update();
 8000180:	f002 fd36 	bl	8002bf0 <app_update>
 8000184:	e7fc      	b.n	8000180 <main+0x24>

08000186 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000186:	b580      	push	{r7, lr}
 8000188:	b094      	sub	sp, #80	@ 0x50
 800018a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800018c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000190:	2228      	movs	r2, #40	@ 0x28
 8000192:	2100      	movs	r1, #0
 8000194:	4618      	mov	r0, r3
 8000196:	f003 fbf8 	bl	800398a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800019a:	f107 0314 	add.w	r3, r7, #20
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
 80001a2:	605a      	str	r2, [r3, #4]
 80001a4:	609a      	str	r2, [r3, #8]
 80001a6:	60da      	str	r2, [r3, #12]
 80001a8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001aa:	1d3b      	adds	r3, r7, #4
 80001ac:	2200      	movs	r2, #0
 80001ae:	601a      	str	r2, [r3, #0]
 80001b0:	605a      	str	r2, [r3, #4]
 80001b2:	609a      	str	r2, [r3, #8]
 80001b4:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2302      	movs	r3, #2
 80001b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001be:	2310      	movs	r3, #16
 80001c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c2:	2302      	movs	r3, #2
 80001c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001c6:	2300      	movs	r3, #0
 80001c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001ca:	2300      	movs	r3, #0
 80001cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 fa3a 	bl	800164c <HAL_RCC_OscConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80001de:	f000 f957 	bl	8000490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e2:	230f      	movs	r3, #15
 80001e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e6:	2302      	movs	r3, #2
 80001e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f001 fca6 	bl	8001b50 <HAL_RCC_ClockConfig>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <SystemClock_Config+0x88>
  {
    Error_Handler();
 800020a:	f000 f941 	bl	8000490 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020e:	2302      	movs	r3, #2
 8000210:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000212:	2300      	movs	r3, #0
 8000214:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fe27 	bl	8001e6c <HAL_RCCEx_PeriphCLKConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000224:	f000 f934 	bl	8000490 <Error_Handler>
  }
}
 8000228:	bf00      	nop
 800022a:	3750      	adds	r7, #80	@ 0x50
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000242:	4a19      	ldr	r2, [pc, #100]	@ (80002a8 <MX_ADC1_Init+0x78>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800025a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800025e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000260:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026c:	480d      	ldr	r0, [pc, #52]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800026e:	f000 fb1d 	bl	80008ac <HAL_ADC_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000278:	f000 f90a 	bl	8000490 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800028e:	f000 fd6f 	bl	8000d70 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000298:	f000 f8fa 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200000a0 	.word	0x200000a0
 80002a8:	40012400 	.word	0x40012400

080002ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b08a      	sub	sp, #40	@ 0x28
 80002b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002b2:	f107 0320 	add.w	r3, r7, #32
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]
 80002ca:	615a      	str	r2, [r3, #20]
 80002cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002ce:	4b22      	ldr	r3, [pc, #136]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002d0:	4a22      	ldr	r2, [pc, #136]	@ (800035c <MX_TIM3_Init+0xb0>)
 80002d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80002d4:	4b20      	ldr	r3, [pc, #128]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002da:	4b1f      	ldr	r3, [pc, #124]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80002e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80002e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80002f4:	4818      	ldr	r0, [pc, #96]	@ (8000358 <MX_TIM3_Init+0xac>)
 80002f6:	f001 fe6f 	bl	8001fd8 <HAL_TIM_PWM_Init>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000300:	f000 f8c6 	bl	8000490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000304:	2300      	movs	r3, #0
 8000306:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000308:	2300      	movs	r3, #0
 800030a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800030c:	f107 0320 	add.w	r3, r7, #32
 8000310:	4619      	mov	r1, r3
 8000312:	4811      	ldr	r0, [pc, #68]	@ (8000358 <MX_TIM3_Init+0xac>)
 8000314:	f002 fa92 	bl	800283c <HAL_TIMEx_MasterConfigSynchronization>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800031e:	f000 f8b7 	bl	8000490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000322:	2360      	movs	r3, #96	@ 0x60
 8000324:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800032a:	2300      	movs	r3, #0
 800032c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	2200      	movs	r2, #0
 8000336:	4619      	mov	r1, r3
 8000338:	4807      	ldr	r0, [pc, #28]	@ (8000358 <MX_TIM3_Init+0xac>)
 800033a:	f001 ffa3 	bl	8002284 <HAL_TIM_PWM_ConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000344:	f000 f8a4 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000348:	4803      	ldr	r0, [pc, #12]	@ (8000358 <MX_TIM3_Init+0xac>)
 800034a:	f000 f93b 	bl	80005c4 <HAL_TIM_MspPostInit>

}
 800034e:	bf00      	nop
 8000350:	3728      	adds	r7, #40	@ 0x28
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000d0 	.word	0x200000d0
 800035c:	40000400 	.word	0x40000400

08000360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000364:	4b11      	ldr	r3, [pc, #68]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000366:	4a12      	ldr	r2, [pc, #72]	@ (80003b0 <MX_USART2_UART_Init+0x50>)
 8000368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800036a:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 800036c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000372:	4b0e      	ldr	r3, [pc, #56]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000378:	4b0c      	ldr	r3, [pc, #48]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800037e:	4b0b      	ldr	r3, [pc, #44]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000380:	2200      	movs	r2, #0
 8000382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000384:	4b09      	ldr	r3, [pc, #36]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000386:	220c      	movs	r2, #12
 8000388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800038a:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000390:	4b06      	ldr	r3, [pc, #24]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000396:	4805      	ldr	r0, [pc, #20]	@ (80003ac <MX_USART2_UART_Init+0x4c>)
 8000398:	f002 faae 	bl	80028f8 <HAL_UART_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80003a2:	f000 f875 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000118 	.word	0x20000118
 80003b0:	40004400 	.word	0x40004400

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a2c      	ldr	r2, [pc, #176]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003ce:	f043 0310 	orr.w	r3, r3, #16
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0310 	and.w	r3, r3, #16
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e0:	4b27      	ldr	r3, [pc, #156]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	4a26      	ldr	r2, [pc, #152]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003e6:	f043 0320 	orr.w	r3, r3, #32
 80003ea:	6193      	str	r3, [r2, #24]
 80003ec:	4b24      	ldr	r3, [pc, #144]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	f003 0320 	and.w	r3, r3, #32
 80003f4:	60bb      	str	r3, [r7, #8]
 80003f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f8:	4b21      	ldr	r3, [pc, #132]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a20      	ldr	r2, [pc, #128]	@ (8000480 <MX_GPIO_Init+0xcc>)
 80003fe:	f043 0304 	orr.w	r3, r3, #4
 8000402:	6193      	str	r3, [r2, #24]
 8000404:	4b1e      	ldr	r3, [pc, #120]	@ (8000480 <MX_GPIO_Init+0xcc>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	f003 0304 	and.w	r3, r3, #4
 800040c:	607b      	str	r3, [r7, #4]
 800040e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000410:	4b1b      	ldr	r3, [pc, #108]	@ (8000480 <MX_GPIO_Init+0xcc>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1a      	ldr	r2, [pc, #104]	@ (8000480 <MX_GPIO_Init+0xcc>)
 8000416:	f043 0308 	orr.w	r3, r3, #8
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b18      	ldr	r3, [pc, #96]	@ (8000480 <MX_GPIO_Init+0xcc>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0308 	and.w	r3, r3, #8
 8000424:	603b      	str	r3, [r7, #0]
 8000426:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2120      	movs	r1, #32
 800042c:	4815      	ldr	r0, [pc, #84]	@ (8000484 <MX_GPIO_Init+0xd0>)
 800042e:	f001 f8d3 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000432:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000438:	4b13      	ldr	r3, [pc, #76]	@ (8000488 <MX_GPIO_Init+0xd4>)
 800043a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	2300      	movs	r3, #0
 800043e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	4619      	mov	r1, r3
 8000446:	4811      	ldr	r0, [pc, #68]	@ (800048c <MX_GPIO_Init+0xd8>)
 8000448:	f000 ff42 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800044c:	2320      	movs	r3, #32
 800044e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000450:	2301      	movs	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000454:	2300      	movs	r3, #0
 8000456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000458:	2302      	movs	r3, #2
 800045a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	4619      	mov	r1, r3
 8000462:	4808      	ldr	r0, [pc, #32]	@ (8000484 <MX_GPIO_Init+0xd0>)
 8000464:	f000 ff34 	bl	80012d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2100      	movs	r1, #0
 800046c:	2028      	movs	r0, #40	@ 0x28
 800046e:	f000 fef2 	bl	8001256 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000472:	2028      	movs	r0, #40	@ 0x28
 8000474:	f000 ff0b 	bl	800128e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000478:	bf00      	nop
 800047a:	3720      	adds	r7, #32
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40021000 	.word	0x40021000
 8000484:	40010800 	.word	0x40010800
 8000488:	10110000 	.word	0x10110000
 800048c:	40011000 	.word	0x40011000

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	bf00      	nop
 800049a:	e7fd      	b.n	8000498 <Error_Handler+0x8>

0800049c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a2:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a14      	ldr	r2, [pc, #80]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	60bb      	str	r3, [r7, #8]
 80004b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a0e      	ldr	r2, [pc, #56]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <HAL_MspInit+0x5c>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004d2:	4b0a      	ldr	r3, [pc, #40]	@ (80004fc <HAL_MspInit+0x60>)
 80004d4:	685b      	ldr	r3, [r3, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <HAL_MspInit+0x60>)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010000 	.word	0x40010000

08000500 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a18      	ldr	r2, [pc, #96]	@ (800057c <HAL_ADC_MspInit+0x7c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d129      	bne.n	8000574 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <HAL_ADC_MspInit+0x80>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <HAL_ADC_MspInit+0x80>)
 8000526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b14      	ldr	r3, [pc, #80]	@ (8000580 <HAL_ADC_MspInit+0x80>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <HAL_ADC_MspInit+0x80>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a10      	ldr	r2, [pc, #64]	@ (8000580 <HAL_ADC_MspInit+0x80>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <HAL_ADC_MspInit+0x80>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000550:	2301      	movs	r3, #1
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000554:	2303      	movs	r3, #3
 8000556:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	4619      	mov	r1, r3
 800055e:	4809      	ldr	r0, [pc, #36]	@ (8000584 <HAL_ADC_MspInit+0x84>)
 8000560:	f000 feb6 	bl	80012d0 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000564:	2200      	movs	r2, #0
 8000566:	2100      	movs	r1, #0
 8000568:	2012      	movs	r0, #18
 800056a:	f000 fe74 	bl	8001256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800056e:	2012      	movs	r0, #18
 8000570:	f000 fe8d 	bl	800128e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000574:	bf00      	nop
 8000576:	3720      	adds	r7, #32
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	40012400 	.word	0x40012400
 8000580:	40021000 	.word	0x40021000
 8000584:	40010800 	.word	0x40010800

08000588 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a09      	ldr	r2, [pc, #36]	@ (80005bc <HAL_TIM_PWM_MspInit+0x34>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d10b      	bne.n	80005b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <HAL_TIM_PWM_MspInit+0x38>)
 800059c:	69db      	ldr	r3, [r3, #28]
 800059e:	4a08      	ldr	r2, [pc, #32]	@ (80005c0 <HAL_TIM_PWM_MspInit+0x38>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	61d3      	str	r3, [r2, #28]
 80005a6:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <HAL_TIM_PWM_MspInit+0x38>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80005b2:	bf00      	nop
 80005b4:	3714      	adds	r7, #20
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr
 80005bc:	40000400 	.word	0x40000400
 80005c0:	40021000 	.word	0x40021000

080005c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0310 	add.w	r3, r7, #16
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0f      	ldr	r2, [pc, #60]	@ (800061c <HAL_TIM_MspPostInit+0x58>)
 80005e0:	4293      	cmp	r3, r2
 80005e2:	d117      	bne.n	8000614 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <HAL_TIM_MspPostInit+0x5c>)
 80005e6:	699b      	ldr	r3, [r3, #24]
 80005e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <HAL_TIM_MspPostInit+0x5c>)
 80005ea:	f043 0304 	orr.w	r3, r3, #4
 80005ee:	6193      	str	r3, [r2, #24]
 80005f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <HAL_TIM_MspPostInit+0x5c>)
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	f003 0304 	and.w	r3, r3, #4
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005fc:	2340      	movs	r3, #64	@ 0x40
 80005fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	2302      	movs	r3, #2
 8000606:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	4619      	mov	r1, r3
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <HAL_TIM_MspPostInit+0x60>)
 8000610:	f000 fe5e 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40000400 	.word	0x40000400
 8000620:	40021000 	.word	0x40021000
 8000624:	40010800 	.word	0x40010800

08000628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000630:	f107 0310 	add.w	r3, r7, #16
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a15      	ldr	r2, [pc, #84]	@ (8000698 <HAL_UART_MspInit+0x70>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d123      	bne.n	8000690 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000648:	4b14      	ldr	r3, [pc, #80]	@ (800069c <HAL_UART_MspInit+0x74>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a13      	ldr	r2, [pc, #76]	@ (800069c <HAL_UART_MspInit+0x74>)
 800064e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000652:	61d3      	str	r3, [r2, #28]
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <HAL_UART_MspInit+0x74>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <HAL_UART_MspInit+0x74>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a0d      	ldr	r2, [pc, #52]	@ (800069c <HAL_UART_MspInit+0x74>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <HAL_UART_MspInit+0x74>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000678:	230c      	movs	r3, #12
 800067a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0310 	add.w	r3, r7, #16
 8000688:	4619      	mov	r1, r3
 800068a:	4805      	ldr	r0, [pc, #20]	@ (80006a0 <HAL_UART_MspInit+0x78>)
 800068c:	f000 fe20 	bl	80012d0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000690:	bf00      	nop
 8000692:	3720      	adds	r7, #32
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40004400 	.word	0x40004400
 800069c:	40021000 	.word	0x40021000
 80006a0:	40010800 	.word	0x40010800

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <NMI_Handler+0x4>

080006ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <HardFault_Handler+0x4>

080006b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <MemManage_Handler+0x4>

080006bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <BusFault_Handler+0x4>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <UsageFault_Handler+0x4>

080006cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	bc80      	pop	{r7}
 80006e2:	4770      	bx	lr

080006e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f4:	f000 f8be 	bl	8000874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80006f8:	f000 fde3 	bl	80012c2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000704:	4802      	ldr	r0, [pc, #8]	@ (8000710 <ADC1_2_IRQHandler+0x10>)
 8000706:	f000 fa6b 	bl	8000be0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000a0 	.word	0x200000a0

08000714 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000718:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800071c:	f000 ff74 	bl	8001608 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800072c:	4a14      	ldr	r2, [pc, #80]	@ (8000780 <_sbrk+0x5c>)
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <_sbrk+0x60>)
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000740:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <_sbrk+0x64>)
 8000742:	4a12      	ldr	r2, [pc, #72]	@ (800078c <_sbrk+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000746:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	429a      	cmp	r2, r3
 8000752:	d207      	bcs.n	8000764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000754:	f003 f968 	bl	8003a28 <__errno>
 8000758:	4603      	mov	r3, r0
 800075a:	220c      	movs	r2, #12
 800075c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	e009      	b.n	8000778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000764:	4b08      	ldr	r3, [pc, #32]	@ (8000788 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076a:	4b07      	ldr	r3, [pc, #28]	@ (8000788 <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	4a05      	ldr	r2, [pc, #20]	@ (8000788 <_sbrk+0x64>)
 8000774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20005000 	.word	0x20005000
 8000784:	00000400 	.word	0x00000400
 8000788:	20000160 	.word	0x20000160
 800078c:	200003e8 	.word	0x200003e8

08000790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800079c:	f7ff fff8 	bl	8000790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480b      	ldr	r0, [pc, #44]	@ (80007d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007a2:	490c      	ldr	r1, [pc, #48]	@ (80007d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007a4:	4a0c      	ldr	r2, [pc, #48]	@ (80007d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a09      	ldr	r2, [pc, #36]	@ (80007dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007b8:	4c09      	ldr	r4, [pc, #36]	@ (80007e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007c6:	f003 f935 	bl	8003a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fcc7 	bl	800015c <main>
  bx lr
 80007ce:	4770      	bx	lr
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80007d8:	08004984 	.word	0x08004984
  ldr r2, =_sbss
 80007dc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80007e0:	200003e4 	.word	0x200003e4

080007e4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <CAN1_RX1_IRQHandler>
	...

080007e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <HAL_Init+0x28>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a07      	ldr	r2, [pc, #28]	@ (8000810 <HAL_Init+0x28>)
 80007f2:	f043 0310 	orr.w	r3, r3, #16
 80007f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 fd21 	bl	8001240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fe:	2000      	movs	r0, #0
 8000800:	f000 f808 	bl	8000814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000804:	f7ff fe4a 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000808:	2300      	movs	r3, #0
}
 800080a:	4618      	mov	r0, r3
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40022000 	.word	0x40022000

08000814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <HAL_InitTick+0x54>)
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <HAL_InitTick+0x58>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	4619      	mov	r1, r3
 8000826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800082a:	fbb3 f3f1 	udiv	r3, r3, r1
 800082e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000832:	4618      	mov	r0, r3
 8000834:	f000 fd39 	bl	80012aa <HAL_SYSTICK_Config>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e00e      	b.n	8000860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2b0f      	cmp	r3, #15
 8000846:	d80a      	bhi.n	800085e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000848:	2200      	movs	r2, #0
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	f04f 30ff 	mov.w	r0, #4294967295
 8000850:	f000 fd01 	bl	8001256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000854:	4a06      	ldr	r2, [pc, #24]	@ (8000870 <HAL_InitTick+0x5c>)
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000000 	.word	0x20000000
 800086c:	20000008 	.word	0x20000008
 8000870:	20000004 	.word	0x20000004

08000874 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <HAL_IncTick+0x1c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	461a      	mov	r2, r3
 800087e:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <HAL_IncTick+0x20>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a03      	ldr	r2, [pc, #12]	@ (8000894 <HAL_IncTick+0x20>)
 8000886:	6013      	str	r3, [r2, #0]
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	20000008 	.word	0x20000008
 8000894:	20000164 	.word	0x20000164

08000898 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b02      	ldr	r3, [pc, #8]	@ (80008a8 <HAL_GetTick+0x10>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20000164 	.word	0x20000164

080008ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80008bc:	2300      	movs	r3, #0
 80008be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d101      	bne.n	80008ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e0be      	b.n	8000a4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d109      	bne.n	80008f0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff fe08 	bl	8000500 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 fb8f 	bl	8001014 <ADC_ConversionStop_Disable>
 80008f6:	4603      	mov	r3, r0
 80008f8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008fe:	f003 0310 	and.w	r3, r3, #16
 8000902:	2b00      	cmp	r3, #0
 8000904:	f040 8099 	bne.w	8000a3a <HAL_ADC_Init+0x18e>
 8000908:	7dfb      	ldrb	r3, [r7, #23]
 800090a:	2b00      	cmp	r3, #0
 800090c:	f040 8095 	bne.w	8000a3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000914:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000918:	f023 0302 	bic.w	r3, r3, #2
 800091c:	f043 0202 	orr.w	r2, r3, #2
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800092c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	7b1b      	ldrb	r3, [r3, #12]
 8000932:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000934:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	4313      	orrs	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	689b      	ldr	r3, [r3, #8]
 8000940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000944:	d003      	beq.n	800094e <HAL_ADC_Init+0xa2>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d102      	bne.n	8000954 <HAL_ADC_Init+0xa8>
 800094e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000952:	e000      	b.n	8000956 <HAL_ADC_Init+0xaa>
 8000954:	2300      	movs	r3, #0
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7d1b      	ldrb	r3, [r3, #20]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d119      	bne.n	8000998 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	7b1b      	ldrb	r3, [r3, #12]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d109      	bne.n	8000980 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	3b01      	subs	r3, #1
 8000972:	035a      	lsls	r2, r3, #13
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	4313      	orrs	r3, r2
 8000978:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	e00b      	b.n	8000998 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000984:	f043 0220 	orr.w	r2, r3, #32
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000990:	f043 0201 	orr.w	r2, r3, #1
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	430a      	orrs	r2, r1
 80009aa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689a      	ldr	r2, [r3, #8]
 80009b2:	4b28      	ldr	r3, [pc, #160]	@ (8000a54 <HAL_ADC_Init+0x1a8>)
 80009b4:	4013      	ands	r3, r2
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	6812      	ldr	r2, [r2, #0]
 80009ba:	68b9      	ldr	r1, [r7, #8]
 80009bc:	430b      	orrs	r3, r1
 80009be:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80009c8:	d003      	beq.n	80009d2 <HAL_ADC_Init+0x126>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d104      	bne.n	80009dc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	051b      	lsls	r3, r3, #20
 80009da:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	430a      	orrs	r2, r1
 80009ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689a      	ldr	r2, [r3, #8]
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <HAL_ADC_Init+0x1ac>)
 80009f8:	4013      	ands	r3, r2
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d10b      	bne.n	8000a18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2200      	movs	r2, #0
 8000a04:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a0a:	f023 0303 	bic.w	r3, r3, #3
 8000a0e:	f043 0201 	orr.w	r2, r3, #1
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a16:	e018      	b.n	8000a4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a1c:	f023 0312 	bic.w	r3, r3, #18
 8000a20:	f043 0210 	orr.w	r2, r3, #16
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a2c:	f043 0201 	orr.w	r2, r3, #1
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a38:	e007      	b.n	8000a4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a3e:	f043 0210 	orr.w	r2, r3, #16
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
 8000a48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	ffe1f7fd 	.word	0xffe1f7fd
 8000a58:	ff1f0efe 	.word	0xff1f0efe

08000a5c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d101      	bne.n	8000a76 <HAL_ADC_Start_IT+0x1a>
 8000a72:	2302      	movs	r3, #2
 8000a74:	e0a0      	b.n	8000bb8 <HAL_ADC_Start_IT+0x15c>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f000 fa6e 	bl	8000f60 <ADC_Enable>
 8000a84:	4603      	mov	r3, r0
 8000a86:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f040 808f 	bne.w	8000bae <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000a98:	f023 0301 	bic.w	r3, r3, #1
 8000a9c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a45      	ldr	r2, [pc, #276]	@ (8000bc0 <HAL_ADC_Start_IT+0x164>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d105      	bne.n	8000aba <HAL_ADC_Start_IT+0x5e>
 8000aae:	4b45      	ldr	r3, [pc, #276]	@ (8000bc4 <HAL_ADC_Start_IT+0x168>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d115      	bne.n	8000ae6 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000abe:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d026      	beq.n	8000b22 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ad8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000adc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ae4:	e01d      	b.n	8000b22 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a33      	ldr	r2, [pc, #204]	@ (8000bc4 <HAL_ADC_Start_IT+0x168>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d004      	beq.n	8000b06 <HAL_ADC_Start_IT+0xaa>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc0 <HAL_ADC_Start_IT+0x164>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d10d      	bne.n	8000b22 <HAL_ADC_Start_IT+0xc6>
 8000b06:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc4 <HAL_ADC_Start_IT+0x168>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d007      	beq.n	8000b22 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b16:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000b1a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d006      	beq.n	8000b3c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b32:	f023 0206 	bic.w	r2, r3, #6
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b3a:	e002      	b.n	8000b42 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f06f 0202 	mvn.w	r2, #2
 8000b52:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f042 0220 	orr.w	r2, r2, #32
 8000b62:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000b6e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b72:	d113      	bne.n	8000b9c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b78:	4a11      	ldr	r2, [pc, #68]	@ (8000bc0 <HAL_ADC_Start_IT+0x164>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d105      	bne.n	8000b8a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_ADC_Start_IT+0x168>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d108      	bne.n	8000b9c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	e00c      	b.n	8000bb6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	e003      	b.n	8000bb6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40012800 	.word	0x40012800
 8000bc4:	40012400 	.word	0x40012400

08000bc8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr

08000be0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	f003 0320 	and.w	r3, r3, #32
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d03e      	beq.n	8000c80 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f003 0302 	and.w	r3, r3, #2
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d039      	beq.n	8000c80 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d105      	bne.n	8000c24 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000c2e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c32:	d11d      	bne.n	8000c70 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d119      	bne.n	8000c70 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0220 	bic.w	r2, r2, #32
 8000c4a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d105      	bne.n	8000c70 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c68:	f043 0201 	orr.w	r2, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f002 f8c9 	bl	8002e08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f06f 0212 	mvn.w	r2, #18
 8000c7e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d04d      	beq.n	8000d26 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	f003 0304 	and.w	r3, r3, #4
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d048      	beq.n	8000d26 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d105      	bne.n	8000cac <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ca4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000cb6:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000cba:	d012      	beq.n	8000ce2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d125      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000cd4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000cd8:	d11d      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d119      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000cf0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d105      	bne.n	8000d16 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d0e:	f043 0201 	orr.w	r2, r3, #1
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 f9bd 	bl	8001096 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f06f 020c 	mvn.w	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d012      	beq.n	8000d56 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00d      	beq.n	8000d56 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d3e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f809 	bl	8000d5e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f06f 0201 	mvn.w	r2, #1
 8000d54:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr

08000d70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d101      	bne.n	8000d90 <HAL_ADC_ConfigChannel+0x20>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e0dc      	b.n	8000f4a <HAL_ADC_ConfigChannel+0x1da>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b06      	cmp	r3, #6
 8000d9e:	d81c      	bhi.n	8000dda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	3b05      	subs	r3, #5
 8000db2:	221f      	movs	r2, #31
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	4019      	ands	r1, r3
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	6818      	ldr	r0, [r3, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	3b05      	subs	r3, #5
 8000dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dd8:	e03c      	b.n	8000e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	2b0c      	cmp	r3, #12
 8000de0:	d81c      	bhi.n	8000e1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	4613      	mov	r3, r2
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	4413      	add	r3, r2
 8000df2:	3b23      	subs	r3, #35	@ 0x23
 8000df4:	221f      	movs	r2, #31
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4019      	ands	r1, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	4613      	mov	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	3b23      	subs	r3, #35	@ 0x23
 8000e0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	430a      	orrs	r2, r1
 8000e18:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e1a:	e01b      	b.n	8000e54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3b41      	subs	r3, #65	@ 0x41
 8000e2e:	221f      	movs	r2, #31
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4019      	ands	r1, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	3b41      	subs	r3, #65	@ 0x41
 8000e48:	fa00 f203 	lsl.w	r2, r0, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b09      	cmp	r3, #9
 8000e5a:	d91c      	bls.n	8000e96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	68d9      	ldr	r1, [r3, #12]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	3b1e      	subs	r3, #30
 8000e6e:	2207      	movs	r2, #7
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	4019      	ands	r1, r3
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6898      	ldr	r0, [r3, #8]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	3b1e      	subs	r3, #30
 8000e88:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	430a      	orrs	r2, r1
 8000e92:	60da      	str	r2, [r3, #12]
 8000e94:	e019      	b.n	8000eca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	6919      	ldr	r1, [r3, #16]
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	4019      	ands	r1, r3
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	6898      	ldr	r0, [r3, #8]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4413      	add	r3, r2
 8000ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b10      	cmp	r3, #16
 8000ed0:	d003      	beq.n	8000eda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ed6:	2b11      	cmp	r3, #17
 8000ed8:	d132      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <HAL_ADC_ConfigChannel+0x1e4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d125      	bne.n	8000f30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d126      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000f00:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b10      	cmp	r3, #16
 8000f08:	d11a      	bne.n	8000f40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a13      	ldr	r2, [pc, #76]	@ (8000f5c <HAL_ADC_ConfigChannel+0x1ec>)
 8000f10:	fba2 2303 	umull	r2, r3, r2, r3
 8000f14:	0c9a      	lsrs	r2, r3, #18
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f20:	e002      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f9      	bne.n	8000f22 <HAL_ADC_ConfigChannel+0x1b2>
 8000f2e:	e007      	b.n	8000f40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f34:	f043 0220 	orr.w	r2, r3, #32
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	40012400 	.word	0x40012400
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	431bde83 	.word	0x431bde83

08000f60 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d040      	beq.n	8001000 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f042 0201 	orr.w	r2, r2, #1
 8000f8c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <ADC_Enable+0xac>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1f      	ldr	r2, [pc, #124]	@ (8001010 <ADC_Enable+0xb0>)
 8000f94:	fba2 2303 	umull	r2, r3, r2, r3
 8000f98:	0c9b      	lsrs	r3, r3, #18
 8000f9a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f9c:	e002      	b.n	8000fa4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f9      	bne.n	8000f9e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000faa:	f7ff fc75 	bl	8000898 <HAL_GetTick>
 8000fae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000fb0:	e01f      	b.n	8000ff2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000fb2:	f7ff fc71 	bl	8000898 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d918      	bls.n	8000ff2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d011      	beq.n	8000ff2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd2:	f043 0210 	orr.w	r2, r3, #16
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fde:	f043 0201 	orr.w	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e007      	b.n	8001002 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d1d8      	bne.n	8000fb2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000
 8001010:	431bde83 	.word	0x431bde83

08001014 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	2b01      	cmp	r3, #1
 800102c:	d12e      	bne.n	800108c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689a      	ldr	r2, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 0201 	bic.w	r2, r2, #1
 800103c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800103e:	f7ff fc2b 	bl	8000898 <HAL_GetTick>
 8001042:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001044:	e01b      	b.n	800107e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001046:	f7ff fc27 	bl	8000898 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d914      	bls.n	800107e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b01      	cmp	r3, #1
 8001060:	d10d      	bne.n	800107e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001066:	f043 0210 	orr.w	r2, r3, #16
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001072:	f043 0201 	orr.w	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e007      	b.n	800108e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b01      	cmp	r3, #1
 800108a:	d0dc      	beq.n	8001046 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001096:	b480      	push	{r7}
 8001098:	b083      	sub	sp, #12
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f003 0307 	and.w	r3, r3, #7
 80010b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010c4:	4013      	ands	r3, r2
 80010c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010da:	4a04      	ldr	r2, [pc, #16]	@ (80010ec <__NVIC_SetPriorityGrouping+0x44>)
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	60d3      	str	r3, [r2, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f4:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <__NVIC_GetPriorityGrouping+0x18>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	0a1b      	lsrs	r3, r3, #8
 80010fa:	f003 0307 	and.w	r3, r3, #7
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	2b00      	cmp	r3, #0
 800111c:	db0b      	blt.n	8001136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	f003 021f 	and.w	r2, r3, #31
 8001124:	4906      	ldr	r1, [pc, #24]	@ (8001140 <__NVIC_EnableIRQ+0x34>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	095b      	lsrs	r3, r3, #5
 800112c:	2001      	movs	r0, #1
 800112e:	fa00 f202 	lsl.w	r2, r0, r2
 8001132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	@ (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	@ (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	@ 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800120c:	d301      	bcc.n	8001212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120e:	2301      	movs	r3, #1
 8001210:	e00f      	b.n	8001232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001212:	4a0a      	ldr	r2, [pc, #40]	@ (800123c <SysTick_Config+0x40>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121a:	210f      	movs	r1, #15
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f7ff ff90 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <SysTick_Config+0x40>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <SysTick_Config+0x40>)
 800122c:	2207      	movs	r2, #7
 800122e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010

08001240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ff2d 	bl	80010a8 <__NVIC_SetPriorityGrouping>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff42 	bl	80010f0 <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff90 	bl	8001198 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5f 	bl	8001144 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff35 	bl	800110c <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffa2 	bl	80011fc <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80012c6:	f001 fcfb 	bl	8002cc0 <HAL_SYSTICK_Callback>
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b08b      	sub	sp, #44	@ 0x2c
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e169      	b.n	80015b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e4:	2201      	movs	r2, #1
 80012e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8158 	bne.w	80015b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a9a      	ldr	r2, [pc, #616]	@ (8001570 <HAL_GPIO_Init+0x2a0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d05e      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800130c:	4a98      	ldr	r2, [pc, #608]	@ (8001570 <HAL_GPIO_Init+0x2a0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d875      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001312:	4a98      	ldr	r2, [pc, #608]	@ (8001574 <HAL_GPIO_Init+0x2a4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d058      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001318:	4a96      	ldr	r2, [pc, #600]	@ (8001574 <HAL_GPIO_Init+0x2a4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d86f      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800131e:	4a96      	ldr	r2, [pc, #600]	@ (8001578 <HAL_GPIO_Init+0x2a8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d052      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001324:	4a94      	ldr	r2, [pc, #592]	@ (8001578 <HAL_GPIO_Init+0x2a8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d869      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800132a:	4a94      	ldr	r2, [pc, #592]	@ (800157c <HAL_GPIO_Init+0x2ac>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d04c      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001330:	4a92      	ldr	r2, [pc, #584]	@ (800157c <HAL_GPIO_Init+0x2ac>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d863      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001336:	4a92      	ldr	r2, [pc, #584]	@ (8001580 <HAL_GPIO_Init+0x2b0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d046      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800133c:	4a90      	ldr	r2, [pc, #576]	@ (8001580 <HAL_GPIO_Init+0x2b0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d85d      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001342:	2b12      	cmp	r3, #18
 8001344:	d82a      	bhi.n	800139c <HAL_GPIO_Init+0xcc>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d859      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800134a:	a201      	add	r2, pc, #4	@ (adr r2, 8001350 <HAL_GPIO_Init+0x80>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	080013cb 	.word	0x080013cb
 8001354:	080013a5 	.word	0x080013a5
 8001358:	080013b7 	.word	0x080013b7
 800135c:	080013f9 	.word	0x080013f9
 8001360:	080013ff 	.word	0x080013ff
 8001364:	080013ff 	.word	0x080013ff
 8001368:	080013ff 	.word	0x080013ff
 800136c:	080013ff 	.word	0x080013ff
 8001370:	080013ff 	.word	0x080013ff
 8001374:	080013ff 	.word	0x080013ff
 8001378:	080013ff 	.word	0x080013ff
 800137c:	080013ff 	.word	0x080013ff
 8001380:	080013ff 	.word	0x080013ff
 8001384:	080013ff 	.word	0x080013ff
 8001388:	080013ff 	.word	0x080013ff
 800138c:	080013ff 	.word	0x080013ff
 8001390:	080013ff 	.word	0x080013ff
 8001394:	080013ad 	.word	0x080013ad
 8001398:	080013c1 	.word	0x080013c1
 800139c:	4a79      	ldr	r2, [pc, #484]	@ (8001584 <HAL_GPIO_Init+0x2b4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a2:	e02c      	b.n	80013fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	623b      	str	r3, [r7, #32]
          break;
 80013aa:	e029      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	3304      	adds	r3, #4
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e024      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	3308      	adds	r3, #8
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e01f      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	330c      	adds	r3, #12
 80013c6:	623b      	str	r3, [r7, #32]
          break;
 80013c8:	e01a      	b.n	8001400 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d2:	2304      	movs	r3, #4
 80013d4:	623b      	str	r3, [r7, #32]
          break;
 80013d6:	e013      	b.n	8001400 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e0:	2308      	movs	r3, #8
 80013e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	611a      	str	r2, [r3, #16]
          break;
 80013ea:	e009      	b.n	8001400 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ec:	2308      	movs	r3, #8
 80013ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	615a      	str	r2, [r3, #20]
          break;
 80013f6:	e003      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x130>
          break;
 80013fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2bff      	cmp	r3, #255	@ 0xff
 8001404:	d801      	bhi.n	800140a <HAL_GPIO_Init+0x13a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	e001      	b.n	800140e <HAL_GPIO_Init+0x13e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3304      	adds	r3, #4
 800140e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2bff      	cmp	r3, #255	@ 0xff
 8001414:	d802      	bhi.n	800141c <HAL_GPIO_Init+0x14c>
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x152>
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	3b08      	subs	r3, #8
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	210f      	movs	r1, #15
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	401a      	ands	r2, r3
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	431a      	orrs	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80b1 	beq.w	80015b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001450:	4b4d      	ldr	r3, [pc, #308]	@ (8001588 <HAL_GPIO_Init+0x2b8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a4c      	ldr	r2, [pc, #304]	@ (8001588 <HAL_GPIO_Init+0x2b8>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b4a      	ldr	r3, [pc, #296]	@ (8001588 <HAL_GPIO_Init+0x2b8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001468:	4a48      	ldr	r2, [pc, #288]	@ (800158c <HAL_GPIO_Init+0x2bc>)
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a40      	ldr	r2, [pc, #256]	@ (8001590 <HAL_GPIO_Init+0x2c0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d013      	beq.n	80014bc <HAL_GPIO_Init+0x1ec>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3f      	ldr	r2, [pc, #252]	@ (8001594 <HAL_GPIO_Init+0x2c4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1e8>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3e      	ldr	r2, [pc, #248]	@ (8001598 <HAL_GPIO_Init+0x2c8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3d      	ldr	r2, [pc, #244]	@ (800159c <HAL_GPIO_Init+0x2cc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b0:	2304      	movs	r3, #4
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014bc:	2300      	movs	r3, #0
 80014be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ce:	492f      	ldr	r1, [pc, #188]	@ (800158c <HAL_GPIO_Init+0x2bc>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014e8:	4b2d      	ldr	r3, [pc, #180]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	492c      	ldr	r1, [pc, #176]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	608b      	str	r3, [r1, #8]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014f6:	4b2a      	ldr	r3, [pc, #168]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4928      	ldr	r1, [pc, #160]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001500:	4013      	ands	r3, r2
 8001502:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001510:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001512:	68da      	ldr	r2, [r3, #12]
 8001514:	4922      	ldr	r1, [pc, #136]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	60cb      	str	r3, [r1, #12]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	491e      	ldr	r1, [pc, #120]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001528:	4013      	ands	r3, r2
 800152a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153a:	685a      	ldr	r2, [r3, #4]
 800153c:	4918      	ldr	r1, [pc, #96]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	604b      	str	r3, [r1, #4]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001546:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4914      	ldr	r1, [pc, #80]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001550:	4013      	ands	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d021      	beq.n	80015a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	490e      	ldr	r1, [pc, #56]	@ (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	600b      	str	r3, [r1, #0]
 800156c:	e021      	b.n	80015b2 <HAL_GPIO_Init+0x2e2>
 800156e:	bf00      	nop
 8001570:	10320000 	.word	0x10320000
 8001574:	10310000 	.word	0x10310000
 8001578:	10220000 	.word	0x10220000
 800157c:	10210000 	.word	0x10210000
 8001580:	10120000 	.word	0x10120000
 8001584:	10110000 	.word	0x10110000
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	40010800 	.word	0x40010800
 8001594:	40010c00 	.word	0x40010c00
 8001598:	40011000 	.word	0x40011000
 800159c:	40011400 	.word	0x40011400
 80015a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4909      	ldr	r1, [pc, #36]	@ (80015d4 <HAL_GPIO_Init+0x304>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	3301      	adds	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f47f ae8e 	bne.w	80012e4 <HAL_GPIO_Init+0x14>
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	372c      	adds	r7, #44	@ 0x2c
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	611a      	str	r2, [r3, #16]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001612:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4013      	ands	r3, r2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800161e:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001624:	88fb      	ldrh	r3, [r7, #6]
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f806 	bl	8001638 <HAL_GPIO_EXTI_Callback>
  }
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e272      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8087 	beq.w	800177a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800166c:	4b92      	ldr	r3, [pc, #584]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b04      	cmp	r3, #4
 8001676:	d00c      	beq.n	8001692 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001678:	4b8f      	ldr	r3, [pc, #572]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b08      	cmp	r3, #8
 8001682:	d112      	bne.n	80016aa <HAL_RCC_OscConfig+0x5e>
 8001684:	4b8c      	ldr	r3, [pc, #560]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001690:	d10b      	bne.n	80016aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001692:	4b89      	ldr	r3, [pc, #548]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d06c      	beq.n	8001778 <HAL_RCC_OscConfig+0x12c>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d168      	bne.n	8001778 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e24c      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b2:	d106      	bne.n	80016c2 <HAL_RCC_OscConfig+0x76>
 80016b4:	4b80      	ldr	r3, [pc, #512]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a7f      	ldr	r2, [pc, #508]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e02e      	b.n	8001720 <HAL_RCC_OscConfig+0xd4>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0x98>
 80016ca:	4b7b      	ldr	r3, [pc, #492]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a7a      	ldr	r2, [pc, #488]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b78      	ldr	r3, [pc, #480]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a77      	ldr	r2, [pc, #476]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e01d      	b.n	8001720 <HAL_RCC_OscConfig+0xd4>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0xbc>
 80016ee:	4b72      	ldr	r3, [pc, #456]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a71      	ldr	r2, [pc, #452]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b6f      	ldr	r3, [pc, #444]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a6e      	ldr	r2, [pc, #440]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e00b      	b.n	8001720 <HAL_RCC_OscConfig+0xd4>
 8001708:	4b6b      	ldr	r3, [pc, #428]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a6a      	ldr	r2, [pc, #424]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800170e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b68      	ldr	r3, [pc, #416]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a67      	ldr	r2, [pc, #412]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800171a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800171e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d013      	beq.n	8001750 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001728:	f7ff f8b6 	bl	8000898 <HAL_GetTick>
 800172c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	e008      	b.n	8001742 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001730:	f7ff f8b2 	bl	8000898 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	2b64      	cmp	r3, #100	@ 0x64
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e200      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	4b5d      	ldr	r3, [pc, #372]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0f0      	beq.n	8001730 <HAL_RCC_OscConfig+0xe4>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff f8a2 	bl	8000898 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff f89e 	bl	8000898 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1ec      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	4b53      	ldr	r3, [pc, #332]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x10c>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	2b00      	cmp	r3, #0
 8001784:	d063      	beq.n	800184e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001786:	4b4c      	ldr	r3, [pc, #304]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00b      	beq.n	80017aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001792:	4b49      	ldr	r3, [pc, #292]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b08      	cmp	r3, #8
 800179c:	d11c      	bne.n	80017d8 <HAL_RCC_OscConfig+0x18c>
 800179e:	4b46      	ldr	r3, [pc, #280]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d116      	bne.n	80017d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	4b43      	ldr	r3, [pc, #268]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x176>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e1c0      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	4b3d      	ldr	r3, [pc, #244]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4939      	ldr	r1, [pc, #228]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d6:	e03a      	b.n	800184e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d020      	beq.n	8001822 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017e0:	4b36      	ldr	r3, [pc, #216]	@ (80018bc <HAL_RCC_OscConfig+0x270>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e6:	f7ff f857 	bl	8000898 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ee:	f7ff f853 	bl	8000898 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e1a1      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0f0      	beq.n	80017ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	4927      	ldr	r1, [pc, #156]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	600b      	str	r3, [r1, #0]
 8001820:	e015      	b.n	800184e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001822:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <HAL_RCC_OscConfig+0x270>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff f836 	bl	8000898 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff f832 	bl	8000898 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e180      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d03a      	beq.n	80018d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d019      	beq.n	8001896 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001862:	4b17      	ldr	r3, [pc, #92]	@ (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff f816 	bl	8000898 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff f812 	bl	8000898 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e160      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	4b0d      	ldr	r3, [pc, #52]	@ (80018b8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800188e:	2001      	movs	r0, #1
 8001890:	f000 face 	bl	8001e30 <RCC_Delay>
 8001894:	e01c      	b.n	80018d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189c:	f7fe fffc 	bl	8000898 <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a2:	e00f      	b.n	80018c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a4:	f7fe fff8 	bl	8000898 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d908      	bls.n	80018c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e146      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	42420000 	.word	0x42420000
 80018c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c4:	4b92      	ldr	r3, [pc, #584]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1e9      	bne.n	80018a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80a6 	beq.w	8001a2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10d      	bne.n	800190a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4b88      	ldr	r3, [pc, #544]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	4a87      	ldr	r2, [pc, #540]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	61d3      	str	r3, [r2, #28]
 80018fa:	4b85      	ldr	r3, [pc, #532]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001906:	2301      	movs	r3, #1
 8001908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800190a:	4b82      	ldr	r3, [pc, #520]	@ (8001b14 <HAL_RCC_OscConfig+0x4c8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001912:	2b00      	cmp	r3, #0
 8001914:	d118      	bne.n	8001948 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001916:	4b7f      	ldr	r3, [pc, #508]	@ (8001b14 <HAL_RCC_OscConfig+0x4c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b14 <HAL_RCC_OscConfig+0x4c8>)
 800191c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001922:	f7fe ffb9 	bl	8000898 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800192a:	f7fe ffb5 	bl	8000898 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b64      	cmp	r3, #100	@ 0x64
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e103      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800193c:	4b75      	ldr	r3, [pc, #468]	@ (8001b14 <HAL_RCC_OscConfig+0x4c8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d106      	bne.n	800195e <HAL_RCC_OscConfig+0x312>
 8001950:	4b6f      	ldr	r3, [pc, #444]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a6e      	ldr	r2, [pc, #440]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	e02d      	b.n	80019ba <HAL_RCC_OscConfig+0x36e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <HAL_RCC_OscConfig+0x334>
 8001966:	4b6a      	ldr	r3, [pc, #424]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	4a69      	ldr	r2, [pc, #420]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6213      	str	r3, [r2, #32]
 8001972:	4b67      	ldr	r3, [pc, #412]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a66      	ldr	r2, [pc, #408]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f023 0304 	bic.w	r3, r3, #4
 800197c:	6213      	str	r3, [r2, #32]
 800197e:	e01c      	b.n	80019ba <HAL_RCC_OscConfig+0x36e>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x356>
 8001988:	4b61      	ldr	r3, [pc, #388]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a60      	ldr	r2, [pc, #384]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	4b5e      	ldr	r3, [pc, #376]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a5d      	ldr	r2, [pc, #372]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	e00b      	b.n	80019ba <HAL_RCC_OscConfig+0x36e>
 80019a2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	6a1b      	ldr	r3, [r3, #32]
 80019a6:	4a5a      	ldr	r2, [pc, #360]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6213      	str	r3, [r2, #32]
 80019ae:	4b58      	ldr	r3, [pc, #352]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a57      	ldr	r2, [pc, #348]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d015      	beq.n	80019ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7fe ff69 	bl	8000898 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7fe ff65 	bl	8000898 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0b1      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	4b4b      	ldr	r3, [pc, #300]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ee      	beq.n	80019ca <HAL_RCC_OscConfig+0x37e>
 80019ec:	e014      	b.n	8001a18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7fe ff53 	bl	8000898 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7fe ff4f 	bl	8000898 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e09b      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	4b40      	ldr	r3, [pc, #256]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	6a1b      	ldr	r3, [r3, #32]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ee      	bne.n	80019f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	4a3b      	ldr	r2, [pc, #236]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 8087 	beq.w	8001b42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a34:	4b36      	ldr	r3, [pc, #216]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d061      	beq.n	8001b04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d146      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <HAL_RCC_OscConfig+0x4cc>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7fe ff23 	bl	8000898 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a56:	f7fe ff1f 	bl	8000898 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e06d      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a68:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	4921      	ldr	r1, [pc, #132]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a90:	4b1f      	ldr	r3, [pc, #124]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a19      	ldr	r1, [r3, #32]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	491b      	ldr	r1, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_RCC_OscConfig+0x4cc>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aae:	f7fe fef3 	bl	8000898 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7fe feef 	bl	8000898 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e03d      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x46a>
 8001ad4:	e035      	b.n	8001b42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <HAL_RCC_OscConfig+0x4cc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7fe fedc 	bl	8000898 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7fe fed8 	bl	8000898 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e026      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_RCC_OscConfig+0x4c4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x498>
 8001b02:	e01e      	b.n	8001b42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e019      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40007000 	.word	0x40007000
 8001b18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b4c <HAL_RCC_OscConfig+0x500>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d106      	bne.n	8001b3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0d0      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d910      	bls.n	8001b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b67      	ldr	r3, [pc, #412]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 0207 	bic.w	r2, r3, #7
 8001b7a:	4965      	ldr	r1, [pc, #404]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b82:	4b63      	ldr	r3, [pc, #396]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0b8      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bac:	4b59      	ldr	r3, [pc, #356]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	4a58      	ldr	r2, [pc, #352]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc4:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4a52      	ldr	r2, [pc, #328]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001bce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b50      	ldr	r3, [pc, #320]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	494d      	ldr	r1, [pc, #308]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d040      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d115      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e07f      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b41      	ldr	r3, [pc, #260]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e073      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e06b      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2e:	4b39      	ldr	r3, [pc, #228]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4936      	ldr	r1, [pc, #216]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c40:	f7fe fe2a 	bl	8000898 <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7fe fe26 	bl	8000898 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e053      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 020c 	and.w	r2, r3, #12
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1eb      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d210      	bcs.n	8001ca0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 0207 	bic.w	r2, r3, #7
 8001c86:	4922      	ldr	r1, [pc, #136]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8e:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e032      	b.n	8001d06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d008      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cac:	4b19      	ldr	r3, [pc, #100]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4916      	ldr	r1, [pc, #88]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0308 	and.w	r3, r3, #8
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cca:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	490e      	ldr	r1, [pc, #56]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cde:	f000 f821 	bl	8001d24 <HAL_RCC_GetSysClockFreq>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	091b      	lsrs	r3, r3, #4
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	490a      	ldr	r1, [pc, #40]	@ (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf0:	5ccb      	ldrb	r3, [r1, r3]
 8001cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf6:	4a09      	ldr	r2, [pc, #36]	@ (8001d1c <HAL_RCC_ClockConfig+0x1cc>)
 8001cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cfa:	4b09      	ldr	r3, [pc, #36]	@ (8001d20 <HAL_RCC_ClockConfig+0x1d0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fd88 	bl	8000814 <HAL_InitTick>

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40022000 	.word	0x40022000
 8001d14:	40021000 	.word	0x40021000
 8001d18:	080048dc 	.word	0x080048dc
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000004 	.word	0x20000004

08001d24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	d002      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x30>
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d003      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x36>
 8001d52:	e027      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001d56:	613b      	str	r3, [r7, #16]
      break;
 8001d58:	e027      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	0c9b      	lsrs	r3, r3, #18
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	4a17      	ldr	r2, [pc, #92]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d64:	5cd3      	ldrb	r3, [r2, r3]
 8001d66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d010      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	0c5b      	lsrs	r3, r3, #17
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	4a11      	ldr	r2, [pc, #68]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d7e:	5cd3      	ldrb	r3, [r2, r3]
 8001d80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001d86:	fb03 f202 	mul.w	r2, r3, r2
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e004      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	613b      	str	r3, [r7, #16]
      break;
 8001da2:	e002      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001da6:	613b      	str	r3, [r7, #16]
      break;
 8001da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001daa:	693b      	ldr	r3, [r7, #16]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	371c      	adds	r7, #28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	007a1200 	.word	0x007a1200
 8001dc0:	080048f4 	.word	0x080048f4
 8001dc4:	08004904 	.word	0x08004904
 8001dc8:	003d0900 	.word	0x003d0900

08001dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd0:	4b02      	ldr	r3, [pc, #8]	@ (8001ddc <HAL_RCC_GetHCLKFreq+0x10>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000000 	.word	0x20000000

08001de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001de4:	f7ff fff2 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	0a1b      	lsrs	r3, r3, #8
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4903      	ldr	r1, [pc, #12]	@ (8001e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	080048ec 	.word	0x080048ec

08001e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e0c:	f7ff ffde 	bl	8001dcc <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b05      	ldr	r3, [pc, #20]	@ (8001e28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	0adb      	lsrs	r3, r3, #11
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4903      	ldr	r1, [pc, #12]	@ (8001e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	080048ec 	.word	0x080048ec

08001e30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <RCC_Delay+0x34>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e68 <RCC_Delay+0x38>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0a5b      	lsrs	r3, r3, #9
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e4c:	bf00      	nop
  }
  while (Delay --);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1e5a      	subs	r2, r3, #1
 8001e52:	60fa      	str	r2, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f9      	bne.n	8001e4c <RCC_Delay+0x1c>
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr
 8001e64:	20000000 	.word	0x20000000
 8001e68:	10624dd3 	.word	0x10624dd3

08001e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d07d      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8c:	4b4f      	ldr	r3, [pc, #316]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e98:	4b4c      	ldr	r3, [pc, #304]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	4a4b      	ldr	r2, [pc, #300]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea2:	61d3      	str	r3, [r2, #28]
 8001ea4:	4b49      	ldr	r3, [pc, #292]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eac:	60bb      	str	r3, [r7, #8]
 8001eae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	4b46      	ldr	r3, [pc, #280]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d118      	bne.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec0:	4b43      	ldr	r3, [pc, #268]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a42      	ldr	r2, [pc, #264]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ecc:	f7fe fce4 	bl	8000898 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed4:	f7fe fce0 	bl	8000898 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	@ 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e06d      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ef2:	4b36      	ldr	r3, [pc, #216]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001efa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d02e      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d027      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f10:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f20:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f26:	4a29      	ldr	r2, [pc, #164]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d014      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7fe fcaf 	bl	8000898 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3c:	e00a      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3e:	f7fe fcab 	bl	8000898 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e036      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	4b1d      	ldr	r3, [pc, #116]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0ee      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	4917      	ldr	r1, [pc, #92]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f78:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7a:	69db      	ldr	r3, [r3, #28]
 8001f7c:	4a13      	ldr	r2, [pc, #76]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f90:	4b0e      	ldr	r3, [pc, #56]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	490b      	ldr	r1, [pc, #44]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	4904      	ldr	r1, [pc, #16]	@ (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	42420440 	.word	0x42420440

08001fd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e041      	b.n	800206e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d106      	bne.n	8002004 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7fe fac2 	bl	8000588 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	3304      	adds	r3, #4
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f000 f9f6 	bl	8002408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800206c:	2300      	movs	r3, #0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_TIM_PWM_Start+0x24>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	e022      	b.n	80020e2 <HAL_TIM_PWM_Start+0x6a>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d109      	bne.n	80020b6 <HAL_TIM_PWM_Start+0x3e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	bf14      	ite	ne
 80020ae:	2301      	movne	r3, #1
 80020b0:	2300      	moveq	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	e015      	b.n	80020e2 <HAL_TIM_PWM_Start+0x6a>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b08      	cmp	r3, #8
 80020ba:	d109      	bne.n	80020d0 <HAL_TIM_PWM_Start+0x58>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	bf14      	ite	ne
 80020c8:	2301      	movne	r3, #1
 80020ca:	2300      	moveq	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	e008      	b.n	80020e2 <HAL_TIM_PWM_Start+0x6a>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b01      	cmp	r3, #1
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e05e      	b.n	80021a8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d104      	bne.n	80020fa <HAL_TIM_PWM_Start+0x82>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020f8:	e013      	b.n	8002122 <HAL_TIM_PWM_Start+0xaa>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d104      	bne.n	800210a <HAL_TIM_PWM_Start+0x92>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2202      	movs	r2, #2
 8002104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002108:	e00b      	b.n	8002122 <HAL_TIM_PWM_Start+0xaa>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b08      	cmp	r3, #8
 800210e:	d104      	bne.n	800211a <HAL_TIM_PWM_Start+0xa2>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2202      	movs	r2, #2
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002118:	e003      	b.n	8002122 <HAL_TIM_PWM_Start+0xaa>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2202      	movs	r2, #2
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2201      	movs	r2, #1
 8002128:	6839      	ldr	r1, [r7, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fb62 	bl	80027f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1e      	ldr	r2, [pc, #120]	@ (80021b0 <HAL_TIM_PWM_Start+0x138>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d107      	bne.n	800214a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002148:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a18      	ldr	r2, [pc, #96]	@ (80021b0 <HAL_TIM_PWM_Start+0x138>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00e      	beq.n	8002172 <HAL_TIM_PWM_Start+0xfa>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215c:	d009      	beq.n	8002172 <HAL_TIM_PWM_Start+0xfa>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a14      	ldr	r2, [pc, #80]	@ (80021b4 <HAL_TIM_PWM_Start+0x13c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d004      	beq.n	8002172 <HAL_TIM_PWM_Start+0xfa>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <HAL_TIM_PWM_Start+0x140>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d111      	bne.n	8002196 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b06      	cmp	r3, #6
 8002182:	d010      	beq.n	80021a6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002194:	e007      	b.n	80021a6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 0201 	orr.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40012c00 	.word	0x40012c00
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800

080021bc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	6839      	ldr	r1, [r7, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fb10 	bl	80027f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a29      	ldr	r2, [pc, #164]	@ (8002280 <HAL_TIM_PWM_Stop+0xc4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d117      	bne.n	800220e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10f      	bne.n	800220e <HAL_TIM_PWM_Stop+0x52>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6a1a      	ldr	r2, [r3, #32]
 80021f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_TIM_PWM_Stop+0x52>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_TIM_PWM_Stop+0x82>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	f240 4344 	movw	r3, #1092	@ 0x444
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d107      	bne.n	800223e <HAL_TIM_PWM_Stop+0x82>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d104      	bne.n	800224e <HAL_TIM_PWM_Stop+0x92>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800224c:	e013      	b.n	8002276 <HAL_TIM_PWM_Stop+0xba>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d104      	bne.n	800225e <HAL_TIM_PWM_Stop+0xa2>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800225c:	e00b      	b.n	8002276 <HAL_TIM_PWM_Stop+0xba>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d104      	bne.n	800226e <HAL_TIM_PWM_Stop+0xb2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800226c:	e003      	b.n	8002276 <HAL_TIM_PWM_Stop+0xba>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40012c00 	.word	0x40012c00

08002284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800229e:	2302      	movs	r3, #2
 80022a0:	e0ae      	b.n	8002400 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b0c      	cmp	r3, #12
 80022ae:	f200 809f 	bhi.w	80023f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022b2:	a201      	add	r2, pc, #4	@ (adr r2, 80022b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b8:	080022ed 	.word	0x080022ed
 80022bc:	080023f1 	.word	0x080023f1
 80022c0:	080023f1 	.word	0x080023f1
 80022c4:	080023f1 	.word	0x080023f1
 80022c8:	0800232d 	.word	0x0800232d
 80022cc:	080023f1 	.word	0x080023f1
 80022d0:	080023f1 	.word	0x080023f1
 80022d4:	080023f1 	.word	0x080023f1
 80022d8:	0800236f 	.word	0x0800236f
 80022dc:	080023f1 	.word	0x080023f1
 80022e0:	080023f1 	.word	0x080023f1
 80022e4:	080023f1 	.word	0x080023f1
 80022e8:	080023af 	.word	0x080023af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 f8f6 	bl	80024e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0208 	orr.w	r2, r2, #8
 8002306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0204 	bic.w	r2, r2, #4
 8002316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6999      	ldr	r1, [r3, #24]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	619a      	str	r2, [r3, #24]
      break;
 800232a:	e064      	b.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f93c 	bl	80025b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	699a      	ldr	r2, [r3, #24]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002346:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002356:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6999      	ldr	r1, [r3, #24]
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	021a      	lsls	r2, r3, #8
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	619a      	str	r2, [r3, #24]
      break;
 800236c:	e043      	b.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f985 	bl	8002684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0208 	orr.w	r2, r2, #8
 8002388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0204 	bic.w	r2, r2, #4
 8002398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69d9      	ldr	r1, [r3, #28]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	61da      	str	r2, [r3, #28]
      break;
 80023ac:	e023      	b.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68b9      	ldr	r1, [r7, #8]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f000 f9cf 	bl	8002758 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	69da      	ldr	r2, [r3, #28]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	69da      	ldr	r2, [r3, #28]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	69d9      	ldr	r1, [r3, #28]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	021a      	lsls	r2, r3, #8
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	61da      	str	r2, [r3, #28]
      break;
 80023ee:	e002      	b.n	80023f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	75fb      	strb	r3, [r7, #23]
      break;
 80023f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80023fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a2f      	ldr	r2, [pc, #188]	@ (80024d8 <TIM_Base_SetConfig+0xd0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d00b      	beq.n	8002438 <TIM_Base_SetConfig+0x30>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002426:	d007      	beq.n	8002438 <TIM_Base_SetConfig+0x30>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a2c      	ldr	r2, [pc, #176]	@ (80024dc <TIM_Base_SetConfig+0xd4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d003      	beq.n	8002438 <TIM_Base_SetConfig+0x30>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a2b      	ldr	r2, [pc, #172]	@ (80024e0 <TIM_Base_SetConfig+0xd8>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d108      	bne.n	800244a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800243e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4313      	orrs	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a22      	ldr	r2, [pc, #136]	@ (80024d8 <TIM_Base_SetConfig+0xd0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00b      	beq.n	800246a <TIM_Base_SetConfig+0x62>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002458:	d007      	beq.n	800246a <TIM_Base_SetConfig+0x62>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1f      	ldr	r2, [pc, #124]	@ (80024dc <TIM_Base_SetConfig+0xd4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d003      	beq.n	800246a <TIM_Base_SetConfig+0x62>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1e      	ldr	r2, [pc, #120]	@ (80024e0 <TIM_Base_SetConfig+0xd8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d108      	bne.n	800247c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a0d      	ldr	r2, [pc, #52]	@ (80024d8 <TIM_Base_SetConfig+0xd0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d103      	bne.n	80024b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	f023 0201 	bic.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	611a      	str	r2, [r3, #16]
  }
}
 80024ce:	bf00      	nop
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40012c00 	.word	0x40012c00
 80024dc:	40000400 	.word	0x40000400
 80024e0:	40000800 	.word	0x40000800

080024e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	f023 0201 	bic.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0303 	bic.w	r3, r3, #3
 800251a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f023 0302 	bic.w	r3, r3, #2
 800252c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a1c      	ldr	r2, [pc, #112]	@ (80025ac <TIM_OC1_SetConfig+0xc8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d10c      	bne.n	800255a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f023 0308 	bic.w	r3, r3, #8
 8002546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a13      	ldr	r2, [pc, #76]	@ (80025ac <TIM_OC1_SetConfig+0xc8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d111      	bne.n	8002586 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	621a      	str	r2, [r3, #32]
}
 80025a0:	bf00      	nop
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40012c00 	.word	0x40012c00

080025b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	f023 0210 	bic.w	r2, r3, #16
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f023 0320 	bic.w	r3, r3, #32
 80025fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4313      	orrs	r3, r2
 8002606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <TIM_OC2_SetConfig+0xd0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10d      	bne.n	800262c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4313      	orrs	r3, r2
 8002622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800262a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a14      	ldr	r2, [pc, #80]	@ (8002680 <TIM_OC2_SetConfig+0xd0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d113      	bne.n	800265c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800263a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	621a      	str	r2, [r3, #32]
}
 8002676:	bf00      	nop
 8002678:	371c      	adds	r7, #28
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	40012c00 	.word	0x40012c00

08002684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002684:	b480      	push	{r7}
 8002686:	b087      	sub	sp, #28
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0303 	bic.w	r3, r3, #3
 80026ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002754 <TIM_OC3_SetConfig+0xd0>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d10d      	bne.n	80026fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80026e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a14      	ldr	r2, [pc, #80]	@ (8002754 <TIM_OC3_SetConfig+0xd0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d113      	bne.n	800272e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800270c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	621a      	str	r2, [r3, #32]
}
 8002748:	bf00      	nop
 800274a:	371c      	adds	r7, #28
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40012c00 	.word	0x40012c00

08002758 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800278e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	031b      	lsls	r3, r3, #12
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a0f      	ldr	r2, [pc, #60]	@ (80027f0 <TIM_OC4_SetConfig+0x98>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d109      	bne.n	80027cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80027be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68fa      	ldr	r2, [r7, #12]
 80027d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	621a      	str	r2, [r3, #32]
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr
 80027f0:	40012c00 	.word	0x40012c00

080027f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	f003 031f 	and.w	r3, r3, #31
 8002806:	2201      	movs	r2, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1a      	ldr	r2, [r3, #32]
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	43db      	mvns	r3, r3
 8002816:	401a      	ands	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	431a      	orrs	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	621a      	str	r2, [r3, #32]
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800284c:	2b01      	cmp	r3, #1
 800284e:	d101      	bne.n	8002854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002850:	2302      	movs	r3, #2
 8002852:	e046      	b.n	80028e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2202      	movs	r2, #2
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800287a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a16      	ldr	r2, [pc, #88]	@ (80028ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a0:	d009      	beq.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a12      	ldr	r2, [pc, #72]	@ (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a10      	ldr	r2, [pc, #64]	@ (80028f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d10c      	bne.n	80028d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40012c00 	.word	0x40012c00
 80028f0:	40000400 	.word	0x40000400
 80028f4:	40000800 	.word	0x40000800

080028f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e042      	b.n	8002990 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d106      	bne.n	8002924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd fe82 	bl	8000628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2224      	movs	r2, #36	@ 0x24
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800293a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f82b 	bl	8002998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2220      	movs	r2, #32
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80029d2:	f023 030c 	bic.w	r3, r3, #12
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	68b9      	ldr	r1, [r7, #8]
 80029dc:	430b      	orrs	r3, r1
 80029de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699a      	ldr	r2, [r3, #24]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a2c      	ldr	r2, [pc, #176]	@ (8002aac <UART_SetConfig+0x114>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d103      	bne.n	8002a08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a00:	f7ff fa02 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	e002      	b.n	8002a0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a08:	f7ff f9ea 	bl	8001de0 <HAL_RCC_GetPCLK1Freq>
 8002a0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009a      	lsls	r2, r3, #2
 8002a18:	441a      	add	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a24:	4a22      	ldr	r2, [pc, #136]	@ (8002ab0 <UART_SetConfig+0x118>)
 8002a26:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	0119      	lsls	r1, r3, #4
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	009a      	lsls	r2, r3, #2
 8002a38:	441a      	add	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a44:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab0 <UART_SetConfig+0x118>)
 8002a46:	fba3 0302 	umull	r0, r3, r3, r2
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2064      	movs	r0, #100	@ 0x64
 8002a4e:	fb00 f303 	mul.w	r3, r0, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	3332      	adds	r3, #50	@ 0x32
 8002a58:	4a15      	ldr	r2, [pc, #84]	@ (8002ab0 <UART_SetConfig+0x118>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a64:	4419      	add	r1, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009a      	lsls	r2, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab0 <UART_SetConfig+0x118>)
 8002a7e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2064      	movs	r0, #100	@ 0x64
 8002a86:	fb00 f303 	mul.w	r3, r0, r3
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	3332      	adds	r3, #50	@ 0x32
 8002a90:	4a07      	ldr	r2, [pc, #28]	@ (8002ab0 <UART_SetConfig+0x118>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	f003 020f 	and.w	r2, r3, #15
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	440a      	add	r2, r1
 8002aa2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40013800 	.word	0x40013800
 8002ab0:	51eb851f 	.word	0x51eb851f

08002ab4 <app_init>:
 * The function definition consists of actual statements which are executed
 * when the function is called (i.e. when the program control comes to the
 * function).
 */
void app_init(void)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\n");
 8002aba:	b672      	cpsid	i
 8002abc:	4b40      	ldr	r3, [pc, #256]	@ (8002bc0 <app_init+0x10c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a40      	ldr	r2, [pc, #256]	@ (8002bc4 <app_init+0x110>)
 8002ac2:	213f      	movs	r1, #63	@ 0x3f
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fee9 	bl	800389c <sniprintf>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4a3e      	ldr	r2, [pc, #248]	@ (8002bc8 <app_init+0x114>)
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bc0 <app_init+0x10c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f901 	bl	8002cdc <logger_log_print_>
 8002ada:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 8002adc:	b672      	cpsid	i
 8002ade:	4b38      	ldr	r3, [pc, #224]	@ (8002bc0 <app_init+0x10c>)
 8002ae0:	681c      	ldr	r4, [r3, #0]
 8002ae2:	f7fd fed9 	bl	8000898 <HAL_GetTick>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	4b38      	ldr	r3, [pc, #224]	@ (8002bcc <app_init+0x118>)
 8002aec:	4a38      	ldr	r2, [pc, #224]	@ (8002bd0 <app_init+0x11c>)
 8002aee:	213f      	movs	r1, #63	@ 0x3f
 8002af0:	4620      	mov	r0, r4
 8002af2:	f000 fed3 	bl	800389c <sniprintf>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a33      	ldr	r2, [pc, #204]	@ (8002bc8 <app_init+0x114>)
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b30      	ldr	r3, [pc, #192]	@ (8002bc0 <app_init+0x10c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 f8eb 	bl	8002cdc <logger_log_print_>
 8002b06:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8002b08:	b672      	cpsid	i
 8002b0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002bc0 <app_init+0x10c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a31      	ldr	r2, [pc, #196]	@ (8002bd4 <app_init+0x120>)
 8002b10:	6812      	ldr	r2, [r2, #0]
 8002b12:	213f      	movs	r1, #63	@ 0x3f
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fec1 	bl	800389c <sniprintf>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc8 <app_init+0x114>)
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b27      	ldr	r3, [pc, #156]	@ (8002bc0 <app_init+0x10c>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f8d9 	bl	8002cdc <logger_log_print_>
 8002b2a:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8002b2c:	b672      	cpsid	i
 8002b2e:	4b24      	ldr	r3, [pc, #144]	@ (8002bc0 <app_init+0x10c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a29      	ldr	r2, [pc, #164]	@ (8002bd8 <app_init+0x124>)
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	213f      	movs	r1, #63	@ 0x3f
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 feaf 	bl	800389c <sniprintf>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4a21      	ldr	r2, [pc, #132]	@ (8002bc8 <app_init+0x114>)
 8002b42:	6013      	str	r3, [r2, #0]
 8002b44:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <app_init+0x10c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f8c7 	bl	8002cdc <logger_log_print_>
 8002b4e:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8002b50:	4b22      	ldr	r3, [pc, #136]	@ (8002bdc <app_init+0x128>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	//LOGGER_LOG(" %s = %lu\n", GET_NAME(g_app_cnt), g_app_cnt);

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
 8002b5a:	e01a      	b.n	8002b92 <app_init+0xde>
		 * A function call is a statement that instructs the compiler to execute
		 * the function.
		 * We use the function name and parameters in the function call.
		 */
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8002b5c:	4920      	ldr	r1, [pc, #128]	@ (8002be0 <app_init+0x12c>)
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	6819      	ldr	r1, [r3, #0]
 8002b6c:	481c      	ldr	r0, [pc, #112]	@ (8002be0 <app_init+0x12c>)
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4403      	add	r3, r0
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8002b82:	4a18      	ldr	r2, [pc, #96]	@ (8002be4 <app_init+0x130>)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2100      	movs	r1, #0
 8002b88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	607b      	str	r3, [r7, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d9e1      	bls.n	8002b5c <app_init+0xa8>
	}

	cycle_counter_init();
 8002b98:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <app_init+0x134>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a12      	ldr	r2, [pc, #72]	@ (8002be8 <app_init+0x134>)
 8002b9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba2:	60d3      	str	r3, [r2, #12]
 8002ba4:	4b11      	ldr	r3, [pc, #68]	@ (8002bec <app_init+0x138>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	4b10      	ldr	r3, [pc, #64]	@ (8002bec <app_init+0x138>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a0f      	ldr	r2, [pc, #60]	@ (8002bec <app_init+0x138>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd90      	pop	{r4, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	08004920 	.word	0x08004920
 8002bc4:	08004840 	.word	0x08004840
 8002bc8:	200001bc 	.word	0x200001bc
 8002bcc:	08004844 	.word	0x08004844
 8002bd0:	08004850 	.word	0x08004850
 8002bd4:	2000000c 	.word	0x2000000c
 8002bd8:	20000010 	.word	0x20000010
 8002bdc:	20000168 	.word	0x20000168
 8002be0:	08004908 	.word	0x08004908
 8002be4:	20000174 	.word	0x20000174
 8002be8:	e000edf0 	.word	0xe000edf0
 8002bec:	e0001000 	.word	0xe0001000

08002bf0 <app_update>:

void app_update(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca0 <app_update+0xb0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d04c      	beq.n	8002c98 <app_update+0xa8>
    {
    	g_app_tick_cnt--;
 8002bfe:	4b28      	ldr	r3, [pc, #160]	@ (8002ca0 <app_update+0xb0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	4a26      	ldr	r2, [pc, #152]	@ (8002ca0 <app_update+0xb0>)
 8002c06:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8002c08:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <app_update+0xb4>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	4a25      	ldr	r2, [pc, #148]	@ (8002ca4 <app_update+0xb4>)
 8002c10:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8002c12:	4b25      	ldr	r3, [pc, #148]	@ (8002ca8 <app_update+0xb8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

		/* Print out: Application execution counter */
		//LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);

		/* Go through the task arrays */
		for (index = 0; TASK_QTY > index; index++)
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e039      	b.n	8002c92 <app_update+0xa2>
		{
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
			cycle_counter_reset();
 8002c1e:	4b23      	ldr	r3, [pc, #140]	@ (8002cac <app_update+0xbc>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	605a      	str	r2, [r3, #4]
			 * We use the function name and parameters in the function call.
			 */


			/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8002c24:	4922      	ldr	r1, [pc, #136]	@ (8002cb0 <app_update+0xc0>)
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3304      	adds	r3, #4
 8002c34:	6819      	ldr	r1, [r3, #0]
 8002c36:	481e      	ldr	r0, [pc, #120]	@ (8002cb0 <app_update+0xc0>)
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4403      	add	r3, r0
 8002c44:	3308      	adds	r3, #8
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	4788      	blx	r1

			cycle_counter = cycle_counter_get();
 8002c4c:	4b17      	ldr	r3, [pc, #92]	@ (8002cac <app_update+0xbc>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	60bb      	str	r3, [r7, #8]
			cycle_counter_time_us = cycle_counter_time_us();
 8002c52:	4b16      	ldr	r3, [pc, #88]	@ (8002cac <app_update+0xbc>)
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4b17      	ldr	r3, [pc, #92]	@ (8002cb4 <app_update+0xc4>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4917      	ldr	r1, [pc, #92]	@ (8002cb8 <app_update+0xc8>)
 8002c5c:	fba1 1303 	umull	r1, r3, r1, r3
 8002c60:	0c9b      	lsrs	r3, r3, #18
 8002c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c66:	607b      	str	r3, [r7, #4]
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);

			/* Update variables */
			g_app_time_us += cycle_counter_time_us;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <app_update+0xb8>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4413      	add	r3, r2
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <app_update+0xb8>)
 8002c72:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8002c74:	4a11      	ldr	r2, [pc, #68]	@ (8002cbc <app_update+0xcc>)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d904      	bls.n	8002c8c <app_update+0x9c>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8002c82:	490e      	ldr	r1, [pc, #56]	@ (8002cbc <app_update+0xcc>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (index = 0; TASK_QTY > index; index++)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d9c2      	bls.n	8002c1e <app_update+0x2e>
			/* Print out: Cycle Counter */
			//LOGGER_LOG(" %s: %lu - %s: %lu uS\r\n", GET_NAME(cycle_counter), cycle_counter, GET_NAME(cycle_counter_time_us), cycle_counter_time_us);
			//LOGGER_LOG(" %s: %lu uS\r\n", GET_NAME(g_app_time_us), g_app_time_us);
		}
    }
}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000170 	.word	0x20000170
 8002ca4:	20000168 	.word	0x20000168
 8002ca8:	2000016c 	.word	0x2000016c
 8002cac:	e0001000 	.word	0xe0001000
 8002cb0:	08004908 	.word	0x08004908
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	431bde83 	.word	0x431bde83
 8002cbc:	20000174 	.word	0x20000174

08002cc0 <HAL_SYSTICK_Callback>:
 * function as an argument to call it, then it will be called a Callback
 * function.
 */

void HAL_SYSTICK_Callback(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <HAL_SYSTICK_Callback+0x18>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	4a03      	ldr	r2, [pc, #12]	@ (8002cd8 <HAL_SYSTICK_Callback+0x18>)
 8002ccc:	6013      	str	r3, [r2, #0]



	//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000170 	.word	0x20000170

08002cdc <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 fdc7 	bl	8003878 <iprintf>
	fflush(stdout);
 8002cea:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <logger_log_print_+0x24>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fceb 	bl	80036cc <fflush>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000034 	.word	0x20000034

08002d04 <task_adc_init>:


/********************** external functions definition ************************/

void task_adc_init(void *parameters)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_adc_init), p_task_adc);
 8002d0c:	b672      	cpsid	i
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <task_adc_init+0x58>)
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <task_adc_init+0x5c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <task_adc_init+0x60>)
 8002d1a:	4a13      	ldr	r2, [pc, #76]	@ (8002d68 <task_adc_init+0x64>)
 8002d1c:	213f      	movs	r1, #63	@ 0x3f
 8002d1e:	f000 fdbd 	bl	800389c <sniprintf>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4a11      	ldr	r2, [pc, #68]	@ (8002d6c <task_adc_init+0x68>)
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <task_adc_init+0x58>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ffd5 	bl	8002cdc <logger_log_print_>
 8002d32:	b662      	cpsie	i
	HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2102      	movs	r1, #2
 8002d38:	2012      	movs	r0, #18
 8002d3a:	f7fe fa8c 	bl	8001256 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002d3e:	2012      	movs	r0, #18
 8002d40:	f7fe faa5 	bl	800128e <HAL_NVIC_EnableIRQ>
	indice = 0;
 8002d44:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <task_adc_init+0x6c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	801a      	strh	r2, [r3, #0]
	tickstart = HAL_GetTick();
 8002d4a:	f7fd fda5 	bl	8000898 <HAL_GetTick>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4a08      	ldr	r2, [pc, #32]	@ (8002d74 <task_adc_init+0x70>)
 8002d52:	6013      	str	r3, [r2, #0]

}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	08004920 	.word	0x08004920
 8002d60:	20000014 	.word	0x20000014
 8002d64:	08004880 	.word	0x08004880
 8002d68:	08004890 	.word	0x08004890
 8002d6c:	200001bc 	.word	0x200001bc
 8002d70:	200001c4 	.word	0x200001c4
 8002d74:	200001c0 	.word	0x200001c0

08002d78 <task_adc_update>:

void task_adc_update(void *parameters)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	bool obtener_valor_pote= test3_tick();
 8002d80:	f000 f806 	bl	8002d90 <test3_tick>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]

}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <test3_tick>:


bool test3_tick() {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0

	bool b_done = false;
 8002d96:	2300      	movs	r3, #0
 8002d98:	71fb      	strb	r3, [r7, #7]

	if (indice>=SAMPLES_COUNTER) {
 8002d9a:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <test3_tick+0x68>)
 8002d9c:	881b      	ldrh	r3, [r3, #0]
 8002d9e:	2b09      	cmp	r3, #9
 8002da0:	d902      	bls.n	8002da8 <test3_tick+0x18>
		b_done = true;
 8002da2:	2301      	movs	r3, #1
 8002da4:	71fb      	strb	r3, [r7, #7]
		goto test3_tick_end;
 8002da6:	e012      	b.n	8002dce <test3_tick+0x3e>
	}

	/* start of first conversion */
	if (0==indice) {
 8002da8:	4b13      	ldr	r3, [pc, #76]	@ (8002df8 <test3_tick+0x68>)
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <test3_tick+0x26>
		b_trig_new_conversion = true;
 8002db0:	4b12      	ldr	r3, [pc, #72]	@ (8002dfc <test3_tick+0x6c>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
		}
		else
		{
		    printf("Estado ADC: 0x%lx\n", HAL_ADC_GetState(&hadc1));
		}*/
	if (b_trig_new_conversion) {
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <test3_tick+0x6c>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <test3_tick+0x3c>
		b_trig_new_conversion = false;
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <test3_tick+0x6c>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8002dc4:	480e      	ldr	r0, [pc, #56]	@ (8002e00 <test3_tick+0x70>)
 8002dc6:	f7fd fe49 	bl	8000a5c <HAL_ADC_Start_IT>
 8002dca:	e000      	b.n	8002dce <test3_tick+0x3e>
	}

test3_tick_end:
 8002dcc:	bf00      	nop
	if (b_done) {
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <test3_tick+0x5c>
		/*for (sample_idx=0;sample_idx<SAMPLES_COUNTER;sample_idx++) {
			LOGGER_LOG("%u\n",sample_array[sample_idx] );
		}*/
		uint16_t prom = promedio(sample_array);
 8002dd4:	480b      	ldr	r0, [pc, #44]	@ (8002e04 <test3_tick+0x74>)
 8002dd6:	f000 f841 	bl	8002e5c <promedio>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	80bb      	strh	r3, [r7, #4]
		cargar_valor_pote(prom);
 8002dde:	88bb      	ldrh	r3, [r7, #4]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 f861 	bl	8002ea8 <cargar_valor_pote>
		indice = 0;
 8002de6:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <test3_tick+0x68>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	801a      	strh	r2, [r3, #0]
	}
	return b_done;
 8002dec:	79fb      	ldrb	r3, [r7, #7]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200001c4 	.word	0x200001c4
 8002dfc:	200001dc 	.word	0x200001dc
 8002e00:	200000a0 	.word	0x200000a0
 8002e04:	200001c8 	.word	0x200001c8

08002e08 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

    if (indice < SAMPLES_COUNTER) {
 8002e10:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <HAL_ADC_ConvCpltCallback+0x44>)
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	2b09      	cmp	r3, #9
 8002e16:	d80d      	bhi.n	8002e34 <HAL_ADC_ConvCpltCallback+0x2c>
        sample_array[indice++] = HAL_ADC_GetValue(&hadc1);
 8002e18:	480d      	ldr	r0, [pc, #52]	@ (8002e50 <HAL_ADC_ConvCpltCallback+0x48>)
 8002e1a:	f7fd fed5 	bl	8000bc8 <HAL_ADC_GetValue>
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <HAL_ADC_ConvCpltCallback+0x44>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	b291      	uxth	r1, r2
 8002e26:	4a09      	ldr	r2, [pc, #36]	@ (8002e4c <HAL_ADC_ConvCpltCallback+0x44>)
 8002e28:	8011      	strh	r1, [r2, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	b281      	uxth	r1, r0
 8002e2e:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002e30:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    }

    if (indice < SAMPLES_COUNTER) {
 8002e34:	4b05      	ldr	r3, [pc, #20]	@ (8002e4c <HAL_ADC_ConvCpltCallback+0x44>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	2b09      	cmp	r3, #9
 8002e3a:	d802      	bhi.n	8002e42 <HAL_ADC_ConvCpltCallback+0x3a>
        b_trig_new_conversion = true;
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_ADC_ConvCpltCallback+0x50>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
    }
}
 8002e42:	bf00      	nop
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	200001c4 	.word	0x200001c4
 8002e50:	200000a0 	.word	0x200000a0
 8002e54:	200001c8 	.word	0x200001c8
 8002e58:	200001dc 	.word	0x200001dc

08002e5c <promedio>:
		}
	}
	return res;
}

uint16_t promedio(uint16_t sample_array[SAMPLES_COUNTER]){
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	uint16_t averaged = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	81fb      	strh	r3, [r7, #14]
	for(uint16_t averager=0 ; averager<SAMPLES_COUNTER ; averager++){
 8002e68:	2300      	movs	r3, #0
 8002e6a:	81bb      	strh	r3, [r7, #12]
 8002e6c:	e00a      	b.n	8002e84 <promedio+0x28>
		averaged += sample_array[averager];
 8002e6e:	89bb      	ldrh	r3, [r7, #12]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	89fb      	ldrh	r3, [r7, #14]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	81fb      	strh	r3, [r7, #14]
	for(uint16_t averager=0 ; averager<SAMPLES_COUNTER ; averager++){
 8002e7e:	89bb      	ldrh	r3, [r7, #12]
 8002e80:	3301      	adds	r3, #1
 8002e82:	81bb      	strh	r3, [r7, #12]
 8002e84:	89bb      	ldrh	r3, [r7, #12]
 8002e86:	2b09      	cmp	r3, #9
 8002e88:	d9f1      	bls.n	8002e6e <promedio+0x12>
	}
	averaged = averaged / SAMPLES_COUNTER;
 8002e8a:	89fb      	ldrh	r3, [r7, #14]
 8002e8c:	4a05      	ldr	r2, [pc, #20]	@ (8002ea4 <promedio+0x48>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	08db      	lsrs	r3, r3, #3
 8002e94:	81fb      	strh	r3, [r7, #14]
	return averaged;
 8002e96:	89fb      	ldrh	r3, [r7, #14]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	cccccccd 	.word	0xcccccccd

08002ea8 <cargar_valor_pote>:
	valor_pote.flag = false;
	valor_pote.promedio = 0;

}

void cargar_valor_pote(uint16_t valor){
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
	if(valor != valor_pote.promedio){
 8002eb2:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <cargar_valor_pote+0x2c>)
 8002eb4:	885b      	ldrh	r3, [r3, #2]
 8002eb6:	88fa      	ldrh	r2, [r7, #6]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d005      	beq.n	8002ec8 <cargar_valor_pote+0x20>
		valor_pote.flag = true;
 8002ebc:	4b05      	ldr	r3, [pc, #20]	@ (8002ed4 <cargar_valor_pote+0x2c>)
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
		valor_pote.promedio = valor;
 8002ec2:	4a04      	ldr	r2, [pc, #16]	@ (8002ed4 <cargar_valor_pote+0x2c>)
 8002ec4:	88fb      	ldrh	r3, [r7, #6]
 8002ec6:	8053      	strh	r3, [r2, #2]
	}

}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	200001e0 	.word	0x200001e0

08002ed8 <get_valor_pote>:

uint16_t get_valor_pote(){
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
	valor_pote.flag = false;
 8002edc:	4b04      	ldr	r3, [pc, #16]	@ (8002ef0 <get_valor_pote+0x18>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
	return valor_pote.promedio;
 8002ee2:	4b03      	ldr	r3, [pc, #12]	@ (8002ef0 <get_valor_pote+0x18>)
 8002ee4:	885b      	ldrh	r3, [r3, #2]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bc80      	pop	{r7}
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	200001e0 	.word	0x200001e0

08002ef4 <task_pwm_init>:
/********************** external data declaration *****************************/
extern TIM_HandleTypeDef htim3;

/********************** external functions definition ************************/
void task_pwm_init(void *parameters)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_pwm_init), p_task_pwm);
 8002efc:	b672      	cpsid	i
 8002efe:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <task_pwm_init+0x38>)
 8002f00:	6818      	ldr	r0, [r3, #0]
 8002f02:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <task_pwm_init+0x3c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	4b0a      	ldr	r3, [pc, #40]	@ (8002f34 <task_pwm_init+0x40>)
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8002f38 <task_pwm_init+0x44>)
 8002f0c:	213f      	movs	r1, #63	@ 0x3f
 8002f0e:	f000 fcc5 	bl	800389c <sniprintf>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4a09      	ldr	r2, [pc, #36]	@ (8002f3c <task_pwm_init+0x48>)
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	4b04      	ldr	r3, [pc, #16]	@ (8002f2c <task_pwm_init+0x38>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fedd 	bl	8002cdc <logger_log_print_>
 8002f22:	b662      	cpsie	i
}
 8002f24:	bf00      	nop
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	08004920 	.word	0x08004920
 8002f30:	20000018 	.word	0x20000018
 8002f34:	080048b4 	.word	0x080048b4
 8002f38:	080048c4 	.word	0x080048c4
 8002f3c:	200001bc 	.word	0x200001bc

08002f40 <task_pwm_update>:

void task_pwm_update(void *parameters)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
	test_tick();
 8002f48:	f000 f804 	bl	8002f54 <test_tick>
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <test_tick>:


void test_tick() {
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f56:	b093      	sub	sp, #76	@ 0x4c
 8002f58:	af12      	add	r7, sp, #72	@ 0x48
	static uint16_t period=PERIOD;
	static bool first = true;
	static uint32_t tick;
	static int16_t step = STEP;

	if (first) {
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <test_tick+0x84>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d009      	beq.n	8002f76 <test_tick+0x22>
		first = false;
 8002f62:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <test_tick+0x84>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
		tick = HAL_GetTick() + DELAY_TICKS;
 8002f68:	f7fd fc96 	bl	8000898 <HAL_GetTick>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	3304      	adds	r3, #4
 8002f70:	4a1a      	ldr	r2, [pc, #104]	@ (8002fdc <test_tick+0x88>)
 8002f72:	6013      	str	r3, [r2, #0]
	}
	else{
		active = PERIOD - get_valor_pote() *PERIOD/MAX_POTE;
		setPWM(htim3, TIM_CHANNEL_1, period, active);
	}
}
 8002f74:	e02c      	b.n	8002fd0 <test_tick+0x7c>
		active = PERIOD - get_valor_pote() *PERIOD/MAX_POTE;
 8002f76:	f7ff ffaf 	bl	8002ed8 <get_valor_pote>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4613      	mov	r3, r2
 8002f80:	041b      	lsls	r3, r3, #16
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	4a16      	ldr	r2, [pc, #88]	@ (8002fe0 <test_tick+0x8c>)
 8002f86:	fb82 1203 	smull	r1, r2, r2, r3
 8002f8a:	441a      	add	r2, r3
 8002f8c:	12d2      	asrs	r2, r2, #11
 8002f8e:	17db      	asrs	r3, r3, #31
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <test_tick+0x90>)
 8002f9a:	801a      	strh	r2, [r3, #0]
		setPWM(htim3, TIM_CHANNEL_1, period, active);
 8002f9c:	4b12      	ldr	r3, [pc, #72]	@ (8002fe8 <test_tick+0x94>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	4a10      	ldr	r2, [pc, #64]	@ (8002fe4 <test_tick+0x90>)
 8002fa2:	8812      	ldrh	r2, [r2, #0]
 8002fa4:	4e11      	ldr	r6, [pc, #68]	@ (8002fec <test_tick+0x98>)
 8002fa6:	9210      	str	r2, [sp, #64]	@ 0x40
 8002fa8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002faa:	2300      	movs	r3, #0
 8002fac:	930e      	str	r3, [sp, #56]	@ 0x38
 8002fae:	466d      	mov	r5, sp
 8002fb0:	f106 0410 	add.w	r4, r6, #16
 8002fb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fc0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fc4:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fc8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002fcc:	f000 f810 	bl	8002ff0 <setPWM>
}
 8002fd0:	bf00      	nop
 8002fd2:	3704      	adds	r7, #4
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd8:	2000001c 	.word	0x2000001c
 8002fdc:	200001e4 	.word	0x200001e4
 8002fe0:	80080081 	.word	0x80080081
 8002fe4:	200001e8 	.word	0x200001e8
 8002fe8:	2000001e 	.word	0x2000001e
 8002fec:	200000d0 	.word	0x200000d0

08002ff0 <setPWM>:


void setPWM(TIM_HandleTypeDef timer,
            uint32_t channel,
            uint16_t period,
            uint16_t pulse) {
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b088      	sub	sp, #32
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	f107 0c28 	add.w	ip, r7, #40	@ 0x28
 8002ffc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  HAL_TIM_PWM_Stop(&timer, channel);
 8003000:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8003002:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003006:	f7ff f8d9 	bl	80021bc <HAL_TIM_PWM_Stop>
  TIM_OC_InitTypeDef sConfigOC;
  timer.Init.Period = period;
 800300a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800300e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_TIM_PWM_Init(&timer);
 8003010:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003014:	f7fe ffe0 	bl	8001fd8 <HAL_TIM_PWM_Init>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003018:	2360      	movs	r3, #96	@ 0x60
 800301a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = pulse;
 800301c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8003020:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800302e:	4619      	mov	r1, r3
 8003030:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003034:	f7ff f926 	bl	8002284 <HAL_TIM_PWM_ConfigChannel>

  HAL_TIM_PWM_Start(&timer,channel);
 8003038:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800303a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800303e:	f7ff f81b 	bl	8002078 <HAL_TIM_PWM_Start>
}
 8003042:	bf00      	nop
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800304c:	b004      	add	sp, #16
 800304e:	4770      	bx	lr

08003050 <findslot>:
 8003050:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <findslot+0x2c>)
 8003052:	b510      	push	{r4, lr}
 8003054:	4604      	mov	r4, r0
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	b118      	cbz	r0, 8003062 <findslot+0x12>
 800305a:	6a03      	ldr	r3, [r0, #32]
 800305c:	b90b      	cbnz	r3, 8003062 <findslot+0x12>
 800305e:	f000 fbd5 	bl	800380c <__sinit>
 8003062:	2c13      	cmp	r4, #19
 8003064:	d807      	bhi.n	8003076 <findslot+0x26>
 8003066:	4806      	ldr	r0, [pc, #24]	@ (8003080 <findslot+0x30>)
 8003068:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800306c:	3201      	adds	r2, #1
 800306e:	d002      	beq.n	8003076 <findslot+0x26>
 8003070:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003074:	bd10      	pop	{r4, pc}
 8003076:	2000      	movs	r0, #0
 8003078:	e7fc      	b.n	8003074 <findslot+0x24>
 800307a:	bf00      	nop
 800307c:	20000034 	.word	0x20000034
 8003080:	200001f8 	.word	0x200001f8

08003084 <error>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	4604      	mov	r4, r0
 8003088:	f000 fcce 	bl	8003a28 <__errno>
 800308c:	2613      	movs	r6, #19
 800308e:	4605      	mov	r5, r0
 8003090:	2700      	movs	r7, #0
 8003092:	4630      	mov	r0, r6
 8003094:	4639      	mov	r1, r7
 8003096:	beab      	bkpt	0x00ab
 8003098:	4606      	mov	r6, r0
 800309a:	4620      	mov	r0, r4
 800309c:	602e      	str	r6, [r5, #0]
 800309e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030a0 <checkerror>:
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	d101      	bne.n	80030a8 <checkerror+0x8>
 80030a4:	f7ff bfee 	b.w	8003084 <error>
 80030a8:	4770      	bx	lr

080030aa <_swiread>:
 80030aa:	b530      	push	{r4, r5, lr}
 80030ac:	b085      	sub	sp, #20
 80030ae:	2406      	movs	r4, #6
 80030b0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80030b4:	9203      	str	r2, [sp, #12]
 80030b6:	ad01      	add	r5, sp, #4
 80030b8:	4620      	mov	r0, r4
 80030ba:	4629      	mov	r1, r5
 80030bc:	beab      	bkpt	0x00ab
 80030be:	4604      	mov	r4, r0
 80030c0:	4620      	mov	r0, r4
 80030c2:	f7ff ffed 	bl	80030a0 <checkerror>
 80030c6:	b005      	add	sp, #20
 80030c8:	bd30      	pop	{r4, r5, pc}

080030ca <_read>:
 80030ca:	b570      	push	{r4, r5, r6, lr}
 80030cc:	460e      	mov	r6, r1
 80030ce:	4614      	mov	r4, r2
 80030d0:	f7ff ffbe 	bl	8003050 <findslot>
 80030d4:	4605      	mov	r5, r0
 80030d6:	b930      	cbnz	r0, 80030e6 <_read+0x1c>
 80030d8:	f000 fca6 	bl	8003a28 <__errno>
 80030dc:	2309      	movs	r3, #9
 80030de:	6003      	str	r3, [r0, #0]
 80030e0:	f04f 30ff 	mov.w	r0, #4294967295
 80030e4:	bd70      	pop	{r4, r5, r6, pc}
 80030e6:	4622      	mov	r2, r4
 80030e8:	4631      	mov	r1, r6
 80030ea:	6800      	ldr	r0, [r0, #0]
 80030ec:	f7ff ffdd 	bl	80030aa <_swiread>
 80030f0:	1c43      	adds	r3, r0, #1
 80030f2:	d0f5      	beq.n	80030e0 <_read+0x16>
 80030f4:	686b      	ldr	r3, [r5, #4]
 80030f6:	1a20      	subs	r0, r4, r0
 80030f8:	4403      	add	r3, r0
 80030fa:	606b      	str	r3, [r5, #4]
 80030fc:	e7f2      	b.n	80030e4 <_read+0x1a>

080030fe <_swilseek>:
 80030fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003100:	460c      	mov	r4, r1
 8003102:	4616      	mov	r6, r2
 8003104:	f7ff ffa4 	bl	8003050 <findslot>
 8003108:	4605      	mov	r5, r0
 800310a:	b940      	cbnz	r0, 800311e <_swilseek+0x20>
 800310c:	f000 fc8c 	bl	8003a28 <__errno>
 8003110:	2309      	movs	r3, #9
 8003112:	6003      	str	r3, [r0, #0]
 8003114:	f04f 34ff 	mov.w	r4, #4294967295
 8003118:	4620      	mov	r0, r4
 800311a:	b003      	add	sp, #12
 800311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800311e:	2e02      	cmp	r6, #2
 8003120:	d903      	bls.n	800312a <_swilseek+0x2c>
 8003122:	f000 fc81 	bl	8003a28 <__errno>
 8003126:	2316      	movs	r3, #22
 8003128:	e7f3      	b.n	8003112 <_swilseek+0x14>
 800312a:	2e01      	cmp	r6, #1
 800312c:	d112      	bne.n	8003154 <_swilseek+0x56>
 800312e:	6843      	ldr	r3, [r0, #4]
 8003130:	18e4      	adds	r4, r4, r3
 8003132:	d4f6      	bmi.n	8003122 <_swilseek+0x24>
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	260a      	movs	r6, #10
 8003138:	466f      	mov	r7, sp
 800313a:	e9cd 3400 	strd	r3, r4, [sp]
 800313e:	4630      	mov	r0, r6
 8003140:	4639      	mov	r1, r7
 8003142:	beab      	bkpt	0x00ab
 8003144:	4606      	mov	r6, r0
 8003146:	4630      	mov	r0, r6
 8003148:	f7ff ffaa 	bl	80030a0 <checkerror>
 800314c:	2800      	cmp	r0, #0
 800314e:	dbe1      	blt.n	8003114 <_swilseek+0x16>
 8003150:	606c      	str	r4, [r5, #4]
 8003152:	e7e1      	b.n	8003118 <_swilseek+0x1a>
 8003154:	2e02      	cmp	r6, #2
 8003156:	6803      	ldr	r3, [r0, #0]
 8003158:	d1ec      	bne.n	8003134 <_swilseek+0x36>
 800315a:	260c      	movs	r6, #12
 800315c:	466f      	mov	r7, sp
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	4630      	mov	r0, r6
 8003162:	4639      	mov	r1, r7
 8003164:	beab      	bkpt	0x00ab
 8003166:	4606      	mov	r6, r0
 8003168:	4630      	mov	r0, r6
 800316a:	f7ff ff99 	bl	80030a0 <checkerror>
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	d0d0      	beq.n	8003114 <_swilseek+0x16>
 8003172:	4404      	add	r4, r0
 8003174:	e7de      	b.n	8003134 <_swilseek+0x36>

08003176 <_lseek>:
 8003176:	f7ff bfc2 	b.w	80030fe <_swilseek>

0800317a <_swiwrite>:
 800317a:	b530      	push	{r4, r5, lr}
 800317c:	b085      	sub	sp, #20
 800317e:	2405      	movs	r4, #5
 8003180:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003184:	9203      	str	r2, [sp, #12]
 8003186:	ad01      	add	r5, sp, #4
 8003188:	4620      	mov	r0, r4
 800318a:	4629      	mov	r1, r5
 800318c:	beab      	bkpt	0x00ab
 800318e:	4604      	mov	r4, r0
 8003190:	4620      	mov	r0, r4
 8003192:	f7ff ff85 	bl	80030a0 <checkerror>
 8003196:	b005      	add	sp, #20
 8003198:	bd30      	pop	{r4, r5, pc}

0800319a <_write>:
 800319a:	b570      	push	{r4, r5, r6, lr}
 800319c:	460e      	mov	r6, r1
 800319e:	4615      	mov	r5, r2
 80031a0:	f7ff ff56 	bl	8003050 <findslot>
 80031a4:	4604      	mov	r4, r0
 80031a6:	b930      	cbnz	r0, 80031b6 <_write+0x1c>
 80031a8:	f000 fc3e 	bl	8003a28 <__errno>
 80031ac:	2309      	movs	r3, #9
 80031ae:	6003      	str	r3, [r0, #0]
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	bd70      	pop	{r4, r5, r6, pc}
 80031b6:	462a      	mov	r2, r5
 80031b8:	4631      	mov	r1, r6
 80031ba:	6800      	ldr	r0, [r0, #0]
 80031bc:	f7ff ffdd 	bl	800317a <_swiwrite>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	dbf5      	blt.n	80031b0 <_write+0x16>
 80031c4:	6862      	ldr	r2, [r4, #4]
 80031c6:	1ae8      	subs	r0, r5, r3
 80031c8:	4402      	add	r2, r0
 80031ca:	42ab      	cmp	r3, r5
 80031cc:	6062      	str	r2, [r4, #4]
 80031ce:	d1f1      	bne.n	80031b4 <_write+0x1a>
 80031d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80031d4:	2000      	movs	r0, #0
 80031d6:	f7ff bf55 	b.w	8003084 <error>

080031da <_swiclose>:
 80031da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80031dc:	2402      	movs	r4, #2
 80031de:	9001      	str	r0, [sp, #4]
 80031e0:	ad01      	add	r5, sp, #4
 80031e2:	4620      	mov	r0, r4
 80031e4:	4629      	mov	r1, r5
 80031e6:	beab      	bkpt	0x00ab
 80031e8:	4604      	mov	r4, r0
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7ff ff58 	bl	80030a0 <checkerror>
 80031f0:	b003      	add	sp, #12
 80031f2:	bd30      	pop	{r4, r5, pc}

080031f4 <_close>:
 80031f4:	b538      	push	{r3, r4, r5, lr}
 80031f6:	4605      	mov	r5, r0
 80031f8:	f7ff ff2a 	bl	8003050 <findslot>
 80031fc:	4604      	mov	r4, r0
 80031fe:	b930      	cbnz	r0, 800320e <_close+0x1a>
 8003200:	f000 fc12 	bl	8003a28 <__errno>
 8003204:	2309      	movs	r3, #9
 8003206:	6003      	str	r3, [r0, #0]
 8003208:	f04f 30ff 	mov.w	r0, #4294967295
 800320c:	bd38      	pop	{r3, r4, r5, pc}
 800320e:	3d01      	subs	r5, #1
 8003210:	2d01      	cmp	r5, #1
 8003212:	d809      	bhi.n	8003228 <_close+0x34>
 8003214:	4b07      	ldr	r3, [pc, #28]	@ (8003234 <_close+0x40>)
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	429a      	cmp	r2, r3
 800321c:	d104      	bne.n	8003228 <_close+0x34>
 800321e:	f04f 33ff 	mov.w	r3, #4294967295
 8003222:	2000      	movs	r0, #0
 8003224:	6023      	str	r3, [r4, #0]
 8003226:	e7f1      	b.n	800320c <_close+0x18>
 8003228:	6820      	ldr	r0, [r4, #0]
 800322a:	f7ff ffd6 	bl	80031da <_swiclose>
 800322e:	2800      	cmp	r0, #0
 8003230:	d0f5      	beq.n	800321e <_close+0x2a>
 8003232:	e7eb      	b.n	800320c <_close+0x18>
 8003234:	200001f8 	.word	0x200001f8

08003238 <_swistat>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	460c      	mov	r4, r1
 800323c:	f7ff ff08 	bl	8003050 <findslot>
 8003240:	4605      	mov	r5, r0
 8003242:	b930      	cbnz	r0, 8003252 <_swistat+0x1a>
 8003244:	f000 fbf0 	bl	8003a28 <__errno>
 8003248:	2309      	movs	r3, #9
 800324a:	6003      	str	r3, [r0, #0]
 800324c:	f04f 30ff 	mov.w	r0, #4294967295
 8003250:	bd70      	pop	{r4, r5, r6, pc}
 8003252:	6863      	ldr	r3, [r4, #4]
 8003254:	260c      	movs	r6, #12
 8003256:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800325a:	6063      	str	r3, [r4, #4]
 800325c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003260:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003262:	4630      	mov	r0, r6
 8003264:	4629      	mov	r1, r5
 8003266:	beab      	bkpt	0x00ab
 8003268:	4605      	mov	r5, r0
 800326a:	4628      	mov	r0, r5
 800326c:	f7ff ff18 	bl	80030a0 <checkerror>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	d0eb      	beq.n	800324c <_swistat+0x14>
 8003274:	6120      	str	r0, [r4, #16]
 8003276:	2000      	movs	r0, #0
 8003278:	e7ea      	b.n	8003250 <_swistat+0x18>

0800327a <_fstat>:
 800327a:	460b      	mov	r3, r1
 800327c:	b510      	push	{r4, lr}
 800327e:	2100      	movs	r1, #0
 8003280:	4604      	mov	r4, r0
 8003282:	2258      	movs	r2, #88	@ 0x58
 8003284:	4618      	mov	r0, r3
 8003286:	f000 fb80 	bl	800398a <memset>
 800328a:	4601      	mov	r1, r0
 800328c:	4620      	mov	r0, r4
 800328e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003292:	f7ff bfd1 	b.w	8003238 <_swistat>

08003296 <_stat>:
 8003296:	b538      	push	{r3, r4, r5, lr}
 8003298:	460d      	mov	r5, r1
 800329a:	4604      	mov	r4, r0
 800329c:	2258      	movs	r2, #88	@ 0x58
 800329e:	2100      	movs	r1, #0
 80032a0:	4628      	mov	r0, r5
 80032a2:	f000 fb72 	bl	800398a <memset>
 80032a6:	4620      	mov	r0, r4
 80032a8:	2100      	movs	r1, #0
 80032aa:	f000 f811 	bl	80032d0 <_swiopen>
 80032ae:	1c43      	adds	r3, r0, #1
 80032b0:	4604      	mov	r4, r0
 80032b2:	d00b      	beq.n	80032cc <_stat+0x36>
 80032b4:	686b      	ldr	r3, [r5, #4]
 80032b6:	4629      	mov	r1, r5
 80032b8:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80032bc:	606b      	str	r3, [r5, #4]
 80032be:	f7ff ffbb 	bl	8003238 <_swistat>
 80032c2:	4605      	mov	r5, r0
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7ff ff95 	bl	80031f4 <_close>
 80032ca:	462c      	mov	r4, r5
 80032cc:	4620      	mov	r0, r4
 80032ce:	bd38      	pop	{r3, r4, r5, pc}

080032d0 <_swiopen>:
 80032d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032d4:	4682      	mov	sl, r0
 80032d6:	460e      	mov	r6, r1
 80032d8:	2400      	movs	r4, #0
 80032da:	4f28      	ldr	r7, [pc, #160]	@ (800337c <_swiopen+0xac>)
 80032dc:	b096      	sub	sp, #88	@ 0x58
 80032de:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80032e2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80032e6:	3301      	adds	r3, #1
 80032e8:	d00c      	beq.n	8003304 <_swiopen+0x34>
 80032ea:	3401      	adds	r4, #1
 80032ec:	2c14      	cmp	r4, #20
 80032ee:	d1f6      	bne.n	80032de <_swiopen+0xe>
 80032f0:	f000 fb9a 	bl	8003a28 <__errno>
 80032f4:	2318      	movs	r3, #24
 80032f6:	f04f 34ff 	mov.w	r4, #4294967295
 80032fa:	6003      	str	r3, [r0, #0]
 80032fc:	4620      	mov	r0, r4
 80032fe:	b016      	add	sp, #88	@ 0x58
 8003300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003304:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003308:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800330c:	46e9      	mov	r9, sp
 800330e:	d109      	bne.n	8003324 <_swiopen+0x54>
 8003310:	4649      	mov	r1, r9
 8003312:	4650      	mov	r0, sl
 8003314:	f7ff ffbf 	bl	8003296 <_stat>
 8003318:	3001      	adds	r0, #1
 800331a:	d003      	beq.n	8003324 <_swiopen+0x54>
 800331c:	f000 fb84 	bl	8003a28 <__errno>
 8003320:	2311      	movs	r3, #17
 8003322:	e7e8      	b.n	80032f6 <_swiopen+0x26>
 8003324:	f240 6301 	movw	r3, #1537	@ 0x601
 8003328:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800332c:	07b2      	lsls	r2, r6, #30
 800332e:	bf48      	it	mi
 8003330:	f045 0502 	orrmi.w	r5, r5, #2
 8003334:	421e      	tst	r6, r3
 8003336:	bf18      	it	ne
 8003338:	f045 0504 	orrne.w	r5, r5, #4
 800333c:	0733      	lsls	r3, r6, #28
 800333e:	bf48      	it	mi
 8003340:	f025 0504 	bicmi.w	r5, r5, #4
 8003344:	4650      	mov	r0, sl
 8003346:	bf48      	it	mi
 8003348:	f045 0508 	orrmi.w	r5, r5, #8
 800334c:	f8cd a000 	str.w	sl, [sp]
 8003350:	f7fc fefc 	bl	800014c <strlen>
 8003354:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003358:	2501      	movs	r5, #1
 800335a:	4628      	mov	r0, r5
 800335c:	4649      	mov	r1, r9
 800335e:	beab      	bkpt	0x00ab
 8003360:	4605      	mov	r5, r0
 8003362:	2d00      	cmp	r5, #0
 8003364:	db05      	blt.n	8003372 <_swiopen+0xa2>
 8003366:	2300      	movs	r3, #0
 8003368:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800336c:	4447      	add	r7, r8
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e7c4      	b.n	80032fc <_swiopen+0x2c>
 8003372:	4628      	mov	r0, r5
 8003374:	f7ff fe86 	bl	8003084 <error>
 8003378:	4604      	mov	r4, r0
 800337a:	e7bf      	b.n	80032fc <_swiopen+0x2c>
 800337c:	200001f8 	.word	0x200001f8

08003380 <_get_semihosting_exts>:
 8003380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003384:	4606      	mov	r6, r0
 8003386:	460f      	mov	r7, r1
 8003388:	4829      	ldr	r0, [pc, #164]	@ (8003430 <_get_semihosting_exts+0xb0>)
 800338a:	2100      	movs	r1, #0
 800338c:	4615      	mov	r5, r2
 800338e:	f7ff ff9f 	bl	80032d0 <_swiopen>
 8003392:	4604      	mov	r4, r0
 8003394:	462a      	mov	r2, r5
 8003396:	2100      	movs	r1, #0
 8003398:	4630      	mov	r0, r6
 800339a:	f000 faf6 	bl	800398a <memset>
 800339e:	1c63      	adds	r3, r4, #1
 80033a0:	d014      	beq.n	80033cc <_get_semihosting_exts+0x4c>
 80033a2:	4620      	mov	r0, r4
 80033a4:	f7ff fe54 	bl	8003050 <findslot>
 80033a8:	f04f 080c 	mov.w	r8, #12
 80033ac:	4681      	mov	r9, r0
 80033ae:	4640      	mov	r0, r8
 80033b0:	4649      	mov	r1, r9
 80033b2:	beab      	bkpt	0x00ab
 80033b4:	4680      	mov	r8, r0
 80033b6:	4640      	mov	r0, r8
 80033b8:	f7ff fe72 	bl	80030a0 <checkerror>
 80033bc:	2803      	cmp	r0, #3
 80033be:	dd02      	ble.n	80033c6 <_get_semihosting_exts+0x46>
 80033c0:	1ec3      	subs	r3, r0, #3
 80033c2:	42ab      	cmp	r3, r5
 80033c4:	dc07      	bgt.n	80033d6 <_get_semihosting_exts+0x56>
 80033c6:	4620      	mov	r0, r4
 80033c8:	f7ff ff14 	bl	80031f4 <_close>
 80033cc:	f04f 30ff 	mov.w	r0, #4294967295
 80033d0:	b003      	add	sp, #12
 80033d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033d6:	2204      	movs	r2, #4
 80033d8:	4620      	mov	r0, r4
 80033da:	eb0d 0102 	add.w	r1, sp, r2
 80033de:	f7ff fe74 	bl	80030ca <_read>
 80033e2:	2803      	cmp	r0, #3
 80033e4:	ddef      	ble.n	80033c6 <_get_semihosting_exts+0x46>
 80033e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80033ea:	2b53      	cmp	r3, #83	@ 0x53
 80033ec:	d1eb      	bne.n	80033c6 <_get_semihosting_exts+0x46>
 80033ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80033f2:	2b48      	cmp	r3, #72	@ 0x48
 80033f4:	d1e7      	bne.n	80033c6 <_get_semihosting_exts+0x46>
 80033f6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80033fa:	2b46      	cmp	r3, #70	@ 0x46
 80033fc:	d1e3      	bne.n	80033c6 <_get_semihosting_exts+0x46>
 80033fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003402:	2b42      	cmp	r3, #66	@ 0x42
 8003404:	d1df      	bne.n	80033c6 <_get_semihosting_exts+0x46>
 8003406:	2201      	movs	r2, #1
 8003408:	4639      	mov	r1, r7
 800340a:	4620      	mov	r0, r4
 800340c:	f7ff fe77 	bl	80030fe <_swilseek>
 8003410:	2800      	cmp	r0, #0
 8003412:	dbd8      	blt.n	80033c6 <_get_semihosting_exts+0x46>
 8003414:	462a      	mov	r2, r5
 8003416:	4631      	mov	r1, r6
 8003418:	4620      	mov	r0, r4
 800341a:	f7ff fe56 	bl	80030ca <_read>
 800341e:	4605      	mov	r5, r0
 8003420:	4620      	mov	r0, r4
 8003422:	f7ff fee7 	bl	80031f4 <_close>
 8003426:	4628      	mov	r0, r5
 8003428:	f7ff fe3a 	bl	80030a0 <checkerror>
 800342c:	e7d0      	b.n	80033d0 <_get_semihosting_exts+0x50>
 800342e:	bf00      	nop
 8003430:	08004924 	.word	0x08004924

08003434 <initialise_semihosting_exts>:
 8003434:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003436:	2100      	movs	r1, #0
 8003438:	2201      	movs	r2, #1
 800343a:	4d09      	ldr	r5, [pc, #36]	@ (8003460 <initialise_semihosting_exts+0x2c>)
 800343c:	4c09      	ldr	r4, [pc, #36]	@ (8003464 <initialise_semihosting_exts+0x30>)
 800343e:	a801      	add	r0, sp, #4
 8003440:	6029      	str	r1, [r5, #0]
 8003442:	6022      	str	r2, [r4, #0]
 8003444:	f7ff ff9c 	bl	8003380 <_get_semihosting_exts>
 8003448:	2800      	cmp	r0, #0
 800344a:	dd07      	ble.n	800345c <initialise_semihosting_exts+0x28>
 800344c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003450:	f003 0201 	and.w	r2, r3, #1
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	602a      	str	r2, [r5, #0]
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	b003      	add	sp, #12
 800345e:	bd30      	pop	{r4, r5, pc}
 8003460:	20000024 	.word	0x20000024
 8003464:	20000020 	.word	0x20000020

08003468 <_has_ext_stdout_stderr>:
 8003468:	b510      	push	{r4, lr}
 800346a:	4c04      	ldr	r4, [pc, #16]	@ (800347c <_has_ext_stdout_stderr+0x14>)
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	da01      	bge.n	8003476 <_has_ext_stdout_stderr+0xe>
 8003472:	f7ff ffdf 	bl	8003434 <initialise_semihosting_exts>
 8003476:	6820      	ldr	r0, [r4, #0]
 8003478:	bd10      	pop	{r4, pc}
 800347a:	bf00      	nop
 800347c:	20000020 	.word	0x20000020

08003480 <initialise_monitor_handles>:
 8003480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003484:	2303      	movs	r3, #3
 8003486:	2400      	movs	r4, #0
 8003488:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 800352c <initialise_monitor_handles+0xac>
 800348c:	b085      	sub	sp, #20
 800348e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003492:	af01      	add	r7, sp, #4
 8003494:	9303      	str	r3, [sp, #12]
 8003496:	2501      	movs	r5, #1
 8003498:	9402      	str	r4, [sp, #8]
 800349a:	4628      	mov	r0, r5
 800349c:	4639      	mov	r1, r7
 800349e:	beab      	bkpt	0x00ab
 80034a0:	4605      	mov	r5, r0
 80034a2:	f04f 32ff 	mov.w	r2, #4294967295
 80034a6:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8003530 <initialise_monitor_handles+0xb0>
 80034aa:	4623      	mov	r3, r4
 80034ac:	4c21      	ldr	r4, [pc, #132]	@ (8003534 <initialise_monitor_handles+0xb4>)
 80034ae:	f8c8 5000 	str.w	r5, [r8]
 80034b2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80034b6:	3301      	adds	r3, #1
 80034b8:	2b14      	cmp	r3, #20
 80034ba:	d1fa      	bne.n	80034b2 <initialise_monitor_handles+0x32>
 80034bc:	f7ff ffd4 	bl	8003468 <_has_ext_stdout_stderr>
 80034c0:	4d1d      	ldr	r5, [pc, #116]	@ (8003538 <initialise_monitor_handles+0xb8>)
 80034c2:	b1d0      	cbz	r0, 80034fa <initialise_monitor_handles+0x7a>
 80034c4:	f04f 0a03 	mov.w	sl, #3
 80034c8:	2304      	movs	r3, #4
 80034ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80034ce:	2601      	movs	r6, #1
 80034d0:	f8cd a00c 	str.w	sl, [sp, #12]
 80034d4:	9302      	str	r3, [sp, #8]
 80034d6:	4630      	mov	r0, r6
 80034d8:	4639      	mov	r1, r7
 80034da:	beab      	bkpt	0x00ab
 80034dc:	4683      	mov	fp, r0
 80034de:	4b17      	ldr	r3, [pc, #92]	@ (800353c <initialise_monitor_handles+0xbc>)
 80034e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80034e4:	f8c3 b000 	str.w	fp, [r3]
 80034e8:	2308      	movs	r3, #8
 80034ea:	f8cd a00c 	str.w	sl, [sp, #12]
 80034ee:	9302      	str	r3, [sp, #8]
 80034f0:	4630      	mov	r0, r6
 80034f2:	4639      	mov	r1, r7
 80034f4:	beab      	bkpt	0x00ab
 80034f6:	4606      	mov	r6, r0
 80034f8:	602e      	str	r6, [r5, #0]
 80034fa:	2600      	movs	r6, #0
 80034fc:	682b      	ldr	r3, [r5, #0]
 80034fe:	6066      	str	r6, [r4, #4]
 8003500:	3301      	adds	r3, #1
 8003502:	bf02      	ittt	eq
 8003504:	4b0d      	ldreq	r3, [pc, #52]	@ (800353c <initialise_monitor_handles+0xbc>)
 8003506:	681b      	ldreq	r3, [r3, #0]
 8003508:	602b      	streq	r3, [r5, #0]
 800350a:	f8d8 3000 	ldr.w	r3, [r8]
 800350e:	6023      	str	r3, [r4, #0]
 8003510:	f7ff ffaa 	bl	8003468 <_has_ext_stdout_stderr>
 8003514:	b130      	cbz	r0, 8003524 <initialise_monitor_handles+0xa4>
 8003516:	4b09      	ldr	r3, [pc, #36]	@ (800353c <initialise_monitor_handles+0xbc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800351e:	682b      	ldr	r3, [r5, #0]
 8003520:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003524:	b005      	add	sp, #20
 8003526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352a:	bf00      	nop
 800352c:	0800493a 	.word	0x0800493a
 8003530:	200001f4 	.word	0x200001f4
 8003534:	200001f8 	.word	0x200001f8
 8003538:	200001ec 	.word	0x200001ec
 800353c:	200001f0 	.word	0x200001f0

08003540 <_isatty>:
 8003540:	b570      	push	{r4, r5, r6, lr}
 8003542:	f7ff fd85 	bl	8003050 <findslot>
 8003546:	2409      	movs	r4, #9
 8003548:	4605      	mov	r5, r0
 800354a:	b920      	cbnz	r0, 8003556 <_isatty+0x16>
 800354c:	f000 fa6c 	bl	8003a28 <__errno>
 8003550:	6004      	str	r4, [r0, #0]
 8003552:	2000      	movs	r0, #0
 8003554:	bd70      	pop	{r4, r5, r6, pc}
 8003556:	4620      	mov	r0, r4
 8003558:	4629      	mov	r1, r5
 800355a:	beab      	bkpt	0x00ab
 800355c:	4604      	mov	r4, r0
 800355e:	2c01      	cmp	r4, #1
 8003560:	4620      	mov	r0, r4
 8003562:	d0f7      	beq.n	8003554 <_isatty+0x14>
 8003564:	f000 fa60 	bl	8003a28 <__errno>
 8003568:	2513      	movs	r5, #19
 800356a:	4604      	mov	r4, r0
 800356c:	2600      	movs	r6, #0
 800356e:	4628      	mov	r0, r5
 8003570:	4631      	mov	r1, r6
 8003572:	beab      	bkpt	0x00ab
 8003574:	4605      	mov	r5, r0
 8003576:	6025      	str	r5, [r4, #0]
 8003578:	e7eb      	b.n	8003552 <_isatty+0x12>
	...

0800357c <__sflush_r>:
 800357c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003582:	0716      	lsls	r6, r2, #28
 8003584:	4605      	mov	r5, r0
 8003586:	460c      	mov	r4, r1
 8003588:	d454      	bmi.n	8003634 <__sflush_r+0xb8>
 800358a:	684b      	ldr	r3, [r1, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	dc02      	bgt.n	8003596 <__sflush_r+0x1a>
 8003590:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	dd48      	ble.n	8003628 <__sflush_r+0xac>
 8003596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003598:	2e00      	cmp	r6, #0
 800359a:	d045      	beq.n	8003628 <__sflush_r+0xac>
 800359c:	2300      	movs	r3, #0
 800359e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80035a2:	682f      	ldr	r7, [r5, #0]
 80035a4:	6a21      	ldr	r1, [r4, #32]
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	d030      	beq.n	800360c <__sflush_r+0x90>
 80035aa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80035ac:	89a3      	ldrh	r3, [r4, #12]
 80035ae:	0759      	lsls	r1, r3, #29
 80035b0:	d505      	bpl.n	80035be <__sflush_r+0x42>
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	1ad2      	subs	r2, r2, r3
 80035b6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80035b8:	b10b      	cbz	r3, 80035be <__sflush_r+0x42>
 80035ba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035bc:	1ad2      	subs	r2, r2, r3
 80035be:	2300      	movs	r3, #0
 80035c0:	4628      	mov	r0, r5
 80035c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80035c4:	6a21      	ldr	r1, [r4, #32]
 80035c6:	47b0      	blx	r6
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	d106      	bne.n	80035dc <__sflush_r+0x60>
 80035ce:	6829      	ldr	r1, [r5, #0]
 80035d0:	291d      	cmp	r1, #29
 80035d2:	d82b      	bhi.n	800362c <__sflush_r+0xb0>
 80035d4:	4a28      	ldr	r2, [pc, #160]	@ (8003678 <__sflush_r+0xfc>)
 80035d6:	410a      	asrs	r2, r1
 80035d8:	07d6      	lsls	r6, r2, #31
 80035da:	d427      	bmi.n	800362c <__sflush_r+0xb0>
 80035dc:	2200      	movs	r2, #0
 80035de:	6062      	str	r2, [r4, #4]
 80035e0:	6922      	ldr	r2, [r4, #16]
 80035e2:	04d9      	lsls	r1, r3, #19
 80035e4:	6022      	str	r2, [r4, #0]
 80035e6:	d504      	bpl.n	80035f2 <__sflush_r+0x76>
 80035e8:	1c42      	adds	r2, r0, #1
 80035ea:	d101      	bne.n	80035f0 <__sflush_r+0x74>
 80035ec:	682b      	ldr	r3, [r5, #0]
 80035ee:	b903      	cbnz	r3, 80035f2 <__sflush_r+0x76>
 80035f0:	6560      	str	r0, [r4, #84]	@ 0x54
 80035f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80035f4:	602f      	str	r7, [r5, #0]
 80035f6:	b1b9      	cbz	r1, 8003628 <__sflush_r+0xac>
 80035f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035fc:	4299      	cmp	r1, r3
 80035fe:	d002      	beq.n	8003606 <__sflush_r+0x8a>
 8003600:	4628      	mov	r0, r5
 8003602:	f000 fa3f 	bl	8003a84 <_free_r>
 8003606:	2300      	movs	r3, #0
 8003608:	6363      	str	r3, [r4, #52]	@ 0x34
 800360a:	e00d      	b.n	8003628 <__sflush_r+0xac>
 800360c:	2301      	movs	r3, #1
 800360e:	4628      	mov	r0, r5
 8003610:	47b0      	blx	r6
 8003612:	4602      	mov	r2, r0
 8003614:	1c50      	adds	r0, r2, #1
 8003616:	d1c9      	bne.n	80035ac <__sflush_r+0x30>
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0c6      	beq.n	80035ac <__sflush_r+0x30>
 800361e:	2b1d      	cmp	r3, #29
 8003620:	d001      	beq.n	8003626 <__sflush_r+0xaa>
 8003622:	2b16      	cmp	r3, #22
 8003624:	d11d      	bne.n	8003662 <__sflush_r+0xe6>
 8003626:	602f      	str	r7, [r5, #0]
 8003628:	2000      	movs	r0, #0
 800362a:	e021      	b.n	8003670 <__sflush_r+0xf4>
 800362c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003630:	b21b      	sxth	r3, r3
 8003632:	e01a      	b.n	800366a <__sflush_r+0xee>
 8003634:	690f      	ldr	r7, [r1, #16]
 8003636:	2f00      	cmp	r7, #0
 8003638:	d0f6      	beq.n	8003628 <__sflush_r+0xac>
 800363a:	0793      	lsls	r3, r2, #30
 800363c:	bf18      	it	ne
 800363e:	2300      	movne	r3, #0
 8003640:	680e      	ldr	r6, [r1, #0]
 8003642:	bf08      	it	eq
 8003644:	694b      	ldreq	r3, [r1, #20]
 8003646:	1bf6      	subs	r6, r6, r7
 8003648:	600f      	str	r7, [r1, #0]
 800364a:	608b      	str	r3, [r1, #8]
 800364c:	2e00      	cmp	r6, #0
 800364e:	ddeb      	ble.n	8003628 <__sflush_r+0xac>
 8003650:	4633      	mov	r3, r6
 8003652:	463a      	mov	r2, r7
 8003654:	4628      	mov	r0, r5
 8003656:	6a21      	ldr	r1, [r4, #32]
 8003658:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800365c:	47e0      	blx	ip
 800365e:	2800      	cmp	r0, #0
 8003660:	dc07      	bgt.n	8003672 <__sflush_r+0xf6>
 8003662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800366a:	f04f 30ff 	mov.w	r0, #4294967295
 800366e:	81a3      	strh	r3, [r4, #12]
 8003670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003672:	4407      	add	r7, r0
 8003674:	1a36      	subs	r6, r6, r0
 8003676:	e7e9      	b.n	800364c <__sflush_r+0xd0>
 8003678:	dfbffffe 	.word	0xdfbffffe

0800367c <_fflush_r>:
 800367c:	b538      	push	{r3, r4, r5, lr}
 800367e:	690b      	ldr	r3, [r1, #16]
 8003680:	4605      	mov	r5, r0
 8003682:	460c      	mov	r4, r1
 8003684:	b913      	cbnz	r3, 800368c <_fflush_r+0x10>
 8003686:	2500      	movs	r5, #0
 8003688:	4628      	mov	r0, r5
 800368a:	bd38      	pop	{r3, r4, r5, pc}
 800368c:	b118      	cbz	r0, 8003696 <_fflush_r+0x1a>
 800368e:	6a03      	ldr	r3, [r0, #32]
 8003690:	b90b      	cbnz	r3, 8003696 <_fflush_r+0x1a>
 8003692:	f000 f8bb 	bl	800380c <__sinit>
 8003696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f3      	beq.n	8003686 <_fflush_r+0xa>
 800369e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80036a0:	07d0      	lsls	r0, r2, #31
 80036a2:	d404      	bmi.n	80036ae <_fflush_r+0x32>
 80036a4:	0599      	lsls	r1, r3, #22
 80036a6:	d402      	bmi.n	80036ae <_fflush_r+0x32>
 80036a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036aa:	f000 f9e8 	bl	8003a7e <__retarget_lock_acquire_recursive>
 80036ae:	4628      	mov	r0, r5
 80036b0:	4621      	mov	r1, r4
 80036b2:	f7ff ff63 	bl	800357c <__sflush_r>
 80036b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80036b8:	4605      	mov	r5, r0
 80036ba:	07da      	lsls	r2, r3, #31
 80036bc:	d4e4      	bmi.n	8003688 <_fflush_r+0xc>
 80036be:	89a3      	ldrh	r3, [r4, #12]
 80036c0:	059b      	lsls	r3, r3, #22
 80036c2:	d4e1      	bmi.n	8003688 <_fflush_r+0xc>
 80036c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80036c6:	f000 f9db 	bl	8003a80 <__retarget_lock_release_recursive>
 80036ca:	e7dd      	b.n	8003688 <_fflush_r+0xc>

080036cc <fflush>:
 80036cc:	4601      	mov	r1, r0
 80036ce:	b920      	cbnz	r0, 80036da <fflush+0xe>
 80036d0:	4a04      	ldr	r2, [pc, #16]	@ (80036e4 <fflush+0x18>)
 80036d2:	4905      	ldr	r1, [pc, #20]	@ (80036e8 <fflush+0x1c>)
 80036d4:	4805      	ldr	r0, [pc, #20]	@ (80036ec <fflush+0x20>)
 80036d6:	f000 b8b1 	b.w	800383c <_fwalk_sglue>
 80036da:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <fflush+0x24>)
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	f7ff bfcd 	b.w	800367c <_fflush_r>
 80036e2:	bf00      	nop
 80036e4:	20000028 	.word	0x20000028
 80036e8:	0800367d 	.word	0x0800367d
 80036ec:	20000038 	.word	0x20000038
 80036f0:	20000034 	.word	0x20000034

080036f4 <std>:
 80036f4:	2300      	movs	r3, #0
 80036f6:	b510      	push	{r4, lr}
 80036f8:	4604      	mov	r4, r0
 80036fa:	e9c0 3300 	strd	r3, r3, [r0]
 80036fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003702:	6083      	str	r3, [r0, #8]
 8003704:	8181      	strh	r1, [r0, #12]
 8003706:	6643      	str	r3, [r0, #100]	@ 0x64
 8003708:	81c2      	strh	r2, [r0, #14]
 800370a:	6183      	str	r3, [r0, #24]
 800370c:	4619      	mov	r1, r3
 800370e:	2208      	movs	r2, #8
 8003710:	305c      	adds	r0, #92	@ 0x5c
 8003712:	f000 f93a 	bl	800398a <memset>
 8003716:	4b0d      	ldr	r3, [pc, #52]	@ (800374c <std+0x58>)
 8003718:	6224      	str	r4, [r4, #32]
 800371a:	6263      	str	r3, [r4, #36]	@ 0x24
 800371c:	4b0c      	ldr	r3, [pc, #48]	@ (8003750 <std+0x5c>)
 800371e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003720:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <std+0x60>)
 8003722:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003724:	4b0c      	ldr	r3, [pc, #48]	@ (8003758 <std+0x64>)
 8003726:	6323      	str	r3, [r4, #48]	@ 0x30
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <std+0x68>)
 800372a:	429c      	cmp	r4, r3
 800372c:	d006      	beq.n	800373c <std+0x48>
 800372e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003732:	4294      	cmp	r4, r2
 8003734:	d002      	beq.n	800373c <std+0x48>
 8003736:	33d0      	adds	r3, #208	@ 0xd0
 8003738:	429c      	cmp	r4, r3
 800373a:	d105      	bne.n	8003748 <std+0x54>
 800373c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003744:	f000 b99a 	b.w	8003a7c <__retarget_lock_init_recursive>
 8003748:	bd10      	pop	{r4, pc}
 800374a:	bf00      	nop
 800374c:	08003905 	.word	0x08003905
 8003750:	08003927 	.word	0x08003927
 8003754:	0800395f 	.word	0x0800395f
 8003758:	08003983 	.word	0x08003983
 800375c:	20000298 	.word	0x20000298

08003760 <stdio_exit_handler>:
 8003760:	4a02      	ldr	r2, [pc, #8]	@ (800376c <stdio_exit_handler+0xc>)
 8003762:	4903      	ldr	r1, [pc, #12]	@ (8003770 <stdio_exit_handler+0x10>)
 8003764:	4803      	ldr	r0, [pc, #12]	@ (8003774 <stdio_exit_handler+0x14>)
 8003766:	f000 b869 	b.w	800383c <_fwalk_sglue>
 800376a:	bf00      	nop
 800376c:	20000028 	.word	0x20000028
 8003770:	0800367d 	.word	0x0800367d
 8003774:	20000038 	.word	0x20000038

08003778 <cleanup_stdio>:
 8003778:	6841      	ldr	r1, [r0, #4]
 800377a:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <cleanup_stdio+0x34>)
 800377c:	b510      	push	{r4, lr}
 800377e:	4299      	cmp	r1, r3
 8003780:	4604      	mov	r4, r0
 8003782:	d001      	beq.n	8003788 <cleanup_stdio+0x10>
 8003784:	f7ff ff7a 	bl	800367c <_fflush_r>
 8003788:	68a1      	ldr	r1, [r4, #8]
 800378a:	4b09      	ldr	r3, [pc, #36]	@ (80037b0 <cleanup_stdio+0x38>)
 800378c:	4299      	cmp	r1, r3
 800378e:	d002      	beq.n	8003796 <cleanup_stdio+0x1e>
 8003790:	4620      	mov	r0, r4
 8003792:	f7ff ff73 	bl	800367c <_fflush_r>
 8003796:	68e1      	ldr	r1, [r4, #12]
 8003798:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <cleanup_stdio+0x3c>)
 800379a:	4299      	cmp	r1, r3
 800379c:	d004      	beq.n	80037a8 <cleanup_stdio+0x30>
 800379e:	4620      	mov	r0, r4
 80037a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037a4:	f7ff bf6a 	b.w	800367c <_fflush_r>
 80037a8:	bd10      	pop	{r4, pc}
 80037aa:	bf00      	nop
 80037ac:	20000298 	.word	0x20000298
 80037b0:	20000300 	.word	0x20000300
 80037b4:	20000368 	.word	0x20000368

080037b8 <global_stdio_init.part.0>:
 80037b8:	b510      	push	{r4, lr}
 80037ba:	4b0b      	ldr	r3, [pc, #44]	@ (80037e8 <global_stdio_init.part.0+0x30>)
 80037bc:	4c0b      	ldr	r4, [pc, #44]	@ (80037ec <global_stdio_init.part.0+0x34>)
 80037be:	4a0c      	ldr	r2, [pc, #48]	@ (80037f0 <global_stdio_init.part.0+0x38>)
 80037c0:	4620      	mov	r0, r4
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	2104      	movs	r1, #4
 80037c6:	2200      	movs	r2, #0
 80037c8:	f7ff ff94 	bl	80036f4 <std>
 80037cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80037d0:	2201      	movs	r2, #1
 80037d2:	2109      	movs	r1, #9
 80037d4:	f7ff ff8e 	bl	80036f4 <std>
 80037d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80037dc:	2202      	movs	r2, #2
 80037de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037e2:	2112      	movs	r1, #18
 80037e4:	f7ff bf86 	b.w	80036f4 <std>
 80037e8:	200003d0 	.word	0x200003d0
 80037ec:	20000298 	.word	0x20000298
 80037f0:	08003761 	.word	0x08003761

080037f4 <__sfp_lock_acquire>:
 80037f4:	4801      	ldr	r0, [pc, #4]	@ (80037fc <__sfp_lock_acquire+0x8>)
 80037f6:	f000 b942 	b.w	8003a7e <__retarget_lock_acquire_recursive>
 80037fa:	bf00      	nop
 80037fc:	200003d9 	.word	0x200003d9

08003800 <__sfp_lock_release>:
 8003800:	4801      	ldr	r0, [pc, #4]	@ (8003808 <__sfp_lock_release+0x8>)
 8003802:	f000 b93d 	b.w	8003a80 <__retarget_lock_release_recursive>
 8003806:	bf00      	nop
 8003808:	200003d9 	.word	0x200003d9

0800380c <__sinit>:
 800380c:	b510      	push	{r4, lr}
 800380e:	4604      	mov	r4, r0
 8003810:	f7ff fff0 	bl	80037f4 <__sfp_lock_acquire>
 8003814:	6a23      	ldr	r3, [r4, #32]
 8003816:	b11b      	cbz	r3, 8003820 <__sinit+0x14>
 8003818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800381c:	f7ff bff0 	b.w	8003800 <__sfp_lock_release>
 8003820:	4b04      	ldr	r3, [pc, #16]	@ (8003834 <__sinit+0x28>)
 8003822:	6223      	str	r3, [r4, #32]
 8003824:	4b04      	ldr	r3, [pc, #16]	@ (8003838 <__sinit+0x2c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f5      	bne.n	8003818 <__sinit+0xc>
 800382c:	f7ff ffc4 	bl	80037b8 <global_stdio_init.part.0>
 8003830:	e7f2      	b.n	8003818 <__sinit+0xc>
 8003832:	bf00      	nop
 8003834:	08003779 	.word	0x08003779
 8003838:	200003d0 	.word	0x200003d0

0800383c <_fwalk_sglue>:
 800383c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003840:	4607      	mov	r7, r0
 8003842:	4688      	mov	r8, r1
 8003844:	4614      	mov	r4, r2
 8003846:	2600      	movs	r6, #0
 8003848:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800384c:	f1b9 0901 	subs.w	r9, r9, #1
 8003850:	d505      	bpl.n	800385e <_fwalk_sglue+0x22>
 8003852:	6824      	ldr	r4, [r4, #0]
 8003854:	2c00      	cmp	r4, #0
 8003856:	d1f7      	bne.n	8003848 <_fwalk_sglue+0xc>
 8003858:	4630      	mov	r0, r6
 800385a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800385e:	89ab      	ldrh	r3, [r5, #12]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d907      	bls.n	8003874 <_fwalk_sglue+0x38>
 8003864:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003868:	3301      	adds	r3, #1
 800386a:	d003      	beq.n	8003874 <_fwalk_sglue+0x38>
 800386c:	4629      	mov	r1, r5
 800386e:	4638      	mov	r0, r7
 8003870:	47c0      	blx	r8
 8003872:	4306      	orrs	r6, r0
 8003874:	3568      	adds	r5, #104	@ 0x68
 8003876:	e7e9      	b.n	800384c <_fwalk_sglue+0x10>

08003878 <iprintf>:
 8003878:	b40f      	push	{r0, r1, r2, r3}
 800387a:	b507      	push	{r0, r1, r2, lr}
 800387c:	4906      	ldr	r1, [pc, #24]	@ (8003898 <iprintf+0x20>)
 800387e:	ab04      	add	r3, sp, #16
 8003880:	6808      	ldr	r0, [r1, #0]
 8003882:	f853 2b04 	ldr.w	r2, [r3], #4
 8003886:	6881      	ldr	r1, [r0, #8]
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	f000 fb71 	bl	8003f70 <_vfiprintf_r>
 800388e:	b003      	add	sp, #12
 8003890:	f85d eb04 	ldr.w	lr, [sp], #4
 8003894:	b004      	add	sp, #16
 8003896:	4770      	bx	lr
 8003898:	20000034 	.word	0x20000034

0800389c <sniprintf>:
 800389c:	b40c      	push	{r2, r3}
 800389e:	b530      	push	{r4, r5, lr}
 80038a0:	4b17      	ldr	r3, [pc, #92]	@ (8003900 <sniprintf+0x64>)
 80038a2:	1e0c      	subs	r4, r1, #0
 80038a4:	681d      	ldr	r5, [r3, #0]
 80038a6:	b09d      	sub	sp, #116	@ 0x74
 80038a8:	da08      	bge.n	80038bc <sniprintf+0x20>
 80038aa:	238b      	movs	r3, #139	@ 0x8b
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	602b      	str	r3, [r5, #0]
 80038b2:	b01d      	add	sp, #116	@ 0x74
 80038b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038b8:	b002      	add	sp, #8
 80038ba:	4770      	bx	lr
 80038bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80038c0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80038c4:	bf0c      	ite	eq
 80038c6:	4623      	moveq	r3, r4
 80038c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	9307      	str	r3, [sp, #28]
 80038d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038d4:	9002      	str	r0, [sp, #8]
 80038d6:	9006      	str	r0, [sp, #24]
 80038d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80038dc:	4628      	mov	r0, r5
 80038de:	ab21      	add	r3, sp, #132	@ 0x84
 80038e0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80038e2:	a902      	add	r1, sp, #8
 80038e4:	9301      	str	r3, [sp, #4]
 80038e6:	f000 fa1f 	bl	8003d28 <_svfiprintf_r>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	bfbc      	itt	lt
 80038ee:	238b      	movlt	r3, #139	@ 0x8b
 80038f0:	602b      	strlt	r3, [r5, #0]
 80038f2:	2c00      	cmp	r4, #0
 80038f4:	d0dd      	beq.n	80038b2 <sniprintf+0x16>
 80038f6:	2200      	movs	r2, #0
 80038f8:	9b02      	ldr	r3, [sp, #8]
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e7d9      	b.n	80038b2 <sniprintf+0x16>
 80038fe:	bf00      	nop
 8003900:	20000034 	.word	0x20000034

08003904 <__sread>:
 8003904:	b510      	push	{r4, lr}
 8003906:	460c      	mov	r4, r1
 8003908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800390c:	f000 f868 	bl	80039e0 <_read_r>
 8003910:	2800      	cmp	r0, #0
 8003912:	bfab      	itete	ge
 8003914:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003916:	89a3      	ldrhlt	r3, [r4, #12]
 8003918:	181b      	addge	r3, r3, r0
 800391a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800391e:	bfac      	ite	ge
 8003920:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003922:	81a3      	strhlt	r3, [r4, #12]
 8003924:	bd10      	pop	{r4, pc}

08003926 <__swrite>:
 8003926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800392a:	461f      	mov	r7, r3
 800392c:	898b      	ldrh	r3, [r1, #12]
 800392e:	4605      	mov	r5, r0
 8003930:	05db      	lsls	r3, r3, #23
 8003932:	460c      	mov	r4, r1
 8003934:	4616      	mov	r6, r2
 8003936:	d505      	bpl.n	8003944 <__swrite+0x1e>
 8003938:	2302      	movs	r3, #2
 800393a:	2200      	movs	r2, #0
 800393c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003940:	f000 f83c 	bl	80039bc <_lseek_r>
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	4632      	mov	r2, r6
 8003948:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800394c:	81a3      	strh	r3, [r4, #12]
 800394e:	4628      	mov	r0, r5
 8003950:	463b      	mov	r3, r7
 8003952:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800395a:	f000 b853 	b.w	8003a04 <_write_r>

0800395e <__sseek>:
 800395e:	b510      	push	{r4, lr}
 8003960:	460c      	mov	r4, r1
 8003962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003966:	f000 f829 	bl	80039bc <_lseek_r>
 800396a:	1c43      	adds	r3, r0, #1
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	bf15      	itete	ne
 8003970:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003972:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003976:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800397a:	81a3      	strheq	r3, [r4, #12]
 800397c:	bf18      	it	ne
 800397e:	81a3      	strhne	r3, [r4, #12]
 8003980:	bd10      	pop	{r4, pc}

08003982 <__sclose>:
 8003982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003986:	f000 b809 	b.w	800399c <_close_r>

0800398a <memset>:
 800398a:	4603      	mov	r3, r0
 800398c:	4402      	add	r2, r0
 800398e:	4293      	cmp	r3, r2
 8003990:	d100      	bne.n	8003994 <memset+0xa>
 8003992:	4770      	bx	lr
 8003994:	f803 1b01 	strb.w	r1, [r3], #1
 8003998:	e7f9      	b.n	800398e <memset+0x4>
	...

0800399c <_close_r>:
 800399c:	b538      	push	{r3, r4, r5, lr}
 800399e:	2300      	movs	r3, #0
 80039a0:	4d05      	ldr	r5, [pc, #20]	@ (80039b8 <_close_r+0x1c>)
 80039a2:	4604      	mov	r4, r0
 80039a4:	4608      	mov	r0, r1
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	f7ff fc24 	bl	80031f4 <_close>
 80039ac:	1c43      	adds	r3, r0, #1
 80039ae:	d102      	bne.n	80039b6 <_close_r+0x1a>
 80039b0:	682b      	ldr	r3, [r5, #0]
 80039b2:	b103      	cbz	r3, 80039b6 <_close_r+0x1a>
 80039b4:	6023      	str	r3, [r4, #0]
 80039b6:	bd38      	pop	{r3, r4, r5, pc}
 80039b8:	200003d4 	.word	0x200003d4

080039bc <_lseek_r>:
 80039bc:	b538      	push	{r3, r4, r5, lr}
 80039be:	4604      	mov	r4, r0
 80039c0:	4608      	mov	r0, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	2200      	movs	r2, #0
 80039c6:	4d05      	ldr	r5, [pc, #20]	@ (80039dc <_lseek_r+0x20>)
 80039c8:	602a      	str	r2, [r5, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f7ff fbd3 	bl	8003176 <_lseek>
 80039d0:	1c43      	adds	r3, r0, #1
 80039d2:	d102      	bne.n	80039da <_lseek_r+0x1e>
 80039d4:	682b      	ldr	r3, [r5, #0]
 80039d6:	b103      	cbz	r3, 80039da <_lseek_r+0x1e>
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	bd38      	pop	{r3, r4, r5, pc}
 80039dc:	200003d4 	.word	0x200003d4

080039e0 <_read_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	4608      	mov	r0, r1
 80039e6:	4611      	mov	r1, r2
 80039e8:	2200      	movs	r2, #0
 80039ea:	4d05      	ldr	r5, [pc, #20]	@ (8003a00 <_read_r+0x20>)
 80039ec:	602a      	str	r2, [r5, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	f7ff fb6b 	bl	80030ca <_read>
 80039f4:	1c43      	adds	r3, r0, #1
 80039f6:	d102      	bne.n	80039fe <_read_r+0x1e>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	b103      	cbz	r3, 80039fe <_read_r+0x1e>
 80039fc:	6023      	str	r3, [r4, #0]
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
 8003a00:	200003d4 	.word	0x200003d4

08003a04 <_write_r>:
 8003a04:	b538      	push	{r3, r4, r5, lr}
 8003a06:	4604      	mov	r4, r0
 8003a08:	4608      	mov	r0, r1
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4d05      	ldr	r5, [pc, #20]	@ (8003a24 <_write_r+0x20>)
 8003a10:	602a      	str	r2, [r5, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	f7ff fbc1 	bl	800319a <_write>
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d102      	bne.n	8003a22 <_write_r+0x1e>
 8003a1c:	682b      	ldr	r3, [r5, #0]
 8003a1e:	b103      	cbz	r3, 8003a22 <_write_r+0x1e>
 8003a20:	6023      	str	r3, [r4, #0]
 8003a22:	bd38      	pop	{r3, r4, r5, pc}
 8003a24:	200003d4 	.word	0x200003d4

08003a28 <__errno>:
 8003a28:	4b01      	ldr	r3, [pc, #4]	@ (8003a30 <__errno+0x8>)
 8003a2a:	6818      	ldr	r0, [r3, #0]
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000034 	.word	0x20000034

08003a34 <__libc_init_array>:
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	2600      	movs	r6, #0
 8003a38:	4d0c      	ldr	r5, [pc, #48]	@ (8003a6c <__libc_init_array+0x38>)
 8003a3a:	4c0d      	ldr	r4, [pc, #52]	@ (8003a70 <__libc_init_array+0x3c>)
 8003a3c:	1b64      	subs	r4, r4, r5
 8003a3e:	10a4      	asrs	r4, r4, #2
 8003a40:	42a6      	cmp	r6, r4
 8003a42:	d109      	bne.n	8003a58 <__libc_init_array+0x24>
 8003a44:	f000 fed2 	bl	80047ec <_init>
 8003a48:	2600      	movs	r6, #0
 8003a4a:	4d0a      	ldr	r5, [pc, #40]	@ (8003a74 <__libc_init_array+0x40>)
 8003a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a78 <__libc_init_array+0x44>)
 8003a4e:	1b64      	subs	r4, r4, r5
 8003a50:	10a4      	asrs	r4, r4, #2
 8003a52:	42a6      	cmp	r6, r4
 8003a54:	d105      	bne.n	8003a62 <__libc_init_array+0x2e>
 8003a56:	bd70      	pop	{r4, r5, r6, pc}
 8003a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a5c:	4798      	blx	r3
 8003a5e:	3601      	adds	r6, #1
 8003a60:	e7ee      	b.n	8003a40 <__libc_init_array+0xc>
 8003a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a66:	4798      	blx	r3
 8003a68:	3601      	adds	r6, #1
 8003a6a:	e7f2      	b.n	8003a52 <__libc_init_array+0x1e>
 8003a6c:	0800497c 	.word	0x0800497c
 8003a70:	0800497c 	.word	0x0800497c
 8003a74:	0800497c 	.word	0x0800497c
 8003a78:	08004980 	.word	0x08004980

08003a7c <__retarget_lock_init_recursive>:
 8003a7c:	4770      	bx	lr

08003a7e <__retarget_lock_acquire_recursive>:
 8003a7e:	4770      	bx	lr

08003a80 <__retarget_lock_release_recursive>:
 8003a80:	4770      	bx	lr
	...

08003a84 <_free_r>:
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	4605      	mov	r5, r0
 8003a88:	2900      	cmp	r1, #0
 8003a8a:	d040      	beq.n	8003b0e <_free_r+0x8a>
 8003a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a90:	1f0c      	subs	r4, r1, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	bfb8      	it	lt
 8003a96:	18e4      	addlt	r4, r4, r3
 8003a98:	f000 f8de 	bl	8003c58 <__malloc_lock>
 8003a9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <_free_r+0x8c>)
 8003a9e:	6813      	ldr	r3, [r2, #0]
 8003aa0:	b933      	cbnz	r3, 8003ab0 <_free_r+0x2c>
 8003aa2:	6063      	str	r3, [r4, #4]
 8003aa4:	6014      	str	r4, [r2, #0]
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aac:	f000 b8da 	b.w	8003c64 <__malloc_unlock>
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	d908      	bls.n	8003ac6 <_free_r+0x42>
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	1821      	adds	r1, r4, r0
 8003ab8:	428b      	cmp	r3, r1
 8003aba:	bf01      	itttt	eq
 8003abc:	6819      	ldreq	r1, [r3, #0]
 8003abe:	685b      	ldreq	r3, [r3, #4]
 8003ac0:	1809      	addeq	r1, r1, r0
 8003ac2:	6021      	streq	r1, [r4, #0]
 8003ac4:	e7ed      	b.n	8003aa2 <_free_r+0x1e>
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	b10b      	cbz	r3, 8003ad0 <_free_r+0x4c>
 8003acc:	42a3      	cmp	r3, r4
 8003ace:	d9fa      	bls.n	8003ac6 <_free_r+0x42>
 8003ad0:	6811      	ldr	r1, [r2, #0]
 8003ad2:	1850      	adds	r0, r2, r1
 8003ad4:	42a0      	cmp	r0, r4
 8003ad6:	d10b      	bne.n	8003af0 <_free_r+0x6c>
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	4401      	add	r1, r0
 8003adc:	1850      	adds	r0, r2, r1
 8003ade:	4283      	cmp	r3, r0
 8003ae0:	6011      	str	r1, [r2, #0]
 8003ae2:	d1e0      	bne.n	8003aa6 <_free_r+0x22>
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4408      	add	r0, r1
 8003aea:	6010      	str	r0, [r2, #0]
 8003aec:	6053      	str	r3, [r2, #4]
 8003aee:	e7da      	b.n	8003aa6 <_free_r+0x22>
 8003af0:	d902      	bls.n	8003af8 <_free_r+0x74>
 8003af2:	230c      	movs	r3, #12
 8003af4:	602b      	str	r3, [r5, #0]
 8003af6:	e7d6      	b.n	8003aa6 <_free_r+0x22>
 8003af8:	6820      	ldr	r0, [r4, #0]
 8003afa:	1821      	adds	r1, r4, r0
 8003afc:	428b      	cmp	r3, r1
 8003afe:	bf01      	itttt	eq
 8003b00:	6819      	ldreq	r1, [r3, #0]
 8003b02:	685b      	ldreq	r3, [r3, #4]
 8003b04:	1809      	addeq	r1, r1, r0
 8003b06:	6021      	streq	r1, [r4, #0]
 8003b08:	6063      	str	r3, [r4, #4]
 8003b0a:	6054      	str	r4, [r2, #4]
 8003b0c:	e7cb      	b.n	8003aa6 <_free_r+0x22>
 8003b0e:	bd38      	pop	{r3, r4, r5, pc}
 8003b10:	200003e0 	.word	0x200003e0

08003b14 <sbrk_aligned>:
 8003b14:	b570      	push	{r4, r5, r6, lr}
 8003b16:	4e0f      	ldr	r6, [pc, #60]	@ (8003b54 <sbrk_aligned+0x40>)
 8003b18:	460c      	mov	r4, r1
 8003b1a:	6831      	ldr	r1, [r6, #0]
 8003b1c:	4605      	mov	r5, r0
 8003b1e:	b911      	cbnz	r1, 8003b26 <sbrk_aligned+0x12>
 8003b20:	f000 fd7e 	bl	8004620 <_sbrk_r>
 8003b24:	6030      	str	r0, [r6, #0]
 8003b26:	4621      	mov	r1, r4
 8003b28:	4628      	mov	r0, r5
 8003b2a:	f000 fd79 	bl	8004620 <_sbrk_r>
 8003b2e:	1c43      	adds	r3, r0, #1
 8003b30:	d103      	bne.n	8003b3a <sbrk_aligned+0x26>
 8003b32:	f04f 34ff 	mov.w	r4, #4294967295
 8003b36:	4620      	mov	r0, r4
 8003b38:	bd70      	pop	{r4, r5, r6, pc}
 8003b3a:	1cc4      	adds	r4, r0, #3
 8003b3c:	f024 0403 	bic.w	r4, r4, #3
 8003b40:	42a0      	cmp	r0, r4
 8003b42:	d0f8      	beq.n	8003b36 <sbrk_aligned+0x22>
 8003b44:	1a21      	subs	r1, r4, r0
 8003b46:	4628      	mov	r0, r5
 8003b48:	f000 fd6a 	bl	8004620 <_sbrk_r>
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	d1f2      	bne.n	8003b36 <sbrk_aligned+0x22>
 8003b50:	e7ef      	b.n	8003b32 <sbrk_aligned+0x1e>
 8003b52:	bf00      	nop
 8003b54:	200003dc 	.word	0x200003dc

08003b58 <_malloc_r>:
 8003b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b5c:	1ccd      	adds	r5, r1, #3
 8003b5e:	f025 0503 	bic.w	r5, r5, #3
 8003b62:	3508      	adds	r5, #8
 8003b64:	2d0c      	cmp	r5, #12
 8003b66:	bf38      	it	cc
 8003b68:	250c      	movcc	r5, #12
 8003b6a:	2d00      	cmp	r5, #0
 8003b6c:	4606      	mov	r6, r0
 8003b6e:	db01      	blt.n	8003b74 <_malloc_r+0x1c>
 8003b70:	42a9      	cmp	r1, r5
 8003b72:	d904      	bls.n	8003b7e <_malloc_r+0x26>
 8003b74:	230c      	movs	r3, #12
 8003b76:	6033      	str	r3, [r6, #0]
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c54 <_malloc_r+0xfc>
 8003b82:	f000 f869 	bl	8003c58 <__malloc_lock>
 8003b86:	f8d8 3000 	ldr.w	r3, [r8]
 8003b8a:	461c      	mov	r4, r3
 8003b8c:	bb44      	cbnz	r4, 8003be0 <_malloc_r+0x88>
 8003b8e:	4629      	mov	r1, r5
 8003b90:	4630      	mov	r0, r6
 8003b92:	f7ff ffbf 	bl	8003b14 <sbrk_aligned>
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	4604      	mov	r4, r0
 8003b9a:	d158      	bne.n	8003c4e <_malloc_r+0xf6>
 8003b9c:	f8d8 4000 	ldr.w	r4, [r8]
 8003ba0:	4627      	mov	r7, r4
 8003ba2:	2f00      	cmp	r7, #0
 8003ba4:	d143      	bne.n	8003c2e <_malloc_r+0xd6>
 8003ba6:	2c00      	cmp	r4, #0
 8003ba8:	d04b      	beq.n	8003c42 <_malloc_r+0xea>
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	4639      	mov	r1, r7
 8003bae:	4630      	mov	r0, r6
 8003bb0:	eb04 0903 	add.w	r9, r4, r3
 8003bb4:	f000 fd34 	bl	8004620 <_sbrk_r>
 8003bb8:	4581      	cmp	r9, r0
 8003bba:	d142      	bne.n	8003c42 <_malloc_r+0xea>
 8003bbc:	6821      	ldr	r1, [r4, #0]
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	1a6d      	subs	r5, r5, r1
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7ff ffa6 	bl	8003b14 <sbrk_aligned>
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d03a      	beq.n	8003c42 <_malloc_r+0xea>
 8003bcc:	6823      	ldr	r3, [r4, #0]
 8003bce:	442b      	add	r3, r5
 8003bd0:	6023      	str	r3, [r4, #0]
 8003bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	bb62      	cbnz	r2, 8003c34 <_malloc_r+0xdc>
 8003bda:	f8c8 7000 	str.w	r7, [r8]
 8003bde:	e00f      	b.n	8003c00 <_malloc_r+0xa8>
 8003be0:	6822      	ldr	r2, [r4, #0]
 8003be2:	1b52      	subs	r2, r2, r5
 8003be4:	d420      	bmi.n	8003c28 <_malloc_r+0xd0>
 8003be6:	2a0b      	cmp	r2, #11
 8003be8:	d917      	bls.n	8003c1a <_malloc_r+0xc2>
 8003bea:	1961      	adds	r1, r4, r5
 8003bec:	42a3      	cmp	r3, r4
 8003bee:	6025      	str	r5, [r4, #0]
 8003bf0:	bf18      	it	ne
 8003bf2:	6059      	strne	r1, [r3, #4]
 8003bf4:	6863      	ldr	r3, [r4, #4]
 8003bf6:	bf08      	it	eq
 8003bf8:	f8c8 1000 	streq.w	r1, [r8]
 8003bfc:	5162      	str	r2, [r4, r5]
 8003bfe:	604b      	str	r3, [r1, #4]
 8003c00:	4630      	mov	r0, r6
 8003c02:	f000 f82f 	bl	8003c64 <__malloc_unlock>
 8003c06:	f104 000b 	add.w	r0, r4, #11
 8003c0a:	1d23      	adds	r3, r4, #4
 8003c0c:	f020 0007 	bic.w	r0, r0, #7
 8003c10:	1ac2      	subs	r2, r0, r3
 8003c12:	bf1c      	itt	ne
 8003c14:	1a1b      	subne	r3, r3, r0
 8003c16:	50a3      	strne	r3, [r4, r2]
 8003c18:	e7af      	b.n	8003b7a <_malloc_r+0x22>
 8003c1a:	6862      	ldr	r2, [r4, #4]
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	bf0c      	ite	eq
 8003c20:	f8c8 2000 	streq.w	r2, [r8]
 8003c24:	605a      	strne	r2, [r3, #4]
 8003c26:	e7eb      	b.n	8003c00 <_malloc_r+0xa8>
 8003c28:	4623      	mov	r3, r4
 8003c2a:	6864      	ldr	r4, [r4, #4]
 8003c2c:	e7ae      	b.n	8003b8c <_malloc_r+0x34>
 8003c2e:	463c      	mov	r4, r7
 8003c30:	687f      	ldr	r7, [r7, #4]
 8003c32:	e7b6      	b.n	8003ba2 <_malloc_r+0x4a>
 8003c34:	461a      	mov	r2, r3
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	d1fb      	bne.n	8003c34 <_malloc_r+0xdc>
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6053      	str	r3, [r2, #4]
 8003c40:	e7de      	b.n	8003c00 <_malloc_r+0xa8>
 8003c42:	230c      	movs	r3, #12
 8003c44:	4630      	mov	r0, r6
 8003c46:	6033      	str	r3, [r6, #0]
 8003c48:	f000 f80c 	bl	8003c64 <__malloc_unlock>
 8003c4c:	e794      	b.n	8003b78 <_malloc_r+0x20>
 8003c4e:	6005      	str	r5, [r0, #0]
 8003c50:	e7d6      	b.n	8003c00 <_malloc_r+0xa8>
 8003c52:	bf00      	nop
 8003c54:	200003e0 	.word	0x200003e0

08003c58 <__malloc_lock>:
 8003c58:	4801      	ldr	r0, [pc, #4]	@ (8003c60 <__malloc_lock+0x8>)
 8003c5a:	f7ff bf10 	b.w	8003a7e <__retarget_lock_acquire_recursive>
 8003c5e:	bf00      	nop
 8003c60:	200003d8 	.word	0x200003d8

08003c64 <__malloc_unlock>:
 8003c64:	4801      	ldr	r0, [pc, #4]	@ (8003c6c <__malloc_unlock+0x8>)
 8003c66:	f7ff bf0b 	b.w	8003a80 <__retarget_lock_release_recursive>
 8003c6a:	bf00      	nop
 8003c6c:	200003d8 	.word	0x200003d8

08003c70 <__ssputs_r>:
 8003c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c74:	461f      	mov	r7, r3
 8003c76:	688e      	ldr	r6, [r1, #8]
 8003c78:	4682      	mov	sl, r0
 8003c7a:	42be      	cmp	r6, r7
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	4690      	mov	r8, r2
 8003c80:	680b      	ldr	r3, [r1, #0]
 8003c82:	d82d      	bhi.n	8003ce0 <__ssputs_r+0x70>
 8003c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c8c:	d026      	beq.n	8003cdc <__ssputs_r+0x6c>
 8003c8e:	6965      	ldr	r5, [r4, #20]
 8003c90:	6909      	ldr	r1, [r1, #16]
 8003c92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c96:	eba3 0901 	sub.w	r9, r3, r1
 8003c9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c9e:	1c7b      	adds	r3, r7, #1
 8003ca0:	444b      	add	r3, r9
 8003ca2:	106d      	asrs	r5, r5, #1
 8003ca4:	429d      	cmp	r5, r3
 8003ca6:	bf38      	it	cc
 8003ca8:	461d      	movcc	r5, r3
 8003caa:	0553      	lsls	r3, r2, #21
 8003cac:	d527      	bpl.n	8003cfe <__ssputs_r+0x8e>
 8003cae:	4629      	mov	r1, r5
 8003cb0:	f7ff ff52 	bl	8003b58 <_malloc_r>
 8003cb4:	4606      	mov	r6, r0
 8003cb6:	b360      	cbz	r0, 8003d12 <__ssputs_r+0xa2>
 8003cb8:	464a      	mov	r2, r9
 8003cba:	6921      	ldr	r1, [r4, #16]
 8003cbc:	f000 fcce 	bl	800465c <memcpy>
 8003cc0:	89a3      	ldrh	r3, [r4, #12]
 8003cc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cca:	81a3      	strh	r3, [r4, #12]
 8003ccc:	6126      	str	r6, [r4, #16]
 8003cce:	444e      	add	r6, r9
 8003cd0:	6026      	str	r6, [r4, #0]
 8003cd2:	463e      	mov	r6, r7
 8003cd4:	6165      	str	r5, [r4, #20]
 8003cd6:	eba5 0509 	sub.w	r5, r5, r9
 8003cda:	60a5      	str	r5, [r4, #8]
 8003cdc:	42be      	cmp	r6, r7
 8003cde:	d900      	bls.n	8003ce2 <__ssputs_r+0x72>
 8003ce0:	463e      	mov	r6, r7
 8003ce2:	4632      	mov	r2, r6
 8003ce4:	4641      	mov	r1, r8
 8003ce6:	6820      	ldr	r0, [r4, #0]
 8003ce8:	f000 fc80 	bl	80045ec <memmove>
 8003cec:	2000      	movs	r0, #0
 8003cee:	68a3      	ldr	r3, [r4, #8]
 8003cf0:	1b9b      	subs	r3, r3, r6
 8003cf2:	60a3      	str	r3, [r4, #8]
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	4433      	add	r3, r6
 8003cf8:	6023      	str	r3, [r4, #0]
 8003cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfe:	462a      	mov	r2, r5
 8003d00:	f000 fcba 	bl	8004678 <_realloc_r>
 8003d04:	4606      	mov	r6, r0
 8003d06:	2800      	cmp	r0, #0
 8003d08:	d1e0      	bne.n	8003ccc <__ssputs_r+0x5c>
 8003d0a:	4650      	mov	r0, sl
 8003d0c:	6921      	ldr	r1, [r4, #16]
 8003d0e:	f7ff feb9 	bl	8003a84 <_free_r>
 8003d12:	230c      	movs	r3, #12
 8003d14:	f8ca 3000 	str.w	r3, [sl]
 8003d18:	89a3      	ldrh	r3, [r4, #12]
 8003d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d22:	81a3      	strh	r3, [r4, #12]
 8003d24:	e7e9      	b.n	8003cfa <__ssputs_r+0x8a>
	...

08003d28 <_svfiprintf_r>:
 8003d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	4698      	mov	r8, r3
 8003d2e:	898b      	ldrh	r3, [r1, #12]
 8003d30:	4607      	mov	r7, r0
 8003d32:	061b      	lsls	r3, r3, #24
 8003d34:	460d      	mov	r5, r1
 8003d36:	4614      	mov	r4, r2
 8003d38:	b09d      	sub	sp, #116	@ 0x74
 8003d3a:	d510      	bpl.n	8003d5e <_svfiprintf_r+0x36>
 8003d3c:	690b      	ldr	r3, [r1, #16]
 8003d3e:	b973      	cbnz	r3, 8003d5e <_svfiprintf_r+0x36>
 8003d40:	2140      	movs	r1, #64	@ 0x40
 8003d42:	f7ff ff09 	bl	8003b58 <_malloc_r>
 8003d46:	6028      	str	r0, [r5, #0]
 8003d48:	6128      	str	r0, [r5, #16]
 8003d4a:	b930      	cbnz	r0, 8003d5a <_svfiprintf_r+0x32>
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	f04f 30ff 	mov.w	r0, #4294967295
 8003d54:	b01d      	add	sp, #116	@ 0x74
 8003d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d5a:	2340      	movs	r3, #64	@ 0x40
 8003d5c:	616b      	str	r3, [r5, #20]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d62:	2320      	movs	r3, #32
 8003d64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d68:	2330      	movs	r3, #48	@ 0x30
 8003d6a:	f04f 0901 	mov.w	r9, #1
 8003d6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d72:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003f0c <_svfiprintf_r+0x1e4>
 8003d76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	469a      	mov	sl, r3
 8003d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d82:	b10a      	cbz	r2, 8003d88 <_svfiprintf_r+0x60>
 8003d84:	2a25      	cmp	r2, #37	@ 0x25
 8003d86:	d1f9      	bne.n	8003d7c <_svfiprintf_r+0x54>
 8003d88:	ebba 0b04 	subs.w	fp, sl, r4
 8003d8c:	d00b      	beq.n	8003da6 <_svfiprintf_r+0x7e>
 8003d8e:	465b      	mov	r3, fp
 8003d90:	4622      	mov	r2, r4
 8003d92:	4629      	mov	r1, r5
 8003d94:	4638      	mov	r0, r7
 8003d96:	f7ff ff6b 	bl	8003c70 <__ssputs_r>
 8003d9a:	3001      	adds	r0, #1
 8003d9c:	f000 80a7 	beq.w	8003eee <_svfiprintf_r+0x1c6>
 8003da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003da2:	445a      	add	r2, fp
 8003da4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003da6:	f89a 3000 	ldrb.w	r3, [sl]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 809f 	beq.w	8003eee <_svfiprintf_r+0x1c6>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f04f 32ff 	mov.w	r2, #4294967295
 8003db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dba:	f10a 0a01 	add.w	sl, sl, #1
 8003dbe:	9304      	str	r3, [sp, #16]
 8003dc0:	9307      	str	r3, [sp, #28]
 8003dc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003dc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003dc8:	4654      	mov	r4, sl
 8003dca:	2205      	movs	r2, #5
 8003dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dd0:	484e      	ldr	r0, [pc, #312]	@ (8003f0c <_svfiprintf_r+0x1e4>)
 8003dd2:	f000 fc35 	bl	8004640 <memchr>
 8003dd6:	9a04      	ldr	r2, [sp, #16]
 8003dd8:	b9d8      	cbnz	r0, 8003e12 <_svfiprintf_r+0xea>
 8003dda:	06d0      	lsls	r0, r2, #27
 8003ddc:	bf44      	itt	mi
 8003dde:	2320      	movmi	r3, #32
 8003de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003de4:	0711      	lsls	r1, r2, #28
 8003de6:	bf44      	itt	mi
 8003de8:	232b      	movmi	r3, #43	@ 0x2b
 8003dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003dee:	f89a 3000 	ldrb.w	r3, [sl]
 8003df2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003df4:	d015      	beq.n	8003e22 <_svfiprintf_r+0xfa>
 8003df6:	4654      	mov	r4, sl
 8003df8:	2000      	movs	r0, #0
 8003dfa:	f04f 0c0a 	mov.w	ip, #10
 8003dfe:	9a07      	ldr	r2, [sp, #28]
 8003e00:	4621      	mov	r1, r4
 8003e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e06:	3b30      	subs	r3, #48	@ 0x30
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	d94b      	bls.n	8003ea4 <_svfiprintf_r+0x17c>
 8003e0c:	b1b0      	cbz	r0, 8003e3c <_svfiprintf_r+0x114>
 8003e0e:	9207      	str	r2, [sp, #28]
 8003e10:	e014      	b.n	8003e3c <_svfiprintf_r+0x114>
 8003e12:	eba0 0308 	sub.w	r3, r0, r8
 8003e16:	fa09 f303 	lsl.w	r3, r9, r3
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	46a2      	mov	sl, r4
 8003e1e:	9304      	str	r3, [sp, #16]
 8003e20:	e7d2      	b.n	8003dc8 <_svfiprintf_r+0xa0>
 8003e22:	9b03      	ldr	r3, [sp, #12]
 8003e24:	1d19      	adds	r1, r3, #4
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	9103      	str	r1, [sp, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	bfbb      	ittet	lt
 8003e2e:	425b      	neglt	r3, r3
 8003e30:	f042 0202 	orrlt.w	r2, r2, #2
 8003e34:	9307      	strge	r3, [sp, #28]
 8003e36:	9307      	strlt	r3, [sp, #28]
 8003e38:	bfb8      	it	lt
 8003e3a:	9204      	strlt	r2, [sp, #16]
 8003e3c:	7823      	ldrb	r3, [r4, #0]
 8003e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e40:	d10a      	bne.n	8003e58 <_svfiprintf_r+0x130>
 8003e42:	7863      	ldrb	r3, [r4, #1]
 8003e44:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e46:	d132      	bne.n	8003eae <_svfiprintf_r+0x186>
 8003e48:	9b03      	ldr	r3, [sp, #12]
 8003e4a:	3402      	adds	r4, #2
 8003e4c:	1d1a      	adds	r2, r3, #4
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	9203      	str	r2, [sp, #12]
 8003e52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e56:	9305      	str	r3, [sp, #20]
 8003e58:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003f10 <_svfiprintf_r+0x1e8>
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	4650      	mov	r0, sl
 8003e60:	7821      	ldrb	r1, [r4, #0]
 8003e62:	f000 fbed 	bl	8004640 <memchr>
 8003e66:	b138      	cbz	r0, 8003e78 <_svfiprintf_r+0x150>
 8003e68:	2240      	movs	r2, #64	@ 0x40
 8003e6a:	9b04      	ldr	r3, [sp, #16]
 8003e6c:	eba0 000a 	sub.w	r0, r0, sl
 8003e70:	4082      	lsls	r2, r0
 8003e72:	4313      	orrs	r3, r2
 8003e74:	3401      	adds	r4, #1
 8003e76:	9304      	str	r3, [sp, #16]
 8003e78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e7c:	2206      	movs	r2, #6
 8003e7e:	4825      	ldr	r0, [pc, #148]	@ (8003f14 <_svfiprintf_r+0x1ec>)
 8003e80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e84:	f000 fbdc 	bl	8004640 <memchr>
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	d036      	beq.n	8003efa <_svfiprintf_r+0x1d2>
 8003e8c:	4b22      	ldr	r3, [pc, #136]	@ (8003f18 <_svfiprintf_r+0x1f0>)
 8003e8e:	bb1b      	cbnz	r3, 8003ed8 <_svfiprintf_r+0x1b0>
 8003e90:	9b03      	ldr	r3, [sp, #12]
 8003e92:	3307      	adds	r3, #7
 8003e94:	f023 0307 	bic.w	r3, r3, #7
 8003e98:	3308      	adds	r3, #8
 8003e9a:	9303      	str	r3, [sp, #12]
 8003e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e9e:	4433      	add	r3, r6
 8003ea0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ea2:	e76a      	b.n	8003d7a <_svfiprintf_r+0x52>
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8003eac:	e7a8      	b.n	8003e00 <_svfiprintf_r+0xd8>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f04f 0c0a 	mov.w	ip, #10
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	3401      	adds	r4, #1
 8003eb8:	9305      	str	r3, [sp, #20]
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ec0:	3a30      	subs	r2, #48	@ 0x30
 8003ec2:	2a09      	cmp	r2, #9
 8003ec4:	d903      	bls.n	8003ece <_svfiprintf_r+0x1a6>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0c6      	beq.n	8003e58 <_svfiprintf_r+0x130>
 8003eca:	9105      	str	r1, [sp, #20]
 8003ecc:	e7c4      	b.n	8003e58 <_svfiprintf_r+0x130>
 8003ece:	4604      	mov	r4, r0
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ed6:	e7f0      	b.n	8003eba <_svfiprintf_r+0x192>
 8003ed8:	ab03      	add	r3, sp, #12
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	462a      	mov	r2, r5
 8003ede:	4638      	mov	r0, r7
 8003ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8003f1c <_svfiprintf_r+0x1f4>)
 8003ee2:	a904      	add	r1, sp, #16
 8003ee4:	f3af 8000 	nop.w
 8003ee8:	1c42      	adds	r2, r0, #1
 8003eea:	4606      	mov	r6, r0
 8003eec:	d1d6      	bne.n	8003e9c <_svfiprintf_r+0x174>
 8003eee:	89ab      	ldrh	r3, [r5, #12]
 8003ef0:	065b      	lsls	r3, r3, #25
 8003ef2:	f53f af2d 	bmi.w	8003d50 <_svfiprintf_r+0x28>
 8003ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ef8:	e72c      	b.n	8003d54 <_svfiprintf_r+0x2c>
 8003efa:	ab03      	add	r3, sp, #12
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	462a      	mov	r2, r5
 8003f00:	4638      	mov	r0, r7
 8003f02:	4b06      	ldr	r3, [pc, #24]	@ (8003f1c <_svfiprintf_r+0x1f4>)
 8003f04:	a904      	add	r1, sp, #16
 8003f06:	f000 f9bd 	bl	8004284 <_printf_i>
 8003f0a:	e7ed      	b.n	8003ee8 <_svfiprintf_r+0x1c0>
 8003f0c:	0800493e 	.word	0x0800493e
 8003f10:	08004944 	.word	0x08004944
 8003f14:	08004948 	.word	0x08004948
 8003f18:	00000000 	.word	0x00000000
 8003f1c:	08003c71 	.word	0x08003c71

08003f20 <__sfputc_r>:
 8003f20:	6893      	ldr	r3, [r2, #8]
 8003f22:	b410      	push	{r4}
 8003f24:	3b01      	subs	r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	6093      	str	r3, [r2, #8]
 8003f2a:	da07      	bge.n	8003f3c <__sfputc_r+0x1c>
 8003f2c:	6994      	ldr	r4, [r2, #24]
 8003f2e:	42a3      	cmp	r3, r4
 8003f30:	db01      	blt.n	8003f36 <__sfputc_r+0x16>
 8003f32:	290a      	cmp	r1, #10
 8003f34:	d102      	bne.n	8003f3c <__sfputc_r+0x1c>
 8003f36:	bc10      	pop	{r4}
 8003f38:	f000 bac4 	b.w	80044c4 <__swbuf_r>
 8003f3c:	6813      	ldr	r3, [r2, #0]
 8003f3e:	1c58      	adds	r0, r3, #1
 8003f40:	6010      	str	r0, [r2, #0]
 8003f42:	7019      	strb	r1, [r3, #0]
 8003f44:	4608      	mov	r0, r1
 8003f46:	bc10      	pop	{r4}
 8003f48:	4770      	bx	lr

08003f4a <__sfputs_r>:
 8003f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	460f      	mov	r7, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	18d5      	adds	r5, r2, r3
 8003f54:	42ac      	cmp	r4, r5
 8003f56:	d101      	bne.n	8003f5c <__sfputs_r+0x12>
 8003f58:	2000      	movs	r0, #0
 8003f5a:	e007      	b.n	8003f6c <__sfputs_r+0x22>
 8003f5c:	463a      	mov	r2, r7
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f64:	f7ff ffdc 	bl	8003f20 <__sfputc_r>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d1f3      	bne.n	8003f54 <__sfputs_r+0xa>
 8003f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f70 <_vfiprintf_r>:
 8003f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f74:	460d      	mov	r5, r1
 8003f76:	4614      	mov	r4, r2
 8003f78:	4698      	mov	r8, r3
 8003f7a:	4606      	mov	r6, r0
 8003f7c:	b09d      	sub	sp, #116	@ 0x74
 8003f7e:	b118      	cbz	r0, 8003f88 <_vfiprintf_r+0x18>
 8003f80:	6a03      	ldr	r3, [r0, #32]
 8003f82:	b90b      	cbnz	r3, 8003f88 <_vfiprintf_r+0x18>
 8003f84:	f7ff fc42 	bl	800380c <__sinit>
 8003f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f8a:	07d9      	lsls	r1, r3, #31
 8003f8c:	d405      	bmi.n	8003f9a <_vfiprintf_r+0x2a>
 8003f8e:	89ab      	ldrh	r3, [r5, #12]
 8003f90:	059a      	lsls	r2, r3, #22
 8003f92:	d402      	bmi.n	8003f9a <_vfiprintf_r+0x2a>
 8003f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f96:	f7ff fd72 	bl	8003a7e <__retarget_lock_acquire_recursive>
 8003f9a:	89ab      	ldrh	r3, [r5, #12]
 8003f9c:	071b      	lsls	r3, r3, #28
 8003f9e:	d501      	bpl.n	8003fa4 <_vfiprintf_r+0x34>
 8003fa0:	692b      	ldr	r3, [r5, #16]
 8003fa2:	b99b      	cbnz	r3, 8003fcc <_vfiprintf_r+0x5c>
 8003fa4:	4629      	mov	r1, r5
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	f000 faca 	bl	8004540 <__swsetup_r>
 8003fac:	b170      	cbz	r0, 8003fcc <_vfiprintf_r+0x5c>
 8003fae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fb0:	07dc      	lsls	r4, r3, #31
 8003fb2:	d504      	bpl.n	8003fbe <_vfiprintf_r+0x4e>
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	b01d      	add	sp, #116	@ 0x74
 8003fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fbe:	89ab      	ldrh	r3, [r5, #12]
 8003fc0:	0598      	lsls	r0, r3, #22
 8003fc2:	d4f7      	bmi.n	8003fb4 <_vfiprintf_r+0x44>
 8003fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fc6:	f7ff fd5b 	bl	8003a80 <__retarget_lock_release_recursive>
 8003fca:	e7f3      	b.n	8003fb4 <_vfiprintf_r+0x44>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fd6:	2330      	movs	r3, #48	@ 0x30
 8003fd8:	f04f 0901 	mov.w	r9, #1
 8003fdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fe0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800418c <_vfiprintf_r+0x21c>
 8003fe4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fe8:	4623      	mov	r3, r4
 8003fea:	469a      	mov	sl, r3
 8003fec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ff0:	b10a      	cbz	r2, 8003ff6 <_vfiprintf_r+0x86>
 8003ff2:	2a25      	cmp	r2, #37	@ 0x25
 8003ff4:	d1f9      	bne.n	8003fea <_vfiprintf_r+0x7a>
 8003ff6:	ebba 0b04 	subs.w	fp, sl, r4
 8003ffa:	d00b      	beq.n	8004014 <_vfiprintf_r+0xa4>
 8003ffc:	465b      	mov	r3, fp
 8003ffe:	4622      	mov	r2, r4
 8004000:	4629      	mov	r1, r5
 8004002:	4630      	mov	r0, r6
 8004004:	f7ff ffa1 	bl	8003f4a <__sfputs_r>
 8004008:	3001      	adds	r0, #1
 800400a:	f000 80a7 	beq.w	800415c <_vfiprintf_r+0x1ec>
 800400e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004010:	445a      	add	r2, fp
 8004012:	9209      	str	r2, [sp, #36]	@ 0x24
 8004014:	f89a 3000 	ldrb.w	r3, [sl]
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 809f 	beq.w	800415c <_vfiprintf_r+0x1ec>
 800401e:	2300      	movs	r3, #0
 8004020:	f04f 32ff 	mov.w	r2, #4294967295
 8004024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004028:	f10a 0a01 	add.w	sl, sl, #1
 800402c:	9304      	str	r3, [sp, #16]
 800402e:	9307      	str	r3, [sp, #28]
 8004030:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004034:	931a      	str	r3, [sp, #104]	@ 0x68
 8004036:	4654      	mov	r4, sl
 8004038:	2205      	movs	r2, #5
 800403a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800403e:	4853      	ldr	r0, [pc, #332]	@ (800418c <_vfiprintf_r+0x21c>)
 8004040:	f000 fafe 	bl	8004640 <memchr>
 8004044:	9a04      	ldr	r2, [sp, #16]
 8004046:	b9d8      	cbnz	r0, 8004080 <_vfiprintf_r+0x110>
 8004048:	06d1      	lsls	r1, r2, #27
 800404a:	bf44      	itt	mi
 800404c:	2320      	movmi	r3, #32
 800404e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004052:	0713      	lsls	r3, r2, #28
 8004054:	bf44      	itt	mi
 8004056:	232b      	movmi	r3, #43	@ 0x2b
 8004058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800405c:	f89a 3000 	ldrb.w	r3, [sl]
 8004060:	2b2a      	cmp	r3, #42	@ 0x2a
 8004062:	d015      	beq.n	8004090 <_vfiprintf_r+0x120>
 8004064:	4654      	mov	r4, sl
 8004066:	2000      	movs	r0, #0
 8004068:	f04f 0c0a 	mov.w	ip, #10
 800406c:	9a07      	ldr	r2, [sp, #28]
 800406e:	4621      	mov	r1, r4
 8004070:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004074:	3b30      	subs	r3, #48	@ 0x30
 8004076:	2b09      	cmp	r3, #9
 8004078:	d94b      	bls.n	8004112 <_vfiprintf_r+0x1a2>
 800407a:	b1b0      	cbz	r0, 80040aa <_vfiprintf_r+0x13a>
 800407c:	9207      	str	r2, [sp, #28]
 800407e:	e014      	b.n	80040aa <_vfiprintf_r+0x13a>
 8004080:	eba0 0308 	sub.w	r3, r0, r8
 8004084:	fa09 f303 	lsl.w	r3, r9, r3
 8004088:	4313      	orrs	r3, r2
 800408a:	46a2      	mov	sl, r4
 800408c:	9304      	str	r3, [sp, #16]
 800408e:	e7d2      	b.n	8004036 <_vfiprintf_r+0xc6>
 8004090:	9b03      	ldr	r3, [sp, #12]
 8004092:	1d19      	adds	r1, r3, #4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	9103      	str	r1, [sp, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	bfbb      	ittet	lt
 800409c:	425b      	neglt	r3, r3
 800409e:	f042 0202 	orrlt.w	r2, r2, #2
 80040a2:	9307      	strge	r3, [sp, #28]
 80040a4:	9307      	strlt	r3, [sp, #28]
 80040a6:	bfb8      	it	lt
 80040a8:	9204      	strlt	r2, [sp, #16]
 80040aa:	7823      	ldrb	r3, [r4, #0]
 80040ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80040ae:	d10a      	bne.n	80040c6 <_vfiprintf_r+0x156>
 80040b0:	7863      	ldrb	r3, [r4, #1]
 80040b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80040b4:	d132      	bne.n	800411c <_vfiprintf_r+0x1ac>
 80040b6:	9b03      	ldr	r3, [sp, #12]
 80040b8:	3402      	adds	r4, #2
 80040ba:	1d1a      	adds	r2, r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	9203      	str	r2, [sp, #12]
 80040c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040c4:	9305      	str	r3, [sp, #20]
 80040c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004190 <_vfiprintf_r+0x220>
 80040ca:	2203      	movs	r2, #3
 80040cc:	4650      	mov	r0, sl
 80040ce:	7821      	ldrb	r1, [r4, #0]
 80040d0:	f000 fab6 	bl	8004640 <memchr>
 80040d4:	b138      	cbz	r0, 80040e6 <_vfiprintf_r+0x176>
 80040d6:	2240      	movs	r2, #64	@ 0x40
 80040d8:	9b04      	ldr	r3, [sp, #16]
 80040da:	eba0 000a 	sub.w	r0, r0, sl
 80040de:	4082      	lsls	r2, r0
 80040e0:	4313      	orrs	r3, r2
 80040e2:	3401      	adds	r4, #1
 80040e4:	9304      	str	r3, [sp, #16]
 80040e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ea:	2206      	movs	r2, #6
 80040ec:	4829      	ldr	r0, [pc, #164]	@ (8004194 <_vfiprintf_r+0x224>)
 80040ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040f2:	f000 faa5 	bl	8004640 <memchr>
 80040f6:	2800      	cmp	r0, #0
 80040f8:	d03f      	beq.n	800417a <_vfiprintf_r+0x20a>
 80040fa:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <_vfiprintf_r+0x228>)
 80040fc:	bb1b      	cbnz	r3, 8004146 <_vfiprintf_r+0x1d6>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	3307      	adds	r3, #7
 8004102:	f023 0307 	bic.w	r3, r3, #7
 8004106:	3308      	adds	r3, #8
 8004108:	9303      	str	r3, [sp, #12]
 800410a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800410c:	443b      	add	r3, r7
 800410e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004110:	e76a      	b.n	8003fe8 <_vfiprintf_r+0x78>
 8004112:	460c      	mov	r4, r1
 8004114:	2001      	movs	r0, #1
 8004116:	fb0c 3202 	mla	r2, ip, r2, r3
 800411a:	e7a8      	b.n	800406e <_vfiprintf_r+0xfe>
 800411c:	2300      	movs	r3, #0
 800411e:	f04f 0c0a 	mov.w	ip, #10
 8004122:	4619      	mov	r1, r3
 8004124:	3401      	adds	r4, #1
 8004126:	9305      	str	r3, [sp, #20]
 8004128:	4620      	mov	r0, r4
 800412a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800412e:	3a30      	subs	r2, #48	@ 0x30
 8004130:	2a09      	cmp	r2, #9
 8004132:	d903      	bls.n	800413c <_vfiprintf_r+0x1cc>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0c6      	beq.n	80040c6 <_vfiprintf_r+0x156>
 8004138:	9105      	str	r1, [sp, #20]
 800413a:	e7c4      	b.n	80040c6 <_vfiprintf_r+0x156>
 800413c:	4604      	mov	r4, r0
 800413e:	2301      	movs	r3, #1
 8004140:	fb0c 2101 	mla	r1, ip, r1, r2
 8004144:	e7f0      	b.n	8004128 <_vfiprintf_r+0x1b8>
 8004146:	ab03      	add	r3, sp, #12
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	462a      	mov	r2, r5
 800414c:	4630      	mov	r0, r6
 800414e:	4b13      	ldr	r3, [pc, #76]	@ (800419c <_vfiprintf_r+0x22c>)
 8004150:	a904      	add	r1, sp, #16
 8004152:	f3af 8000 	nop.w
 8004156:	4607      	mov	r7, r0
 8004158:	1c78      	adds	r0, r7, #1
 800415a:	d1d6      	bne.n	800410a <_vfiprintf_r+0x19a>
 800415c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800415e:	07d9      	lsls	r1, r3, #31
 8004160:	d405      	bmi.n	800416e <_vfiprintf_r+0x1fe>
 8004162:	89ab      	ldrh	r3, [r5, #12]
 8004164:	059a      	lsls	r2, r3, #22
 8004166:	d402      	bmi.n	800416e <_vfiprintf_r+0x1fe>
 8004168:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800416a:	f7ff fc89 	bl	8003a80 <__retarget_lock_release_recursive>
 800416e:	89ab      	ldrh	r3, [r5, #12]
 8004170:	065b      	lsls	r3, r3, #25
 8004172:	f53f af1f 	bmi.w	8003fb4 <_vfiprintf_r+0x44>
 8004176:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004178:	e71e      	b.n	8003fb8 <_vfiprintf_r+0x48>
 800417a:	ab03      	add	r3, sp, #12
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	462a      	mov	r2, r5
 8004180:	4630      	mov	r0, r6
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <_vfiprintf_r+0x22c>)
 8004184:	a904      	add	r1, sp, #16
 8004186:	f000 f87d 	bl	8004284 <_printf_i>
 800418a:	e7e4      	b.n	8004156 <_vfiprintf_r+0x1e6>
 800418c:	0800493e 	.word	0x0800493e
 8004190:	08004944 	.word	0x08004944
 8004194:	08004948 	.word	0x08004948
 8004198:	00000000 	.word	0x00000000
 800419c:	08003f4b 	.word	0x08003f4b

080041a0 <_printf_common>:
 80041a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a4:	4616      	mov	r6, r2
 80041a6:	4698      	mov	r8, r3
 80041a8:	688a      	ldr	r2, [r1, #8]
 80041aa:	690b      	ldr	r3, [r1, #16]
 80041ac:	4607      	mov	r7, r0
 80041ae:	4293      	cmp	r3, r2
 80041b0:	bfb8      	it	lt
 80041b2:	4613      	movlt	r3, r2
 80041b4:	6033      	str	r3, [r6, #0]
 80041b6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041ba:	460c      	mov	r4, r1
 80041bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041c0:	b10a      	cbz	r2, 80041c6 <_printf_common+0x26>
 80041c2:	3301      	adds	r3, #1
 80041c4:	6033      	str	r3, [r6, #0]
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	0699      	lsls	r1, r3, #26
 80041ca:	bf42      	ittt	mi
 80041cc:	6833      	ldrmi	r3, [r6, #0]
 80041ce:	3302      	addmi	r3, #2
 80041d0:	6033      	strmi	r3, [r6, #0]
 80041d2:	6825      	ldr	r5, [r4, #0]
 80041d4:	f015 0506 	ands.w	r5, r5, #6
 80041d8:	d106      	bne.n	80041e8 <_printf_common+0x48>
 80041da:	f104 0a19 	add.w	sl, r4, #25
 80041de:	68e3      	ldr	r3, [r4, #12]
 80041e0:	6832      	ldr	r2, [r6, #0]
 80041e2:	1a9b      	subs	r3, r3, r2
 80041e4:	42ab      	cmp	r3, r5
 80041e6:	dc2b      	bgt.n	8004240 <_printf_common+0xa0>
 80041e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	3b00      	subs	r3, #0
 80041f0:	bf18      	it	ne
 80041f2:	2301      	movne	r3, #1
 80041f4:	0692      	lsls	r2, r2, #26
 80041f6:	d430      	bmi.n	800425a <_printf_common+0xba>
 80041f8:	4641      	mov	r1, r8
 80041fa:	4638      	mov	r0, r7
 80041fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004200:	47c8      	blx	r9
 8004202:	3001      	adds	r0, #1
 8004204:	d023      	beq.n	800424e <_printf_common+0xae>
 8004206:	6823      	ldr	r3, [r4, #0]
 8004208:	6922      	ldr	r2, [r4, #16]
 800420a:	f003 0306 	and.w	r3, r3, #6
 800420e:	2b04      	cmp	r3, #4
 8004210:	bf14      	ite	ne
 8004212:	2500      	movne	r5, #0
 8004214:	6833      	ldreq	r3, [r6, #0]
 8004216:	f04f 0600 	mov.w	r6, #0
 800421a:	bf08      	it	eq
 800421c:	68e5      	ldreq	r5, [r4, #12]
 800421e:	f104 041a 	add.w	r4, r4, #26
 8004222:	bf08      	it	eq
 8004224:	1aed      	subeq	r5, r5, r3
 8004226:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800422a:	bf08      	it	eq
 800422c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004230:	4293      	cmp	r3, r2
 8004232:	bfc4      	itt	gt
 8004234:	1a9b      	subgt	r3, r3, r2
 8004236:	18ed      	addgt	r5, r5, r3
 8004238:	42b5      	cmp	r5, r6
 800423a:	d11a      	bne.n	8004272 <_printf_common+0xd2>
 800423c:	2000      	movs	r0, #0
 800423e:	e008      	b.n	8004252 <_printf_common+0xb2>
 8004240:	2301      	movs	r3, #1
 8004242:	4652      	mov	r2, sl
 8004244:	4641      	mov	r1, r8
 8004246:	4638      	mov	r0, r7
 8004248:	47c8      	blx	r9
 800424a:	3001      	adds	r0, #1
 800424c:	d103      	bne.n	8004256 <_printf_common+0xb6>
 800424e:	f04f 30ff 	mov.w	r0, #4294967295
 8004252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004256:	3501      	adds	r5, #1
 8004258:	e7c1      	b.n	80041de <_printf_common+0x3e>
 800425a:	2030      	movs	r0, #48	@ 0x30
 800425c:	18e1      	adds	r1, r4, r3
 800425e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004268:	4422      	add	r2, r4
 800426a:	3302      	adds	r3, #2
 800426c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004270:	e7c2      	b.n	80041f8 <_printf_common+0x58>
 8004272:	2301      	movs	r3, #1
 8004274:	4622      	mov	r2, r4
 8004276:	4641      	mov	r1, r8
 8004278:	4638      	mov	r0, r7
 800427a:	47c8      	blx	r9
 800427c:	3001      	adds	r0, #1
 800427e:	d0e6      	beq.n	800424e <_printf_common+0xae>
 8004280:	3601      	adds	r6, #1
 8004282:	e7d9      	b.n	8004238 <_printf_common+0x98>

08004284 <_printf_i>:
 8004284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004288:	7e0f      	ldrb	r7, [r1, #24]
 800428a:	4691      	mov	r9, r2
 800428c:	2f78      	cmp	r7, #120	@ 0x78
 800428e:	4680      	mov	r8, r0
 8004290:	460c      	mov	r4, r1
 8004292:	469a      	mov	sl, r3
 8004294:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004296:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800429a:	d807      	bhi.n	80042ac <_printf_i+0x28>
 800429c:	2f62      	cmp	r7, #98	@ 0x62
 800429e:	d80a      	bhi.n	80042b6 <_printf_i+0x32>
 80042a0:	2f00      	cmp	r7, #0
 80042a2:	f000 80d3 	beq.w	800444c <_printf_i+0x1c8>
 80042a6:	2f58      	cmp	r7, #88	@ 0x58
 80042a8:	f000 80ba 	beq.w	8004420 <_printf_i+0x19c>
 80042ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042b4:	e03a      	b.n	800432c <_printf_i+0xa8>
 80042b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042ba:	2b15      	cmp	r3, #21
 80042bc:	d8f6      	bhi.n	80042ac <_printf_i+0x28>
 80042be:	a101      	add	r1, pc, #4	@ (adr r1, 80042c4 <_printf_i+0x40>)
 80042c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042c4:	0800431d 	.word	0x0800431d
 80042c8:	08004331 	.word	0x08004331
 80042cc:	080042ad 	.word	0x080042ad
 80042d0:	080042ad 	.word	0x080042ad
 80042d4:	080042ad 	.word	0x080042ad
 80042d8:	080042ad 	.word	0x080042ad
 80042dc:	08004331 	.word	0x08004331
 80042e0:	080042ad 	.word	0x080042ad
 80042e4:	080042ad 	.word	0x080042ad
 80042e8:	080042ad 	.word	0x080042ad
 80042ec:	080042ad 	.word	0x080042ad
 80042f0:	08004433 	.word	0x08004433
 80042f4:	0800435b 	.word	0x0800435b
 80042f8:	080043ed 	.word	0x080043ed
 80042fc:	080042ad 	.word	0x080042ad
 8004300:	080042ad 	.word	0x080042ad
 8004304:	08004455 	.word	0x08004455
 8004308:	080042ad 	.word	0x080042ad
 800430c:	0800435b 	.word	0x0800435b
 8004310:	080042ad 	.word	0x080042ad
 8004314:	080042ad 	.word	0x080042ad
 8004318:	080043f5 	.word	0x080043f5
 800431c:	6833      	ldr	r3, [r6, #0]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	6032      	str	r2, [r6, #0]
 8004324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004328:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800432c:	2301      	movs	r3, #1
 800432e:	e09e      	b.n	800446e <_printf_i+0x1ea>
 8004330:	6833      	ldr	r3, [r6, #0]
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	1d19      	adds	r1, r3, #4
 8004336:	6031      	str	r1, [r6, #0]
 8004338:	0606      	lsls	r6, r0, #24
 800433a:	d501      	bpl.n	8004340 <_printf_i+0xbc>
 800433c:	681d      	ldr	r5, [r3, #0]
 800433e:	e003      	b.n	8004348 <_printf_i+0xc4>
 8004340:	0645      	lsls	r5, r0, #25
 8004342:	d5fb      	bpl.n	800433c <_printf_i+0xb8>
 8004344:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004348:	2d00      	cmp	r5, #0
 800434a:	da03      	bge.n	8004354 <_printf_i+0xd0>
 800434c:	232d      	movs	r3, #45	@ 0x2d
 800434e:	426d      	negs	r5, r5
 8004350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004354:	230a      	movs	r3, #10
 8004356:	4859      	ldr	r0, [pc, #356]	@ (80044bc <_printf_i+0x238>)
 8004358:	e011      	b.n	800437e <_printf_i+0xfa>
 800435a:	6821      	ldr	r1, [r4, #0]
 800435c:	6833      	ldr	r3, [r6, #0]
 800435e:	0608      	lsls	r0, r1, #24
 8004360:	f853 5b04 	ldr.w	r5, [r3], #4
 8004364:	d402      	bmi.n	800436c <_printf_i+0xe8>
 8004366:	0649      	lsls	r1, r1, #25
 8004368:	bf48      	it	mi
 800436a:	b2ad      	uxthmi	r5, r5
 800436c:	2f6f      	cmp	r7, #111	@ 0x6f
 800436e:	6033      	str	r3, [r6, #0]
 8004370:	bf14      	ite	ne
 8004372:	230a      	movne	r3, #10
 8004374:	2308      	moveq	r3, #8
 8004376:	4851      	ldr	r0, [pc, #324]	@ (80044bc <_printf_i+0x238>)
 8004378:	2100      	movs	r1, #0
 800437a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800437e:	6866      	ldr	r6, [r4, #4]
 8004380:	2e00      	cmp	r6, #0
 8004382:	bfa8      	it	ge
 8004384:	6821      	ldrge	r1, [r4, #0]
 8004386:	60a6      	str	r6, [r4, #8]
 8004388:	bfa4      	itt	ge
 800438a:	f021 0104 	bicge.w	r1, r1, #4
 800438e:	6021      	strge	r1, [r4, #0]
 8004390:	b90d      	cbnz	r5, 8004396 <_printf_i+0x112>
 8004392:	2e00      	cmp	r6, #0
 8004394:	d04b      	beq.n	800442e <_printf_i+0x1aa>
 8004396:	4616      	mov	r6, r2
 8004398:	fbb5 f1f3 	udiv	r1, r5, r3
 800439c:	fb03 5711 	mls	r7, r3, r1, r5
 80043a0:	5dc7      	ldrb	r7, [r0, r7]
 80043a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043a6:	462f      	mov	r7, r5
 80043a8:	42bb      	cmp	r3, r7
 80043aa:	460d      	mov	r5, r1
 80043ac:	d9f4      	bls.n	8004398 <_printf_i+0x114>
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d10b      	bne.n	80043ca <_printf_i+0x146>
 80043b2:	6823      	ldr	r3, [r4, #0]
 80043b4:	07df      	lsls	r7, r3, #31
 80043b6:	d508      	bpl.n	80043ca <_printf_i+0x146>
 80043b8:	6923      	ldr	r3, [r4, #16]
 80043ba:	6861      	ldr	r1, [r4, #4]
 80043bc:	4299      	cmp	r1, r3
 80043be:	bfde      	ittt	le
 80043c0:	2330      	movle	r3, #48	@ 0x30
 80043c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043ca:	1b92      	subs	r2, r2, r6
 80043cc:	6122      	str	r2, [r4, #16]
 80043ce:	464b      	mov	r3, r9
 80043d0:	4621      	mov	r1, r4
 80043d2:	4640      	mov	r0, r8
 80043d4:	f8cd a000 	str.w	sl, [sp]
 80043d8:	aa03      	add	r2, sp, #12
 80043da:	f7ff fee1 	bl	80041a0 <_printf_common>
 80043de:	3001      	adds	r0, #1
 80043e0:	d14a      	bne.n	8004478 <_printf_i+0x1f4>
 80043e2:	f04f 30ff 	mov.w	r0, #4294967295
 80043e6:	b004      	add	sp, #16
 80043e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	f043 0320 	orr.w	r3, r3, #32
 80043f2:	6023      	str	r3, [r4, #0]
 80043f4:	2778      	movs	r7, #120	@ 0x78
 80043f6:	4832      	ldr	r0, [pc, #200]	@ (80044c0 <_printf_i+0x23c>)
 80043f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	6831      	ldr	r1, [r6, #0]
 8004400:	061f      	lsls	r7, r3, #24
 8004402:	f851 5b04 	ldr.w	r5, [r1], #4
 8004406:	d402      	bmi.n	800440e <_printf_i+0x18a>
 8004408:	065f      	lsls	r7, r3, #25
 800440a:	bf48      	it	mi
 800440c:	b2ad      	uxthmi	r5, r5
 800440e:	6031      	str	r1, [r6, #0]
 8004410:	07d9      	lsls	r1, r3, #31
 8004412:	bf44      	itt	mi
 8004414:	f043 0320 	orrmi.w	r3, r3, #32
 8004418:	6023      	strmi	r3, [r4, #0]
 800441a:	b11d      	cbz	r5, 8004424 <_printf_i+0x1a0>
 800441c:	2310      	movs	r3, #16
 800441e:	e7ab      	b.n	8004378 <_printf_i+0xf4>
 8004420:	4826      	ldr	r0, [pc, #152]	@ (80044bc <_printf_i+0x238>)
 8004422:	e7e9      	b.n	80043f8 <_printf_i+0x174>
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	f023 0320 	bic.w	r3, r3, #32
 800442a:	6023      	str	r3, [r4, #0]
 800442c:	e7f6      	b.n	800441c <_printf_i+0x198>
 800442e:	4616      	mov	r6, r2
 8004430:	e7bd      	b.n	80043ae <_printf_i+0x12a>
 8004432:	6833      	ldr	r3, [r6, #0]
 8004434:	6825      	ldr	r5, [r4, #0]
 8004436:	1d18      	adds	r0, r3, #4
 8004438:	6961      	ldr	r1, [r4, #20]
 800443a:	6030      	str	r0, [r6, #0]
 800443c:	062e      	lsls	r6, r5, #24
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	d501      	bpl.n	8004446 <_printf_i+0x1c2>
 8004442:	6019      	str	r1, [r3, #0]
 8004444:	e002      	b.n	800444c <_printf_i+0x1c8>
 8004446:	0668      	lsls	r0, r5, #25
 8004448:	d5fb      	bpl.n	8004442 <_printf_i+0x1be>
 800444a:	8019      	strh	r1, [r3, #0]
 800444c:	2300      	movs	r3, #0
 800444e:	4616      	mov	r6, r2
 8004450:	6123      	str	r3, [r4, #16]
 8004452:	e7bc      	b.n	80043ce <_printf_i+0x14a>
 8004454:	6833      	ldr	r3, [r6, #0]
 8004456:	2100      	movs	r1, #0
 8004458:	1d1a      	adds	r2, r3, #4
 800445a:	6032      	str	r2, [r6, #0]
 800445c:	681e      	ldr	r6, [r3, #0]
 800445e:	6862      	ldr	r2, [r4, #4]
 8004460:	4630      	mov	r0, r6
 8004462:	f000 f8ed 	bl	8004640 <memchr>
 8004466:	b108      	cbz	r0, 800446c <_printf_i+0x1e8>
 8004468:	1b80      	subs	r0, r0, r6
 800446a:	6060      	str	r0, [r4, #4]
 800446c:	6863      	ldr	r3, [r4, #4]
 800446e:	6123      	str	r3, [r4, #16]
 8004470:	2300      	movs	r3, #0
 8004472:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004476:	e7aa      	b.n	80043ce <_printf_i+0x14a>
 8004478:	4632      	mov	r2, r6
 800447a:	4649      	mov	r1, r9
 800447c:	4640      	mov	r0, r8
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	47d0      	blx	sl
 8004482:	3001      	adds	r0, #1
 8004484:	d0ad      	beq.n	80043e2 <_printf_i+0x15e>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	079b      	lsls	r3, r3, #30
 800448a:	d413      	bmi.n	80044b4 <_printf_i+0x230>
 800448c:	68e0      	ldr	r0, [r4, #12]
 800448e:	9b03      	ldr	r3, [sp, #12]
 8004490:	4298      	cmp	r0, r3
 8004492:	bfb8      	it	lt
 8004494:	4618      	movlt	r0, r3
 8004496:	e7a6      	b.n	80043e6 <_printf_i+0x162>
 8004498:	2301      	movs	r3, #1
 800449a:	4632      	mov	r2, r6
 800449c:	4649      	mov	r1, r9
 800449e:	4640      	mov	r0, r8
 80044a0:	47d0      	blx	sl
 80044a2:	3001      	adds	r0, #1
 80044a4:	d09d      	beq.n	80043e2 <_printf_i+0x15e>
 80044a6:	3501      	adds	r5, #1
 80044a8:	68e3      	ldr	r3, [r4, #12]
 80044aa:	9903      	ldr	r1, [sp, #12]
 80044ac:	1a5b      	subs	r3, r3, r1
 80044ae:	42ab      	cmp	r3, r5
 80044b0:	dcf2      	bgt.n	8004498 <_printf_i+0x214>
 80044b2:	e7eb      	b.n	800448c <_printf_i+0x208>
 80044b4:	2500      	movs	r5, #0
 80044b6:	f104 0619 	add.w	r6, r4, #25
 80044ba:	e7f5      	b.n	80044a8 <_printf_i+0x224>
 80044bc:	0800494f 	.word	0x0800494f
 80044c0:	08004960 	.word	0x08004960

080044c4 <__swbuf_r>:
 80044c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c6:	460e      	mov	r6, r1
 80044c8:	4614      	mov	r4, r2
 80044ca:	4605      	mov	r5, r0
 80044cc:	b118      	cbz	r0, 80044d6 <__swbuf_r+0x12>
 80044ce:	6a03      	ldr	r3, [r0, #32]
 80044d0:	b90b      	cbnz	r3, 80044d6 <__swbuf_r+0x12>
 80044d2:	f7ff f99b 	bl	800380c <__sinit>
 80044d6:	69a3      	ldr	r3, [r4, #24]
 80044d8:	60a3      	str	r3, [r4, #8]
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	071a      	lsls	r2, r3, #28
 80044de:	d501      	bpl.n	80044e4 <__swbuf_r+0x20>
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	b943      	cbnz	r3, 80044f6 <__swbuf_r+0x32>
 80044e4:	4621      	mov	r1, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	f000 f82a 	bl	8004540 <__swsetup_r>
 80044ec:	b118      	cbz	r0, 80044f6 <__swbuf_r+0x32>
 80044ee:	f04f 37ff 	mov.w	r7, #4294967295
 80044f2:	4638      	mov	r0, r7
 80044f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f6:	6823      	ldr	r3, [r4, #0]
 80044f8:	6922      	ldr	r2, [r4, #16]
 80044fa:	b2f6      	uxtb	r6, r6
 80044fc:	1a98      	subs	r0, r3, r2
 80044fe:	6963      	ldr	r3, [r4, #20]
 8004500:	4637      	mov	r7, r6
 8004502:	4283      	cmp	r3, r0
 8004504:	dc05      	bgt.n	8004512 <__swbuf_r+0x4e>
 8004506:	4621      	mov	r1, r4
 8004508:	4628      	mov	r0, r5
 800450a:	f7ff f8b7 	bl	800367c <_fflush_r>
 800450e:	2800      	cmp	r0, #0
 8004510:	d1ed      	bne.n	80044ee <__swbuf_r+0x2a>
 8004512:	68a3      	ldr	r3, [r4, #8]
 8004514:	3b01      	subs	r3, #1
 8004516:	60a3      	str	r3, [r4, #8]
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	6022      	str	r2, [r4, #0]
 800451e:	701e      	strb	r6, [r3, #0]
 8004520:	6962      	ldr	r2, [r4, #20]
 8004522:	1c43      	adds	r3, r0, #1
 8004524:	429a      	cmp	r2, r3
 8004526:	d004      	beq.n	8004532 <__swbuf_r+0x6e>
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	07db      	lsls	r3, r3, #31
 800452c:	d5e1      	bpl.n	80044f2 <__swbuf_r+0x2e>
 800452e:	2e0a      	cmp	r6, #10
 8004530:	d1df      	bne.n	80044f2 <__swbuf_r+0x2e>
 8004532:	4621      	mov	r1, r4
 8004534:	4628      	mov	r0, r5
 8004536:	f7ff f8a1 	bl	800367c <_fflush_r>
 800453a:	2800      	cmp	r0, #0
 800453c:	d0d9      	beq.n	80044f2 <__swbuf_r+0x2e>
 800453e:	e7d6      	b.n	80044ee <__swbuf_r+0x2a>

08004540 <__swsetup_r>:
 8004540:	b538      	push	{r3, r4, r5, lr}
 8004542:	4b29      	ldr	r3, [pc, #164]	@ (80045e8 <__swsetup_r+0xa8>)
 8004544:	4605      	mov	r5, r0
 8004546:	6818      	ldr	r0, [r3, #0]
 8004548:	460c      	mov	r4, r1
 800454a:	b118      	cbz	r0, 8004554 <__swsetup_r+0x14>
 800454c:	6a03      	ldr	r3, [r0, #32]
 800454e:	b90b      	cbnz	r3, 8004554 <__swsetup_r+0x14>
 8004550:	f7ff f95c 	bl	800380c <__sinit>
 8004554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004558:	0719      	lsls	r1, r3, #28
 800455a:	d422      	bmi.n	80045a2 <__swsetup_r+0x62>
 800455c:	06da      	lsls	r2, r3, #27
 800455e:	d407      	bmi.n	8004570 <__swsetup_r+0x30>
 8004560:	2209      	movs	r2, #9
 8004562:	602a      	str	r2, [r5, #0]
 8004564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	81a3      	strh	r3, [r4, #12]
 800456e:	e033      	b.n	80045d8 <__swsetup_r+0x98>
 8004570:	0758      	lsls	r0, r3, #29
 8004572:	d512      	bpl.n	800459a <__swsetup_r+0x5a>
 8004574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004576:	b141      	cbz	r1, 800458a <__swsetup_r+0x4a>
 8004578:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800457c:	4299      	cmp	r1, r3
 800457e:	d002      	beq.n	8004586 <__swsetup_r+0x46>
 8004580:	4628      	mov	r0, r5
 8004582:	f7ff fa7f 	bl	8003a84 <_free_r>
 8004586:	2300      	movs	r3, #0
 8004588:	6363      	str	r3, [r4, #52]	@ 0x34
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	2300      	movs	r3, #0
 8004594:	6063      	str	r3, [r4, #4]
 8004596:	6923      	ldr	r3, [r4, #16]
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	89a3      	ldrh	r3, [r4, #12]
 800459c:	f043 0308 	orr.w	r3, r3, #8
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	6923      	ldr	r3, [r4, #16]
 80045a4:	b94b      	cbnz	r3, 80045ba <__swsetup_r+0x7a>
 80045a6:	89a3      	ldrh	r3, [r4, #12]
 80045a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b0:	d003      	beq.n	80045ba <__swsetup_r+0x7a>
 80045b2:	4621      	mov	r1, r4
 80045b4:	4628      	mov	r0, r5
 80045b6:	f000 f8b2 	bl	800471e <__smakebuf_r>
 80045ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045be:	f013 0201 	ands.w	r2, r3, #1
 80045c2:	d00a      	beq.n	80045da <__swsetup_r+0x9a>
 80045c4:	2200      	movs	r2, #0
 80045c6:	60a2      	str	r2, [r4, #8]
 80045c8:	6962      	ldr	r2, [r4, #20]
 80045ca:	4252      	negs	r2, r2
 80045cc:	61a2      	str	r2, [r4, #24]
 80045ce:	6922      	ldr	r2, [r4, #16]
 80045d0:	b942      	cbnz	r2, 80045e4 <__swsetup_r+0xa4>
 80045d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80045d6:	d1c5      	bne.n	8004564 <__swsetup_r+0x24>
 80045d8:	bd38      	pop	{r3, r4, r5, pc}
 80045da:	0799      	lsls	r1, r3, #30
 80045dc:	bf58      	it	pl
 80045de:	6962      	ldrpl	r2, [r4, #20]
 80045e0:	60a2      	str	r2, [r4, #8]
 80045e2:	e7f4      	b.n	80045ce <__swsetup_r+0x8e>
 80045e4:	2000      	movs	r0, #0
 80045e6:	e7f7      	b.n	80045d8 <__swsetup_r+0x98>
 80045e8:	20000034 	.word	0x20000034

080045ec <memmove>:
 80045ec:	4288      	cmp	r0, r1
 80045ee:	b510      	push	{r4, lr}
 80045f0:	eb01 0402 	add.w	r4, r1, r2
 80045f4:	d902      	bls.n	80045fc <memmove+0x10>
 80045f6:	4284      	cmp	r4, r0
 80045f8:	4623      	mov	r3, r4
 80045fa:	d807      	bhi.n	800460c <memmove+0x20>
 80045fc:	1e43      	subs	r3, r0, #1
 80045fe:	42a1      	cmp	r1, r4
 8004600:	d008      	beq.n	8004614 <memmove+0x28>
 8004602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004606:	f803 2f01 	strb.w	r2, [r3, #1]!
 800460a:	e7f8      	b.n	80045fe <memmove+0x12>
 800460c:	4601      	mov	r1, r0
 800460e:	4402      	add	r2, r0
 8004610:	428a      	cmp	r2, r1
 8004612:	d100      	bne.n	8004616 <memmove+0x2a>
 8004614:	bd10      	pop	{r4, pc}
 8004616:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800461a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800461e:	e7f7      	b.n	8004610 <memmove+0x24>

08004620 <_sbrk_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	2300      	movs	r3, #0
 8004624:	4d05      	ldr	r5, [pc, #20]	@ (800463c <_sbrk_r+0x1c>)
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	602b      	str	r3, [r5, #0]
 800462c:	f7fc f87a 	bl	8000724 <_sbrk>
 8004630:	1c43      	adds	r3, r0, #1
 8004632:	d102      	bne.n	800463a <_sbrk_r+0x1a>
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b103      	cbz	r3, 800463a <_sbrk_r+0x1a>
 8004638:	6023      	str	r3, [r4, #0]
 800463a:	bd38      	pop	{r3, r4, r5, pc}
 800463c:	200003d4 	.word	0x200003d4

08004640 <memchr>:
 8004640:	4603      	mov	r3, r0
 8004642:	b510      	push	{r4, lr}
 8004644:	b2c9      	uxtb	r1, r1
 8004646:	4402      	add	r2, r0
 8004648:	4293      	cmp	r3, r2
 800464a:	4618      	mov	r0, r3
 800464c:	d101      	bne.n	8004652 <memchr+0x12>
 800464e:	2000      	movs	r0, #0
 8004650:	e003      	b.n	800465a <memchr+0x1a>
 8004652:	7804      	ldrb	r4, [r0, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	428c      	cmp	r4, r1
 8004658:	d1f6      	bne.n	8004648 <memchr+0x8>
 800465a:	bd10      	pop	{r4, pc}

0800465c <memcpy>:
 800465c:	440a      	add	r2, r1
 800465e:	4291      	cmp	r1, r2
 8004660:	f100 33ff 	add.w	r3, r0, #4294967295
 8004664:	d100      	bne.n	8004668 <memcpy+0xc>
 8004666:	4770      	bx	lr
 8004668:	b510      	push	{r4, lr}
 800466a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800466e:	4291      	cmp	r1, r2
 8004670:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004674:	d1f9      	bne.n	800466a <memcpy+0xe>
 8004676:	bd10      	pop	{r4, pc}

08004678 <_realloc_r>:
 8004678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800467c:	4680      	mov	r8, r0
 800467e:	4615      	mov	r5, r2
 8004680:	460c      	mov	r4, r1
 8004682:	b921      	cbnz	r1, 800468e <_realloc_r+0x16>
 8004684:	4611      	mov	r1, r2
 8004686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800468a:	f7ff ba65 	b.w	8003b58 <_malloc_r>
 800468e:	b92a      	cbnz	r2, 800469c <_realloc_r+0x24>
 8004690:	f7ff f9f8 	bl	8003a84 <_free_r>
 8004694:	2400      	movs	r4, #0
 8004696:	4620      	mov	r0, r4
 8004698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800469c:	f000 f89e 	bl	80047dc <_malloc_usable_size_r>
 80046a0:	4285      	cmp	r5, r0
 80046a2:	4606      	mov	r6, r0
 80046a4:	d802      	bhi.n	80046ac <_realloc_r+0x34>
 80046a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80046aa:	d8f4      	bhi.n	8004696 <_realloc_r+0x1e>
 80046ac:	4629      	mov	r1, r5
 80046ae:	4640      	mov	r0, r8
 80046b0:	f7ff fa52 	bl	8003b58 <_malloc_r>
 80046b4:	4607      	mov	r7, r0
 80046b6:	2800      	cmp	r0, #0
 80046b8:	d0ec      	beq.n	8004694 <_realloc_r+0x1c>
 80046ba:	42b5      	cmp	r5, r6
 80046bc:	462a      	mov	r2, r5
 80046be:	4621      	mov	r1, r4
 80046c0:	bf28      	it	cs
 80046c2:	4632      	movcs	r2, r6
 80046c4:	f7ff ffca 	bl	800465c <memcpy>
 80046c8:	4621      	mov	r1, r4
 80046ca:	4640      	mov	r0, r8
 80046cc:	f7ff f9da 	bl	8003a84 <_free_r>
 80046d0:	463c      	mov	r4, r7
 80046d2:	e7e0      	b.n	8004696 <_realloc_r+0x1e>

080046d4 <__swhatbuf_r>:
 80046d4:	b570      	push	{r4, r5, r6, lr}
 80046d6:	460c      	mov	r4, r1
 80046d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046dc:	4615      	mov	r5, r2
 80046de:	2900      	cmp	r1, #0
 80046e0:	461e      	mov	r6, r3
 80046e2:	b096      	sub	sp, #88	@ 0x58
 80046e4:	da0c      	bge.n	8004700 <__swhatbuf_r+0x2c>
 80046e6:	89a3      	ldrh	r3, [r4, #12]
 80046e8:	2100      	movs	r1, #0
 80046ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80046ee:	bf14      	ite	ne
 80046f0:	2340      	movne	r3, #64	@ 0x40
 80046f2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80046f6:	2000      	movs	r0, #0
 80046f8:	6031      	str	r1, [r6, #0]
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	b016      	add	sp, #88	@ 0x58
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
 8004700:	466a      	mov	r2, sp
 8004702:	f000 f849 	bl	8004798 <_fstat_r>
 8004706:	2800      	cmp	r0, #0
 8004708:	dbed      	blt.n	80046e6 <__swhatbuf_r+0x12>
 800470a:	9901      	ldr	r1, [sp, #4]
 800470c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004710:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004714:	4259      	negs	r1, r3
 8004716:	4159      	adcs	r1, r3
 8004718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800471c:	e7eb      	b.n	80046f6 <__swhatbuf_r+0x22>

0800471e <__smakebuf_r>:
 800471e:	898b      	ldrh	r3, [r1, #12]
 8004720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004722:	079d      	lsls	r5, r3, #30
 8004724:	4606      	mov	r6, r0
 8004726:	460c      	mov	r4, r1
 8004728:	d507      	bpl.n	800473a <__smakebuf_r+0x1c>
 800472a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800472e:	6023      	str	r3, [r4, #0]
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	2301      	movs	r3, #1
 8004734:	6163      	str	r3, [r4, #20]
 8004736:	b003      	add	sp, #12
 8004738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800473a:	466a      	mov	r2, sp
 800473c:	ab01      	add	r3, sp, #4
 800473e:	f7ff ffc9 	bl	80046d4 <__swhatbuf_r>
 8004742:	9f00      	ldr	r7, [sp, #0]
 8004744:	4605      	mov	r5, r0
 8004746:	4639      	mov	r1, r7
 8004748:	4630      	mov	r0, r6
 800474a:	f7ff fa05 	bl	8003b58 <_malloc_r>
 800474e:	b948      	cbnz	r0, 8004764 <__smakebuf_r+0x46>
 8004750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004754:	059a      	lsls	r2, r3, #22
 8004756:	d4ee      	bmi.n	8004736 <__smakebuf_r+0x18>
 8004758:	f023 0303 	bic.w	r3, r3, #3
 800475c:	f043 0302 	orr.w	r3, r3, #2
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	e7e2      	b.n	800472a <__smakebuf_r+0xc>
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800476a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476e:	81a3      	strh	r3, [r4, #12]
 8004770:	9b01      	ldr	r3, [sp, #4]
 8004772:	6020      	str	r0, [r4, #0]
 8004774:	b15b      	cbz	r3, 800478e <__smakebuf_r+0x70>
 8004776:	4630      	mov	r0, r6
 8004778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800477c:	f000 f81e 	bl	80047bc <_isatty_r>
 8004780:	b128      	cbz	r0, 800478e <__smakebuf_r+0x70>
 8004782:	89a3      	ldrh	r3, [r4, #12]
 8004784:	f023 0303 	bic.w	r3, r3, #3
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	81a3      	strh	r3, [r4, #12]
 800478e:	89a3      	ldrh	r3, [r4, #12]
 8004790:	431d      	orrs	r5, r3
 8004792:	81a5      	strh	r5, [r4, #12]
 8004794:	e7cf      	b.n	8004736 <__smakebuf_r+0x18>
	...

08004798 <_fstat_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	2300      	movs	r3, #0
 800479c:	4d06      	ldr	r5, [pc, #24]	@ (80047b8 <_fstat_r+0x20>)
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	4611      	mov	r1, r2
 80047a4:	602b      	str	r3, [r5, #0]
 80047a6:	f7fe fd68 	bl	800327a <_fstat>
 80047aa:	1c43      	adds	r3, r0, #1
 80047ac:	d102      	bne.n	80047b4 <_fstat_r+0x1c>
 80047ae:	682b      	ldr	r3, [r5, #0]
 80047b0:	b103      	cbz	r3, 80047b4 <_fstat_r+0x1c>
 80047b2:	6023      	str	r3, [r4, #0]
 80047b4:	bd38      	pop	{r3, r4, r5, pc}
 80047b6:	bf00      	nop
 80047b8:	200003d4 	.word	0x200003d4

080047bc <_isatty_r>:
 80047bc:	b538      	push	{r3, r4, r5, lr}
 80047be:	2300      	movs	r3, #0
 80047c0:	4d05      	ldr	r5, [pc, #20]	@ (80047d8 <_isatty_r+0x1c>)
 80047c2:	4604      	mov	r4, r0
 80047c4:	4608      	mov	r0, r1
 80047c6:	602b      	str	r3, [r5, #0]
 80047c8:	f7fe feba 	bl	8003540 <_isatty>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d102      	bne.n	80047d6 <_isatty_r+0x1a>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	b103      	cbz	r3, 80047d6 <_isatty_r+0x1a>
 80047d4:	6023      	str	r3, [r4, #0]
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	200003d4 	.word	0x200003d4

080047dc <_malloc_usable_size_r>:
 80047dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047e0:	1f18      	subs	r0, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	bfbc      	itt	lt
 80047e6:	580b      	ldrlt	r3, [r1, r0]
 80047e8:	18c0      	addlt	r0, r0, r3
 80047ea:	4770      	bx	lr

080047ec <_init>:
 80047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ee:	bf00      	nop
 80047f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047f2:	bc08      	pop	{r3}
 80047f4:	469e      	mov	lr, r3
 80047f6:	4770      	bx	lr

080047f8 <_fini>:
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047fa:	bf00      	nop
 80047fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fe:	bc08      	pop	{r3}
 8004800:	469e      	mov	lr, r3
 8004802:	4770      	bx	lr
